<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>非暴力沟通</title>
      <link href="/2020/02/11/----9/"/>
      <url>/2020/02/11/----9/</url>
      
        <content type="html"><![CDATA[<h1 id="非暴力沟通"><a href="#非暴力沟通" class="headerlink" title="非暴力沟通"></a>非暴力沟通</h1><h2 id="让爱融入社会"><a href="#让爱融入社会" class="headerlink" title="让爱融入社会"></a>让爱融入社会</h2><ul><li><p>“非暴力沟通提醒我们专注于彼此的观察、感受、需要和请求。”</p></li><li><p>“我并不将他的话视为攻击，而当作来自人类同胞的礼物。”</p></li></ul><h2 id="是什么蒙蔽了爱？"><a href="#是什么蒙蔽了爱？" class="headerlink" title="是什么蒙蔽了爱？"></a>是什么蒙蔽了爱？</h2><ul><li>“是什么使我们难以体会到心中的爱？在思考这个问题时，我发现某些语言和表达方式的负面影响。它们虽然致力于满足某种愿望，却倾向于忽视人的感受和需要，以致彼此的疏远和伤害。这些语言和表达方式，我称为“异化的沟通方式”。”</li><li>“是什么使我们难以体会到心中的爱？在思考这个问题时，我发现某些语言和表达方式的负面影响。它们虽然致力于满足某种愿望，却倾向于忽视人的感受和需要，以致彼此的疏远和伤害。这些语言和表达方式，我称为“异化的沟通方式”。”</li><li>“是什么使我们难以体会到心中的爱？在思考这个问题时，我发现某些语言和表达方式的负面影响。它们虽然致力于满足某种愿望，却倾向于忽视人的感受和需要，以致彼此的疏远和伤害。这些语言和表达方式，我称为“异化的沟通方式”。”</li><li>“在一些社会中，人们习惯于将人分为好人和坏人，并认为坏人应该受到惩罚。在另一些社会中，人们倾向于围绕人的需要来考虑问题。得知后一种社会的暴力现象远少于前一种社会，我一点都不吃惊。在美国，在孩子们最可能看电视的时间段，有75%的电视节目在播放主人公杀人或暴打对方。将暴力作为节目的“高潮”是很典型的现象。看电视的人看得津津有味，是因为这个社会告诉他们，坏人应该被惩罚。”</li><li>“暴力的根源在于人们忽视彼此的感受与需要，而将冲突归咎于对方——至少大部分暴力的根源都是如此，不论是语言、精神或身体的暴力，还是家庭、部落以及国家的暴力。冷战期间，我们看到了这种思维的危险性。”</li><li>“我们对自己的思想、情感和行动负有责任。可是，人们广泛使用“不得不”这一短语。例如：“不管你是否喜欢，有些事你不得不做。”显然，这种表达方式淡化了个人责任。”</li><li>“我常常想，如果有一天，技术的进步最终被用来摧毁人类，那么，并非是暴行导致人类的灭亡，当然，更不能说是复仇行为使人类灭亡……人类的灭亡，却是因为现代人唯唯诺诺、缺乏责任感，毕恭毕敬地服从各种命令。我们所看到的悲剧和马上就要看到的更大悲剧，并非是世界上反抗的人、不服从的人增多了，而是唯命是从的人、听话的人越来越多。</li><li>”一旦意识不到我们是自己的主人，我们就成了危险人物。”<a id="more"></a><h2 id="区分观察和评论"><a href="#区分观察和评论" class="headerlink" title="区分观察和评论"></a>区分观察和评论</h2></li><li>“非暴力沟通的第一个要素是观察。我们仔细观察正在发生的事情，并清楚地说出观察结果。非暴力沟通并不要求我们保持完全的客观而不作任何评论。”</li><li>“同时，非暴力沟通不鼓励绝对化的评论，而主张评论要基于特定时间和环境中的观察。”</li><li>“我们的语言年代久远，但先天不足，是一种有缺陷的工具。它反映了万物有灵论的思想，让我们谈论稳定性和持久性，谈论相似之处、常态和种类，谈论神奇的转变、迅速的痊愈、简单的问题以及终极的解决办法。然而，我们的世界包含着无穷无尽的过程、变化、差别、层面、功能、关系、问题以及复杂性。静态的语言与动态的世界并不匹配，这是我们面临的挑战之一。” 笔记 ：– 语言的误解，也许源自于能力，但也可能是源于语言这种东西的落后。</li><li>“不带评论的观察是人类智力的最高形式”</li></ul><h2 id="体会和表达的感受"><a href="#体会和表达的感受" class="headerlink" title="体会和表达的感受"></a>体会和表达的感受</h2><ul><li>“非暴力沟通的第二个要素是感受。心理学家罗洛·梅（Rollo May）认为：“成熟的人十分敏锐，就像听交响乐的不同乐章，不论是热情奔放，还是柔和舒缓，他都能体察到细微的起伏。”然而，根据罗洛·梅的叙述，大多数人的感受“像军号声那样单调”。”</li><li>“这个戏剧性的转变提醒管理层，工作中示弱也有助于解决问题。”</li><li>“当我们说“我觉得”，我们常常并不是在表达感受，而是在表达想法。例如，有时我们会说：“我觉得这不公平。”在这句话中，“我觉得”换成“我认为”也许更恰当。”</li><li>“有些词表达的是想法，而非感受。例如：被抛弃、被羞辱、被虐待、被打扰、被拒绝、不受重视、被束缚、被欺负、无人理睬、得不到支持、无人赏识、被利用、被贬低。”</li></ul><h2 id="感受的根源"><a href="#感受的根源" class="headerlink" title="感受的根源"></a>感受的根源</h2><p>2020年2月9日 </p><ul><li><p>“听到不中听的话时，我们有四种选择。第一种是认为自己犯了错。例如，有人气愤地说：“我从没见过像你这么自私的人！”这时，我们可能会自责：“哦，我没有考虑别人的感受，真是太自私了！”这会导致我们内疚、惭愧，甚至厌恶自己。”</p></li><li><p>第二种是指责对方。这时，我们也许会驳斥对方：“你没有权利这么说！我一直都很在乎你的感受。你才自私！”在争吵时，我们一般会感到恼怒。</p></li><li><p>第三种是了解我们的感受和需要。这时，我们可能会发现我们有些伤心，因为我们看重信任和接纳。</p></li><li><p>第四种是用心体会他人的感受和需要。这时，我们也许就会想“他伤心可能是因为他需要体贴和支持”。”</p></li><li><p>“批评往往暗含着期待。对他人的批评实际上间接表达了我们尚未满足的需要。如果一个人说“你从不理解我”，他实际上是渴望得到理解。如果太太说“这个星期你每天都工作到很晚，你喜欢工作，不喜欢我”，那反映了她看重亲密关系。”</p></li><li><p>“他人的言行也许和我们的感受有关，但并不是我们感受的起因。感受根源于我们自身的需要——非暴力沟通的第三个要素。听到不中听的话时，我们可以有四种选择：1）责备自己；2）指责他人；3）体会自己的感受和需要；4）体会他人的感受和需要。”</p></li><li><p>“个人成长一般会经历三个阶段：（1）“情感的奴隶”——我们认为自己有义务使他人快乐；（2）“面目可憎”时期——此时，我们拒绝考虑他人的感受和需要；（3）“生活的主人”——我们意识到，虽然我们对自己的意愿、感受和行动负有完全的责任，但无法为他人负责。与此同时，我们还认识到，我们无法牺牲他人来满足自己的需要。”</p></li></ul><h2 id="请求帮助"><a href="#请求帮助" class="headerlink" title="请求帮助"></a>请求帮助</h2><ul><li>“抽象的语言无助于深化自我认识。”</li><li>“许多来向我求助的人后来发现，他们感到沮丧或灰心，很大程度上是因为他们不清楚自己对他人究竟有什么样的期待。”</li><li>“如果我们只是想改变别人，以使他们的行动符合我们的利益，那么非暴力沟通并不是适当的工具。”</li><li>“我注意到这位女士把请求和命令混为一谈。在她看来，非暴力沟通是否有用取决于她的“请求”是否能得到满足。”</li><li>“非暴力沟通的第四个要素是请求。我们告诉人们，为了改善生活，我们希望他们做什么。我们避免使用抽象的语言，而借助具体的描述，来提出请求。”</li></ul><h2 id="用全身心倾听"><a href="#用全身心倾听" class="headerlink" title="用全身心倾听"></a>用全身心倾听</h2><ul><li>“给他人反馈时，我们的语气十分重要。一个人在听别人谈自己的感受和需要时，将会留意其中是否暗含着批评或嘲讽。”</li><li>“如果人们常常怀疑我们的诚意，那么，我们就需要好好审视自己的动机。也许，我们只是在机械地运用非暴力沟通，而忘记其目的。”</li><li>“在解决问题或询问他人的请求前，为他人的充分表达创造条件。如果过早地提及他人的请求，我们也许就无法传达我们的关心；甚至还会被看作是应付。”</li><li>“当我们痛苦得无法倾听他人时，我们需要（1）体会自己的感受和需要；（2）大声地提出请求；（3）换一个环境。”</li></ul><h2 id="倾听的力量"><a href="#倾听的力量" class="headerlink" title="倾听的力量"></a>倾听的力量</h2><ul><li>“倾听使我们勇于面对自己的弱点。它还可以帮助我们预防潜在的暴力，使谈话生动有趣，并了解“不！”和沉默所反映的感受和需要。一次又一次，我见证了，倾听帮助人们治愈心灵的创伤。”</li></ul><h2 id="爱自己"><a href="#爱自己" class="headerlink" title="爱自己"></a>爱自己</h2><ul><li>“了解如何使用非暴力沟通来发展友谊，促进家庭和睦，改善工作交流以及推动政治和解。然而，非暴力沟通最重要的应用也许在于——爱护自己。”</li><li>“经常责备自己、强迫自己将使我们“更像椅子而不像人”。”</li><li>“思考“我选择做<strong><strong>是因为我想</strong></strong>”这个问题时，也许会像我考虑开车送小孩上学时那样，发现自己行为背后的价值取向——你在生活中看重什么。我确信，一旦意识到我们的行为所服务的需要，即使工作很艰苦、富有挑战性乃至举步维艰，我们也会从中得到乐趣。”</li><li>“当我们的表现不完美时，我们可以通过体会忧伤和自我宽恕，来看清个人成长的方向，以及避免自我惩罚”</li></ul><h2 id="充分表达愤怒"><a href="#充分表达愤怒" class="headerlink" title="充分表达愤怒"></a>充分表达愤怒</h2><ul><li>“愤怒是我们的思维方式造成的。它的核心是尚未满足的需要。如果我们能够借助它来提醒自己——我们有需要没有得到满足，而我们的思维方式正使它难以得到满足，那愤怒就是有价值的。为了充分表达愤怒，我们有必要明了自己的需要并采取行动。然而，做到这一点并不容易。因为愤怒驱使我们去惩罚他人，而不是去满足需要。”</li><li>“非暴力沟通表达愤怒的具体步骤。首先，停下来，除了呼吸，什么都别做。我们避免采取行动去指责或惩罚对方。我们只是静静地体会自己。接着，想一想是什么想法使我们生气了。例如，无意中听到某个人的谈话后，我们认为由于种族的原因自己遭到了排斥。这时，我们体会着愤怒，并留意脑海中盘旋的想法：“这太不公平了！她这是种族歧视！”我们知道，像这样的想法是尚未满足的需要的可悲表达。于是，接下来，就去了解自己想要满足的需要。如果我把某个人当作种族主义者，我的需要也许是接纳、平等、尊重或联系。”</li><li>“为了充分表达自己，我们现在需要张开嘴，说出我们的愤怒——怒火此时已被转化为需要以及与需要相联系的情感。”</li><li>“我们需要有足够的耐心来学习和运用非暴力沟通。在与人交往的过程中，我们的第一反应常常是习惯性的反应，因此，运用非暴力沟通有时是很别扭的事。然而，如果我们想要实现自己的人生选择，我们就要给自己充分的时间。”</li><li>“表达愤怒的四个步骤是：（1）停下来，除了呼吸，什么都别做；（2）想一想是什么想法使我们生气了；（3）体会自己的需要；（4）表达感受和尚未满足的需要。有时，在第3步和第4步之间，我们需要先倾听他人。在得到倾听和理解之后，他们也就可以静下心来体会我们的感受和需要。”</li></ul><h2 id="运用强制力避免伤害"><a href="#运用强制力避免伤害" class="headerlink" title="运用强制力避免伤害"></a>运用强制力避免伤害</h2><ul><li>“在非暴力沟通中，我们运用强制力是出于防卫的目的而不是为了惩罚对方。”</li><li>“孩子拒绝做一件对他们有益的事情，只是因为他们不想在父母的压力面前屈服。其次，即使体罚能带来立竿见影的效果，这也并不意味着，其他方法无法达到同样的效果。最后，我还担心，体罚孩子会造成不良的社会影响。如果我们把暴力作为解决问题的办法，虽然孩子可能会去做我们要求的事，但这样做难道不是在鼓励孩子用暴力来解决冲突吗？”</li><li>“两个问题可以帮助我们认识惩罚的局限性。第一个问题是，如果我不喜欢他现在的行为，那我希望他怎么做？如果我们只问这个问题，惩罚可能是有效果的，因为威胁或惩罚可以对他人的行为产生影响。然而，通过第二个问题，我们就可以清楚地看到惩罚的局限性：我希望他基于怎样的原因去做我想要他做的事情？”</li></ul><h2 id="重获生活的热情"><a href="#重获生活的热情" class="headerlink" title="重获生活的热情"></a>重获生活的热情</h2><ul><li>“在生活中，有时我们会感到沮丧，觉得前途一片黑暗。欧内斯特·贝克（Ernest Becker）在他的《精神病学的革命》一书中提出，沮丧是因为一个人处于激烈的内心冲突之中，无所适从。”</li><li>“如果以苛刻的态度对人对己，我们的心情也好不到哪里去。通过运用非暴力沟通，我们不再试图分析自己或他人有什么毛病，而是用心去了解我们的需要，这样，我们的内心就会逐渐变得平和。”</li></ul><h2 id="表达感激"><a href="#表达感激" class="headerlink" title="表达感激"></a>表达感激</h2><ul><li>“赞扬也可能造成人与人之间的隔阂。这听起来似乎很奇怪。不过，请注意：在赞扬他人时，我们很少揭示内心活动，而把自己放在了裁判的位置。所以，我认为，赞扬并不总是有助于深化彼此的联系。</li><li>“在别人表达感激时，人们通常有两种截然不同的反应。一种是自我膨胀，相信我们比别人优越；另一种是假谦虚，否定别人的欣赏，耸耸肩说：“哦，这没什么。”</li><li>“不要那么谦虚，因为你没有那么伟大。”</li><li>“在赞扬他人时，我们很少揭示内心活动，而把自己放在了裁判的位置。赞扬也常常被人用来实现个人目的。非暴力沟通鼓励我们充分表达感激。在表达感激时，我们说出：（1）对我们有益的行为；（2）我们的哪些需要得到了满足；（3）我们的需要得到满足后，我们是什么样的心情。”</li></ul>]]></content>
      
      
      <categories>
          
          <category> books </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading notes </tag>
            
            <tag> psychics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala实用指南读书笔记（三）</title>
      <link href="/2020/01/14/----84/"/>
      <url>/2020/01/14/----84/</url>
      
        <content type="html"><![CDATA[<p>第三部分 Scala 中的并发编程</p><p>并发编程是意外的复杂性之一。 Scala提供了一些优雅的解决方案。读者将了解:</p><ul><li>惰性求值有哪些优势</li><li>严格集合和惰性集合之间有哪些差异</li><li>如何使用并行集合</li><li>如何避免共享的可变性</li><li>如何使用 Actor 进行并发编程</li></ul><h1 id="惰性求值和并行集合"><a href="#惰性求值和并行集合" class="headerlink" title="惰性求值和并行集合"></a>惰性求值和并行集合</h1><p>人类大约需要 250 ms 来感知任何的移动，超过 5 s 的延迟就变得不可接受了。</p><h2 id="释放惰性"><a href="#释放惰性" class="headerlink" title="释放惰性"></a>释放惰性</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> perform = expensiveComputation() </span><br><span class="line"><span class="keyword">if</span> (input &gt;= <span class="number">10</span> &amp;&amp; perform)</span><br></pre></td></tr></table></figure><p>我们先调用了 expensiveComputation()方法，并将其结果存储在一个名为perform 的不可变变量中，然后在条件表达式中使用了该值。当我们运行这个修改后的版本时，不管 是否需要或者用到 perform 变量的值，该程序都会积极地对该方法进行求值，正如我们从 输出结果所看到的— 这太糟糕了。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> perform = expensiveComputation() </span><br><span class="line"><span class="keyword">if</span> (input &gt;= <span class="number">10</span> &amp;&amp; perform)</span><br><span class="line">    println(<span class="string">"doing work..."</span>)</span><br></pre></td></tr></table></figure><p>可以将任何变量标记为 lazy2，这样对该变量值的绑定将会被推迟到它首次被使用时。</p><h2 id="释放严格集合的惰性"><a href="#释放严格集合的惰性" class="headerlink" title="释放严格集合的惰性"></a>释放严格集合的惰性</h2><p>你可以使用(严格集合上的)view()方法来获取一个严格集合的惰性视图。严格集合 在操作被调用时将会立即求值，而惰性集合则会推迟相应的操作。当且仅当请求了非惰性或者非视图的结果时，操作才会被执行。换句话说，在请求严格的或者非惰性的结果之前，它 将保持惰性，并且避免(进行实际的)计算。在前一个例子中的严格集合上调用第一个 filter()操作之前，让我们先将它转换为惰性集合。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> people = <span class="type">List</span>((<span class="string">"Mark"</span>, <span class="number">32</span>), (<span class="string">"Bob"</span>, <span class="number">22</span>), (<span class="string">"Jane"</span>, <span class="number">8</span>), (<span class="string">"Jill"</span>, <span class="number">21</span>),</span><br><span class="line">  (<span class="string">"Nick"</span>, <span class="number">50</span>), (<span class="string">"Nancy"</span>, <span class="number">42</span>), (<span class="string">"Mike"</span>, <span class="number">19</span>), (<span class="string">"Sara"</span>, <span class="number">12</span>), (<span class="string">"Paula"</span>, <span class="number">42</span>), (<span class="string">"John"</span>, <span class="number">21</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isOlderThan17</span></span>(person: (<span class="type">String</span>, <span class="type">Int</span>)) = &#123;</span><br><span class="line">  println(<span class="string">s"isOlderThan17 called for <span class="subst">$person</span>"</span>)</span><br><span class="line">  <span class="keyword">val</span> (_, age) = person</span><br><span class="line">  age &gt; <span class="number">17</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isNameStartsWithJ</span></span>(person: (<span class="type">String</span>, <span class="type">Int</span>)) = &#123;</span><br><span class="line">  println(<span class="string">s"isNameStartsWithJ called for <span class="subst">$person</span>"</span>)</span><br><span class="line">  <span class="keyword">val</span> (name, _) = person</span><br><span class="line">  name.startsWith(<span class="string">"J"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(people.view.filter &#123;</span><br><span class="line">    isOlderThan17</span><br><span class="line">  &#125;.filter &#123;</span><br><span class="line">    isNameStartsWithJ</span><br><span class="line">  &#125;.head)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="终极惰性流"><a href="#终极惰性流" class="headerlink" title="终极惰性流"></a>终极惰性流</h2><p>通过调用严格集合上的 view()方法，派生其惰性视图并不会改变该集合;但是它有助于 将执行操作推迟到最后的可能时刻。也就是说，使用惰性视图，其对应的值可能都已经全部存 在了1，你只是不迫切或者不急切想处理它们。Stream 具有天然的惰性— 仅按需产生值。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span></span>(starting: <span class="type">Int</span>): <span class="type">Stream</span>[<span class="type">Int</span>] = &#123; </span><br><span class="line">    starting #:: generate(starting + <span class="number">1</span>)</span><br><span class="line">&#125; </span><br><span class="line">println(generate(<span class="number">25</span>))</span><br></pre></td></tr></table></figure><p>generate()函数接受一个整数 starting 作为它的参数，并返回一个 Stream[Int]。 它的实现使用了一个特殊的函数#::来将 starting 变量的值和递归调用 generate()函数 的值连接起来。在概念上，Stream 的#::函数很像 List 的::函数;它们都将连接或者将一个值前拼接到各自对应的集合或者流上。然而，Stream 上的#::函数是惰性的，它只会<br>在需要的时候进行连接，并在最终结果被请求之前推迟执行。</p><p>调用的结果：<code>Stream(25, ?)</code><br>我们有一个初始值为 25 的流，后面跟着一个尚未计算的值。这看起来像是该流提出了一项挑战:“如果你想要知道下一个值，来，主动获取它。”如果你不在该流上进行任何的调用，那么它将不会进行任何实际的工作，也不会为元素占用任何的空间。</p><h3 id="将无限流转换为有限流"><a href="#将无限流转换为有限流" class="headerlink" title="将无限流转换为有限流"></a>将无限流转换为有限流</h3><p>force()方法和 toList()方法的用例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println(generate(<span class="number">25</span>).take(<span class="number">10</span>).force) </span><br><span class="line">println(generate(<span class="number">25</span>).take(<span class="number">10</span>).toList)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Stream</span>(<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>)</span><br><span class="line"><span class="type">List</span>(<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>)</span><br></pre></td></tr></table></figure><p>takeWhile()代替了 take()方法，其接受一个函数值作为参数。只要该函 数值中的表达式一直返回 true：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(generate(<span class="number">25</span>).takeWhile &#123; _ &lt; <span class="number">40</span> &#125;.force)</span><br></pre></td></tr></table></figure><h2 id="并行集合"><a href="#并行集合" class="headerlink" title="并行集合"></a>并行集合</h2><p>对象或者元素的数量很大，并且/或者处理它们的时间很长，那么产生结果的总体响 应时间可能会非常长。并行地在多个线程上运行这些任务，并利用多核 CPU，则可以极大地提高速度。 但是，使用低级别的线程构造和锁将导致额外的复杂性，并导致并发相关的错误，让程序员的生活一团糟。幸运的是，在 Scala 中你不必受这个罪，因为在数据的集合上 进行并行操作非常简单。</p><h3 id="从顺序集合入手"><a href="#从顺序集合入手" class="headerlink" title="从顺序集合入手"></a>从顺序集合入手</h3><p>城市按照城市名的顺序列出，与其一起列出的还有温度信息以及请求时的天气状况。代 码运行了大约 2 s，你观察到的执行时间将取决于你的网络速度以及拥塞情况。接下来，我们 将看到如何通过最小的改变从而更快地获取到结果。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pro.simba.service.<span class="type">Weather</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></span><br><span class="line"><span class="keyword">import</span> scala.xml.<span class="type">XML</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getWeatherData</span></span>(city: <span class="type">String</span>) = &#123;</span><br><span class="line">    <span class="keyword">val</span> response = <span class="type">Source</span>.fromURL(</span><br><span class="line">      <span class="string">s"https://raw.githubusercontent.com/ReactivePlatform/"</span> +</span><br><span class="line">        <span class="string">s"Pragmatic-Scala-StaticResources/master/src/main/resources/"</span> +</span><br><span class="line">        <span class="string">s"weathers/<span class="subst">$city</span>.xml"</span>)</span><br><span class="line">    <span class="keyword">val</span> xmlResponse = <span class="type">XML</span>.loadString(response.mkString)</span><br><span class="line">    <span class="keyword">val</span> cityName = (xmlResponse \\ <span class="string">"city"</span> \ <span class="string">"@name"</span>).text</span><br><span class="line">    <span class="keyword">val</span> temperature = (xmlResponse \\ <span class="string">"temperature"</span> \ <span class="string">"@value"</span>).text</span><br><span class="line">    <span class="keyword">val</span> condition = (xmlResponse \\ <span class="string">"weather"</span> \ <span class="string">"@value"</span>).text</span><br><span class="line">    (cityName, temperature, condition)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printWeatherData</span></span>(weatherData: (<span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>)): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> (cityName, temperature, condition) = weatherData</span><br><span class="line">    println(<span class="string">f"<span class="subst">$cityName</span>%-15s <span class="subst">$temperature</span>%-6s <span class="subst">$condition</span>"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">timeSample</span></span>(getData: <span class="type">List</span>[<span class="type">String</span>] =&gt; <span class="type">List</span>[(<span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>)]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> cities = <span class="type">List</span>(<span class="string">"Houston,us"</span>, <span class="string">"Chicago,us"</span>, <span class="string">"Boston,us"</span>, <span class="string">"Minneapolis,us"</span>,</span><br><span class="line">      <span class="string">"Oslo,norway"</span>, <span class="string">"Tromso,norway"</span>, <span class="string">"Sydney,australia"</span>, <span class="string">"Berlin,germany"</span>,</span><br><span class="line">      <span class="string">"London,uk"</span>, <span class="string">"Krakow,poland"</span>, <span class="string">"Rome,italy"</span>, <span class="string">"Stockholm,sweden"</span>, <span class="string">"Bangalore,india"</span>,</span><br><span class="line">      <span class="string">"Brussels,belgium"</span>, <span class="string">"Reykjavik,iceland"</span>)</span><br><span class="line">    <span class="keyword">val</span> start = <span class="type">System</span>.nanoTime</span><br><span class="line">    getData(cities) sortBy &#123;</span><br><span class="line">      _._1</span><br><span class="line">    &#125; foreach printWeatherData</span><br><span class="line">    <span class="keyword">val</span> end = <span class="type">System</span>.nanoTime</span><br><span class="line">    println(<span class="string">s"Time taken: <span class="subst">$&#123;(end - start) / 1.0e9&#125;</span> sec"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> weather = <span class="keyword">new</span> <span class="type">Weather</span></span><br><span class="line">    weather.timeSample &#123; cities =&gt; cities map weather.getWeatherData &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用并行集合加速"><a href="#使用并行集合加速" class="headerlink" title="使用并行集合加速"></a>使用并行集合加速</h3><p>前面的例子有两个部分:慢的部分— 对于每个城市，我们都通过网络获取并收集天气 信息，快的部分— 我们对数据进行排序，并显示它们。非常简单，因为慢的部分被封装到 了作为参数传递给 timeSample()函数的函数值中。因此，我们只需要更换那部分代码来提 高速度即可，而其余的部分则可以保持不变。</p><p>我们传递给 map()函数的操作可以并行地执行， 因为获取一个城市的数据与获取另外一个城市的数据相互独立。值得庆幸的是，让 map() 方法为每个城市并行地执行操作并不需要太多工作。我们只需要将该集合转换为并行版本 就可以了。</p><p>对于许多顺序集合，Scala 都拥有其并行版本。1例如，ParArray 是 Array 对应的并 行版本，同样的，ParHashMap、ParHashSet 和 ParVector 分别对应于 HashMap、 HashSet 和 Vector。我们可以使用 par()和 seq()方法来在顺序集合及其并行版本之间 进行相互转换。</p><p>让我们使用 par()方法将城市列表转换为其并行版本。现在，map()方法将并行地执行 它的操作。在完成之后，我们将使用 toList()方法来将所生成的并行集合转换为顺序集合， 即(作为参数传入的)函数值的结果类型。下面我们使用并行集合而不是顺序集合，来重写 对 timeSample()方法的调用。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeSample &#123; cities =&gt; (cities.par map getWeatherData).toList &#125;</span><br></pre></td></tr></table></figure><h1 id="使用-Actor-编程"><a href="#使用-Actor-编程" class="headerlink" title="使用 Actor 编程"></a>使用 Actor 编程</h1><p>在编写复杂、耗时的应用程序时，我们经常会使用多线程以及并发来降低响应时间或者 提高性能。可惜，传统的并发解决方案导致了一些问题，如线程安全、竞态条件、死锁、活 锁以及不容易理解的、容易出错的代码。<strong>共享的可变性是罪魁祸首</strong>。</p><h2 id="一个顺序耗时问题"><a href="#一个顺序耗时问题" class="headerlink" title="一个顺序耗时问题"></a>一个顺序耗时问题</h2><p>顺序调用下，查询目录以及目录下面所有的文件：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pro.simba.service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">File</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CountFilesSequential</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getChildren</span></span>(file: <span class="type">File</span>) = &#123;</span><br><span class="line">      <span class="keyword">val</span> children = file.listFiles()</span><br><span class="line">      <span class="keyword">if</span> (children != <span class="literal">null</span>) children.toList <span class="keyword">else</span> <span class="type">List</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> start = <span class="type">System</span>.nanoTime</span><br><span class="line">    <span class="keyword">val</span> exploreFrom = <span class="keyword">new</span> <span class="type">File</span>(<span class="string">"/Users/songchen"</span>)</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>L</span><br><span class="line">    <span class="keyword">var</span> filesToVisit = <span class="type">List</span>(exploreFrom)</span><br><span class="line">    <span class="keyword">while</span> (filesToVisit.nonEmpty) &#123;</span><br><span class="line">      <span class="keyword">val</span> head = filesToVisit.head</span><br><span class="line">      filesToVisit = filesToVisit.tail</span><br><span class="line">      <span class="keyword">val</span> children = getChildren(head)</span><br><span class="line">      count = count + children.count &#123;</span><br><span class="line">        !_.isDirectory</span><br><span class="line">      &#125;</span><br><span class="line">      filesToVisit = filesToVisit ::: children.filter &#123;</span><br><span class="line">        _.isDirectory</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> end = <span class="type">System</span>.nanoTime</span><br><span class="line">    println(<span class="string">s"Number of files found: <span class="subst">$count</span>"</span>)</span><br><span class="line">    println(<span class="string">s"Time taken: <span class="subst">$&#123;(end - start) / 1.0e9&#125;</span> seconds"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="曲折的并发之路"><a href="#曲折的并发之路" class="headerlink" title="曲折的并发之路"></a>曲折的并发之路</h2><p>启动多个线程并不是真正的困难之处，只是比较笨拙而已— 你 将会使用 Executors 来创建一个线程池。你可以将探索不同子文件夹的任务调度给线程池 中的不同线程。但是，问题的根源在于那两个变量— 共享的可变变量。当多个线程访问各 个子目录时，我们不得不更新 count 和 filesToVisit 这两个变量。让我们看一下这为何 会是一个问题。</p><ul><li>为了保护 count 变量不受并发更改的影响，我们可能使用 AtomicLong。这是有问 题的，因为我们必须要保证对该变量的所有更改发生在该程序看到没有更多的文件需 要访问并报告文件总数之前。换句话说，虽然原子性保证了单个值的线程安全性，但 是其并不能保证跨多个值的原子性，因为这些值可能会同时发生变化。</li><li>我们可能不得不使用一个线程安全的集合— 同步列表或者并发列表，用来实现 filesToVisit 列表。这也只能保护一个变量的原子性，但是并不能解决跨两个变 量的原子性问题。</li><li>我们可以将这两个变量封装到同一个类中，并提供 synchronized 方法来一次性 地更新这两个值。这将确保对这两个变量的更改是原子的。然而，现在我们不得 不确保这个同步操作实际发生在正确的位置、正确的时间上。如果我们忘记了同 步，或者在错误的位置上进行了同步，那么 Java 编译器和运行时都不会给我们任 何的警告。</li></ul><h2 id="创建-Actor"><a href="#创建-Actor" class="headerlink" title="创建 Actor"></a>创建 Actor</h2><p>Actor 也是一个对象，但是你从来都不 会直接调用它的方法，而是通过发送消息，并且每个 Actor 都由一个消息队列支撑。如果一 个 Actor 正忙于处理消息，那么到达的消息将会被插入消息队列中，而不会阻塞消息的发送 者;它们发送并忘记(fire-and-forget)。在任意给定的时间，一个 Actor 将只会处理一条消息。 Actor 模型具有与生俱来的线程安全性。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HollywoodActor</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">AbstractActor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> message =&gt; println(<span class="string">s"playing the role of <span class="subst">$message</span>"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CreateActors</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> system = <span class="type">ActorSystem</span>(<span class="string">"sample"</span>)</span><br><span class="line">  <span class="keyword">val</span> depp = system.actorOf(<span class="type">Props</span>[<span class="type">HollywoodActor</span>])</span><br><span class="line">  depp !<span class="string">"Wonka"</span></span><br><span class="line">  <span class="keyword">val</span> terminateFuture = system.terminate()</span><br><span class="line">  <span class="type">Await</span>.ready(terminateFuture, <span class="type">Duration</span>.<span class="type">Inf</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Akka 的 Actor 托管在一个 ActorSystem 中，它管理了线程、消息队列以及 Actor 的生命 周期。相对于使用传统的 new 关键字来创建实例，我们使用了一种特殊的 actorOf 工厂方法 来创建 Actor，并将其对应的 ActorRef 赋值给了名为 depp 的引用。此外，我们也没有使用 传统的方法调用语法，而是发送了一个“Wonka”消息给 Actor— 在这个例子中只传递了一 个字符串— 我们使用了名为!的方法，你可以使用一个名为tell()的方法1，而不是使用!() 方法，但是那样就需要传递一个额外的 sender 参数。同时，如果你使用的方法名对阅读者来 说是直观的，那么你的代码也就太简单了。说到直觉，它们真应该被称为 action()。</p><p>我们给每个Actor都发送了两条消息:给Actor depp发送了“Wanka”和“Sparrow”， 给Actor hanks发送了“Gump”和“Phillips”。这个输出结果展示了许多有趣的细节。<br>Wonka - Thread[sample-akka.actor.default-dispatcher-2,5,main]<br>Gump - Thread[sample-akka.actor.default-dispatcher-3,5,main]<br>Calling from Thread[main,5,main]<br>Phillips - Thread[sample-akka.actor.default-dispatcher-3,5,main]<br>Sparrow - Thread[sample-akka.actor.default-dispatcher-2,5,main]</p><p>可以发现以下事实：</p><ul><li>一个可用的线程池，不必大惊小怪。</li><li>Actor 在不同的线程中运行，而不是调用代码的主线程。</li><li>每个 Actor 一次只处理一条消息。</li><li>多个 Actor 并发地运行，同时处理多条消息。</li><li>Actor 是异步的。</li><li>不会阻塞调用者— main 方法(直接)运行了 println()方法，根本不会等待这些 Actor 的回复。</li></ul><h2 id="Actor-和线程"><a href="#Actor-和线程" class="headerlink" title="Actor 和线程"></a>Actor 和线程</h2><p>在前面的 输出结果中我们看到，发送给 depp 的两条消息都是由同一个线程处理的，而发送给 hanks的两条消息则都是由另一个线程处理的。这可能会给人们留下一个印象:Actor 将会持有它 们自己的线程，但是这不是真的— 事实上，在你的计算机上，你甚至可能会观察到 Actor 切换线程的情况。</p><p>线程之于 Actor 类似于客服经理之于消费者。当你拨打客户服务热线时，任何有空的客 服经理都会接听你的热线。如果你挂掉之前的电话并重新拨通热线，此时上一位客服经理已 经在处理别的客服电话了，那么另一位完全随机的客服经理现在将会回答你的疑问。只有在 极端巧合下(在这两次热线电话的过程中)，你才可能和同一位客户经理谈话。</p><h2 id="使用-Actor-模型进行并发"><a href="#使用-Actor-模型进行并发" class="headerlink" title="使用 Actor 模型进行并发"></a>使用 Actor 模型进行并发</h2><p><img src="/2020/01/14/----84/15789868324156.jpg" alt="-w389"><br>对于一个给定目录下的多个子目录，查找子目录可以并发进行。因为在任何给定时刻， 对于一个 Actor，我们只能得到一个计算单元。因为我们需要同时执行并发任务，所以我们 将需要多个 Actor。在我们的设计中，FileExplorer 是一个无状态的 Actor— 我们将使用 由 Akka 提供的称为 RoundRobinPool 的路由器，它由这个类的几个实例支撑。顾名思义， 发送到这个路由器的消息将会被均匀地路由到支撑这个路由器的多个 Actor。我们还会使用 另一个 Actor，其只是一个 FilesCounter 的实例。这个 Actor 将是有状态的，这里便是被 隔离的可变状态所存在的地方，并会记录文件的个数。</p><h3 id="创建无状态的-FileExplorer-Actor"><a href="#创建无状态的-FileExplorer-Actor" class="headerlink" title="创建无状态的 FileExplorer Actor"></a>创建无状态的 FileExplorer Actor</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> akka.actor._</span><br><span class="line"><span class="keyword">import</span> java.io._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileExplorer</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> dirName: <span class="type">String</span> =&gt;</span><br><span class="line">      <span class="keyword">val</span> file = <span class="keyword">new</span> <span class="type">File</span>(dirName)</span><br><span class="line">      <span class="keyword">val</span> children = file.listFiles()</span><br><span class="line">      <span class="keyword">var</span> filesCount = <span class="number">0</span></span><br><span class="line">      <span class="keyword">if</span> (children != <span class="literal">null</span>) &#123;</span><br><span class="line">        children.filter &#123;</span><br><span class="line">          _.isDirectory</span><br><span class="line">        &#125;</span><br><span class="line">          .foreach &#123;</span><br><span class="line">            sender ! _.getAbsolutePath</span><br><span class="line">          &#125; filesCount = children.count &#123;</span><br><span class="line">          !_.isDirectory</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      sender ! filesCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 receive()方法中，我们只查找包含该目录名的字符串。当接收到消息之后，我们 将在给定的目录下查找文件和子目录。我们简单地将每个子目录发送给该消息的发送者(一 个监管 Actor)，这样它便可以让其他 FileExplorer 着手遍历该子目录。之后，我们还将 在这个目录下查找到的文件数发送给该发送者。</p><h3 id="有状态的-FilesCounter-Actor"><a href="#有状态的-FilesCounter-Actor" class="headerlink" title="有状态的 FilesCounter Actor"></a>有状态的 FilesCounter Actor</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> akka.actor._</span><br><span class="line"><span class="keyword">import</span> akka.routing._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilesCounter</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> start: <span class="type">Long</span> = <span class="type">System</span>.nanoTime</span><br><span class="line">  <span class="keyword">var</span> filesCount = <span class="number">0</span>L</span><br><span class="line">  <span class="keyword">var</span> pending = <span class="number">0</span></span><br><span class="line">  <span class="keyword">val</span> fileExplorers: <span class="type">ActorRef</span> = context.actorOf(<span class="type">RoundRobinPool</span>(<span class="number">100</span>).props(<span class="type">Props</span>[<span class="type">FileExplorer</span>]))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> dirName: <span class="type">String</span> =&gt; pending = pending + <span class="number">1</span></span><br><span class="line">      fileExplorers ! dirName</span><br><span class="line">    <span class="keyword">case</span> count: <span class="type">Int</span> =&gt;</span><br><span class="line">      filesCount = filesCount + count pending = pending - <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (pending == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> end = <span class="type">System</span>.nanoTime</span><br><span class="line">        println(<span class="string">s"Files count: <span class="subst">$filesCount</span>"</span>)</span><br><span class="line">        println(<span class="string">s"Time taken: <span class="subst">$&#123;(end - start) / 1.0e9&#125;</span> seconds"</span>)</span><br><span class="line">        context.system.terminate()</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-ActorSystem-以及一个-FilesCounter-实例"><a href="#创建-ActorSystem-以及一个-FilesCounter-实例" class="headerlink" title="创建 ActorSystem 以及一个 FilesCounter 实例"></a>创建 ActorSystem 以及一个 FilesCounter 实例</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> akka.actor._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CountFiles</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> system = <span class="type">ActorSystem</span>(<span class="string">"sample"</span>)</span><br><span class="line">  <span class="keyword">val</span> filesCounter = system.actorOf(<span class="type">Props</span>[<span class="type">FilesCounter</span>])</span><br><span class="line">  filesCounter ! args(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><p>我们学会了创建 Actor，给它们发送消息，以及如何协调多个 Actor 实例。我们使用了一 个无状态的 Actor 以及一个有状态的 Actor，并同时使用了单向通信和双向通信。这些灵活的 特性可能有点儿难以置信。让我们来探讨一些与最佳实践相关的建议。</p><ul><li>更多地依赖无状态的而不是有状态的 Actor。无状态的 Actor 没有特殊性，它们可以 提供更多的并发性，易于复制，并且很容易重启和复用。状态可能是不可避免的，但 是要尽可能少使用有状态的 Actor。</li><li>要保证 receive()方法中的处理速度非常快，尤其是接收 Actor 具有状态的时候。 改变状态的长时间运行任务将会降低并发性，要避免这样做。如果不修改状态的任务 不是非常快速也不是什么问题，因为我们可以很容易地通过复制这些 Actor 来改进并 发性，如同我们在 FileExplorer 中所做的那样。</li><li>确保在 Actor 之间传递的消息是不可变的对象。在所有的示例中，我们传递的都是 case 类的实例、String 或者 Int，所有的这些都是不可变的。传递不可变对象将保证我们不会在无意间修改共享状态，并最终导致并发问题。</li><li>尽量避免使用 ask()。双向通信通常都不是一个好主意。“发送并忘记”模型要好得多，而且也更加不容易出错。</li></ul>]]></content>
      
      
      <categories>
          
          <category> professional skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> software programming </tag>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鬼岛观测的完结</title>
      <link href="/2020/01/12/----83/"/>
      <url>/2020/01/12/----83/</url>
      
        <content type="html"><![CDATA[<p>本人通过接近半年针对鬼岛选举的观测，本想针对这件事情书写一篇比较长的观察作文，但是由于最终观测过多，导致自己在这次的选举过程里，投入了自己的情感偏好，而选举的结果又不属于自己满意的结果，所以心中很多的想法和逻辑全部被破坏。导致下笔无言，遂还是改变成一份纯粹内心的吐槽。</p><h1 id="分裂"><a href="#分裂" class="headerlink" title="分裂"></a>分裂</h1><p>长久以来，我认为中华文化的凝聚力是非常之强，我们是一个能够把56个民族融合在一起，而极大降低内部民族矛盾的国家。而这个融合的结果，我认为是我国文化的优越性导致的，我国文化有很多包容性能够让在这个国家里面即便有不同的追求，不同信仰，不同追求的人们相处在一起。而忽略了这个融合可能更多的是制度优势和政策优势又或者是汉人人口主体优势的功劳。而放眼世界，我国的文化输出地位就像别人评价我管理团队一样，内部协作很强，对外协作很差。我们的凝聚力只存在于政府辐射到的范围，而鬼岛年轻人的反应算是狠狠的甩了我一个巴掌，让我知道，民族的融合需要的是制度的优越和政策的圆融，单纯的文化输出并值得一提。</p><h1 id="媒体"><a href="#媒体" class="headerlink" title="媒体"></a>媒体</h1><p>油管针对用户偏好的推送无比的精准，针对我推送来的媒体视频都是明显符合自己内心偏好的视频。于是我在视频节目中吸收的内容和实时弹幕评论下面，都是自己同温层，甚至大多数都是大陆人民在看的节目。这样的节目给予了我对局势很严重的预判。而这种预判不但影响了我的判断，甚至影响了我的感情。在这个和我无关的选举之下，就像观看足球的人，总是会有希望一方面胜利的心情在观察这场选情的起伏。但结果也是给予了我一记重创，鬼岛的政论节目，果然只是娱乐节目，媒体人只是在选择向电视里述说着你们爱听的话语，而真实的情况或者每个媒体能够影响的范围是及其微小的。或者我看到的媒体本身就是鬼岛的少数，大多数的媒体都被精准推荐给过滤掉的。或者我这个中国人的身份，早就已经被油管所识破了也未必。</p><a id="more"></a><h1 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h1><p>过去一个故事说一个国王心肠很好，他不舍得去惩罚别人，于是宰相就说那你把惩罚他人的权利给我，而你国王只需要赏赐别人让被人高兴就好了。很快的国王就被宰相就窃取了国家谋害了国王。因为这个世界人虽然喜欢收到封赏，但是更加惧怕惩罚。这个故事其实可以换一个观点,爱在怕面前根本不值一提。多数人民是没有受过基础教育的愚民，他们对自己的认知也是非常的粗浅，他们并不明白针对损失厌恶这种情绪本质是违反现代社会的规则（就算受过专业训练也很难避免这种情感）。于是蓝军的爱与包容是无法抗衡绿军的恐吓策略，这个逻辑也就是冥煮制度的死结和软肋。因为谁能抓住诸多愚民的恐惧，站在大棒的面前，它就基本上已经获得了绝大多数的支持。而要创造出这种镜像，只要树立出虚妄的对手就可以了，又或者在内部分化出一小部分人，来进行对立的情绪来凝聚这种情感。人们是很容易操纵的，在这种破败的制度下面，选票对于每个人民的价值太低，而对于政客的价值又太高。在这种不对称性下，运用何种策略去欺骗选票成为了政客的首要目的。越没有下限的政客，能够统揽的选票就会越多。</p><h1 id="崛起"><a href="#崛起" class="headerlink" title="崛起"></a>崛起</h1><p>金灿灿政委说过，在主流的大国里面，没有完成统一的，只有一个中国。曾经我看到汉武大帝里面谈的，我大汉聚集七十年之力，犹如一只展翅高飞的雄鹰扶摇直上，我都会默默的流泪。而他指的吕后对匈奴的诏书里面写的那些谄媚话大喊着：这是什么，这是耻辱，耻辱。去年到今年发生了太多的事情，我的感受也是，耻辱。什么鬼岛政治，什么自由民主，在我眼里只看到了一个不够强大的国家被外人侵略分裂，因为不够强大，台海两岸被强行阻断，因为不够强大，香港被外国势力入侵，他们还妄图分裂我们的西藏和新疆。在我过多关注外部世界的同时，还是没有认清一个事实。最重要的还是自己，自己的强大才是最主要的，而外部的机会可以去把握，但是不能有过高的期待。金灿灿政委的话，要牢记在心。我们是正在崛起，而还没有崛起。而我们崛起的标志，就是光复鬼岛的时候。王师北定中原日，家祭无忘告乃翁，我不希望这个事情发生在我的身上，我，今年34岁，我希望能够看到祖国的崛起，看到祖国的统一，看到我们洗刷这百年耻辱最后一块拼图的时候，我希望：祖国万岁。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mood </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala实用指南读书笔记（二）</title>
      <link href="/2020/01/07/----82/"/>
      <url>/2020/01/07/----82/</url>
      
        <content type="html"><![CDATA[<p>第二部分 深入 Scala</p><p>是时候深入学习 Scala 了。读者将了解:</p><ul><li>如何创建和使用函数值</li><li>如何使用特质进行编程</li><li>如何使用不同类型的集合</li><li>如何使用模式匹配的能力</li><li>如何进行尾调用优化</li></ul><h1 id="函数值和闭包"><a href="#函数值和闭包" class="headerlink" title="函数值和闭包"></a>函数值和闭包</h1><p>函数可以作为参数值传入其他函数中，函数的返回值可 以是函数，函数甚至可以嵌套函数。这些高阶函数在 Scala 中被称为函数值(function value)。闭 包(closure)是函数值的特殊形式，会捕获或者绑定到在另一个作用域或上下文中定义的变量。</p><h2 id="常规函数的局限性"><a href="#常规函数的局限性" class="headerlink" title="常规函数的局限性"></a>常规函数的局限性</h2><p>要算出从 1 到给定整数 number 区间内所有整数的总和，我们可能会编写代码如下:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(number: <span class="type">Int</span>) = &#123; </span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to number) &#123;</span><br><span class="line">    result += i </span><br><span class="line">    &#125;</span><br><span class="line">    result </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码完成了工作，但它不可扩展。现在，如果额外需要计算给定区间内偶数的个数和 奇数的个数，使用这段代码就会碰壁。</p><h2 id="可扩展性与高阶函数"><a href="#可扩展性与高阶函数" class="headerlink" title="可扩展性与高阶函数"></a>可扩展性与高阶函数</h2><p><strong>将其他函数作为参数的函数称为高阶函数</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">totalResultOverRange</span></span>(number: <span class="type">Int</span>, codeBlock: <span class="type">Int</span> =&gt; <span class="type">Int</span>) = &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to number) &#123;</span><br><span class="line">    result += codeBlock(i)</span><br><span class="line">  &#125;</span><br><span class="line">  result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将两个参数传递给该方法:第一个参数是所遍历的区间上限(11);第二个参数实际 上是一个匿名的即时函数(just-in-time function)，即一个没有名称只有参数和实现的函数。 在这个例子中，实现只是返回了给定的参数。在这个例子中，符号=&gt;的左边是参数列表，右 边是实现。Scala 能够从 totalResultOverRange()方法的参数列表中推断出参数 i 是 Int 类型的。如果参数的类型或结果类型与预期的不匹配，Scala 会给出一个错误。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(totalResultOverRange(<span class="number">11</span>, i =&gt; i))</span><br></pre></td></tr></table></figure><p>对于一个简单的数值求和过程，与调用之前写的普通函数 sum()相比，调用 total ResultOverRange()方法需要一个数和一个函数作为参数就显得太笨重了。然而，新版本 是可扩展的，我们可以用类似的方式调用它来完成其他操作。例如，如果我们想要对区间内 的偶数求和而不是求总和，就可以像下面这样调用这个函数:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(totalResultOverRange(<span class="number">11</span>, i =&gt; <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) i <span class="keyword">else</span> <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>在这个例子中，如果输入是偶数，那么作为参数传入的函数值会返回输入本身;否则返 回 0。因此，函数 totalResulOverRange()将只会对给定区间内的所有偶数求和。<br>如果我们想要对奇数求和，就可以用如下方式调用这个函数:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(totalResultOverRange(<span class="number">11</span>, i =&gt; <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) <span class="number">0</span> <span class="keyword">else</span> i))</span><br></pre></td></tr></table></figure><p>与 sum()函数不同，我们看到了如何扩展 totalResultOverRange()函数，从而在指定区间上使用不同的元素选取策略求和。</p><h2 id="具有多个参数的函数值"><a href="#具有多个参数的函数值" class="headerlink" title="具有多个参数的函数值"></a>具有多个参数的函数值</h2><p><strong>函数值其实可以接收零个或多个参数</strong><br>没有参数的函数值是怎样定义和使 用的例子:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printValue</span></span>(generator: () =&gt; <span class="type">Int</span>): <span class="type">Unit</span> = &#123; </span><br><span class="line">    println(<span class="string">s"Generated value is <span class="subst">$&#123;generator()&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line">printValue(() =&gt; <span class="number">42</span>)</span><br></pre></td></tr></table></figure><p>传递多个参数:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject</span></span>(arr: <span class="type">Array</span>[<span class="type">Int</span>], initial: <span class="type">Int</span>, operation: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>) = &#123;</span><br><span class="line">  <span class="keyword">var</span> carryOver = initial</span><br><span class="line">  arr.foreach(element =&gt; carryOver = operation(carryOver, element))</span><br><span class="line">  carryOver</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> array = <span class="type">Array</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> sum = inject(array, <span class="number">1</span>, (carry, elem) =&gt; carry * elem)</span><br><span class="line">println(<span class="string">s"Sum of elements in array is <span class="subst">$sum</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> max = inject(array, <span class="type">Integer</span>.<span class="type">MIN_VALUE</span>, (carry, elem) =&gt; <span class="type">Math</span>.max(carry, elem))</span><br><span class="line">println(<span class="string">s"Max of elements in array is <span class="subst">$max</span>"</span>)</span><br></pre></td></tr></table></figure><p>可以看到同样的一个方法，最终得出来的结论完全可以由传入的函数得出不同的结论而避免代码重复。<br>Scala 标准库已经内置了这种方法。即 foldLeft()方 法。下面是使用内置的 foldLeft()方法来获取数组中元素的总和和最大值的例子:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> array = <span class="type">Array</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> sum = array.foldLeft(<span class="number">0</span>) &#123; (sum, elem) =&gt; sum + elem &#125;</span><br><span class="line"><span class="keyword">val</span> max = array.foldLeft(<span class="type">Integer</span>.<span class="type">MIN_VALUE</span>) &#123; (large, elem) =&gt;</span><br><span class="line">  <span class="type">Math</span>.max(large, elem)</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">s"Sum of elements in array is <span class="subst">$sum</span>"</span>) </span><br><span class="line">println (<span class="string">s"Max of elements in array is <span class="subst">$max</span>"</span>)</span><br></pre></td></tr></table></figure><p>为了使代码更加简洁，Scala 选择了一些方法并为它们定义了一些简称和记号。 foldLeft()方法有一个等效的/:操作符。我们可以用 foldLeft()或等效的/:操作符执 行先前的操作。以冒号(:)结尾的方法在 Scala 中有特殊含义，8.5 节将介绍相关知识。让 我们快速浏览一下如何使用该等效操作符而不是 foldLeft():</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sum = (<span class="number">0</span> /: array) ((sum, elem) =&gt; sum + elem)</span><br><span class="line"><span class="keyword">val</span> max = (<span class="type">Integer</span>.<span class="type">MIN_VALUE</span> /: array) &#123; (large, elem) =&gt; <span class="type">Math</span>.max(large, elem) &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><p>Scala 中的柯里化(currying)会把接收多个参数的函数转化为接收多个参数列表的函数。 如果你会用同样的一组参数多次调用一个函数，你就能用柯里化去除噪声并使代码更加有趣。</p><p>改善了传递函数值的语法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject</span></span>(arr: <span class="type">Array</span>[<span class="type">Int</span>], initial: <span class="type">Int</span>)(operation: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>): <span class="type">Int</span> = &#123; </span><br><span class="line">    <span class="keyword">var</span> carryOver = initial</span><br><span class="line">    arr.foreach(element =&gt; carryOver = operation(carryOver, element))</span><br><span class="line">    carryOver</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个版本的 inject()方法的唯一区别在于参数列表变成了多个。第一个参数列表接收两个参数，第二个只接收一个函数值。现在我们就没有必要再在括号中以逗号分隔的参数传递函数值了。我们可以用更美观的 大括号来调用这个方法。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sum: <span class="type">Int</span> = inject(array, <span class="number">0</span>) &#123; (carryOver, elem) =&gt; carryOver + elem &#125;</span><br></pre></td></tr></table></figure><h2 id="参数的占位符"><a href="#参数的占位符" class="headerlink" title="参数的占位符"></a>参数的占位符</h2><p>函数中只使用一次的参数可以用_来代替</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> negativeNumberExists1 = arr.exists &#123; elem =&gt; elem &lt; <span class="number">0</span> &#125; </span><br><span class="line"><span class="keyword">val</span> negativeNumberExists2 = arr.exists &#123; _ &lt; <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="参数路由"><a href="#参数路由" class="headerlink" title="参数路由"></a>参数路由</h2><p>_不仅能表示单个参数，也能表示整个参数列表。因此我们可以将对 max()的调用改成 如下形式:<br><code>val largest = (Integer.MIN_VALUE /: arr) { Math.max _ }</code></p><p>我们甚至不需要_这种形式。我们可以进一步简 化前面的代码:<br><code>val largest = (Integer.MIN_VALUE /: arr) { Math.max }</code></p><h2 id="复用函数值"><a href="#复用函数值" class="headerlink" title="复用函数值"></a>复用函数值</h2><p>在这段代码中，我们想在两个 Equipment 实例中使用相同的计算代码。遗憾的是，这 段计算代码重复了。这段代码并不遵循 DRY 原则，如果想改变计算逻辑，我们就必须两个 一起改。如果计算逻辑只写一次，然后复用，就非常好。我们可以把这个函数值赋值给一个 val 变量，以便复用</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">EquipmentUseDry</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> calculator = &#123; input: <span class="type">Int</span> =&gt; println(<span class="string">s"calc with <span class="subst">$input</span>"</span>); input &#125;</span><br><span class="line">  <span class="keyword">val</span> equipment1 = <span class="keyword">new</span> <span class="type">Equipment</span>(calculator) </span><br><span class="line">  <span class="keyword">val</span> equipment2 = <span class="keyword">new</span> <span class="type">Equipment</span>(calculator)</span><br><span class="line">  equipment1.simulate(<span class="number">4</span>)</span><br><span class="line">  equipment2.simulate(<span class="number">6</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="部分应用函数"><a href="#部分应用函数" class="headerlink" title="部分应用函数"></a>部分应用函数</h2><p>date 和 message。我们想多次调用这个 方法，date 的值保持不变但 message 每次用不同的值。将 date 参数部分应用到 log() 方法中，就可以去除每次调用都要传递同样的 date 参数这类语法噪声。<br>在下面的代码样例中，我们首先把一个值绑定到了 date 参数上。我们使用_将第二个参 数标记为未绑定。其结果是一个部分应用函数，然后我们将它存储到 logWithDateBound 这个引用中。现在我们就可以只用未绑定的参数 message 调用这个新方法。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> date = <span class="keyword">new</span> <span class="type">Date</span>(<span class="number">1420095600000</span>L)</span><br><span class="line"><span class="keyword">val</span> logWithDateBound = log(date, _: <span class="type">String</span>) </span><br><span class="line">logWithDateBound(<span class="string">"message1"</span>) </span><br><span class="line">logWithDateBound(<span class="string">"message2"</span>) </span><br><span class="line">logWithDateBound(<span class="string">"message3"</span>)</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>在前面的例子中，在函数值或者代码块中使用的变量和值都是已经绑定的。你明确地知道它们所绑定的(实体)，即本地变量或者参数。除此之外，你还可以创建带有未绑定变量的 代码块。这样的话，你就必须在调用函数之前，为这些变量做绑定。但它们也可以绑定到或 者捕获作用域和参数列表之外的变量。这也是这样的代码块被称之为闭包(closure)的原因。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loopThrough</span></span>(number: <span class="type">Int</span>)(closure: <span class="type">Int</span> =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to number) &#123;</span><br><span class="line">    closure(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line"><span class="keyword">val</span> addIt = &#123; value: <span class="type">Int</span> =&gt; result += value &#125;</span><br><span class="line">loopThrough(<span class="number">10</span>) &#123; elem =&gt; addIt(elem) &#125;</span><br><span class="line">println(<span class="string">s"Total of values from 1 to 10 is <span class="subst">$result</span>"</span>)</span><br></pre></td></tr></table></figure><h2 id="Execute-Around-Method-模式"><a href="#Execute-Around-Method-模式" class="headerlink" title="Execute Around Method 模式"></a>Execute Around Method 模式</h2><p><del>传递函数的时候可以传递多个让我表示很惊讶，是否我有遗漏细节需要确认。这种模式可以同意的开启一个事务，到最终事务结束以后进行完成工作。可以用于流的操作或者事务的提交。</del><br>愚蠢的我，传进去的是函数，就是代码，当然愿意调用几次就调用几次的代码 </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span> <span class="title">private</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  println(<span class="string">"Starting transaction..."</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">cleanUp</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"Ending transaction..."</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">op1</span></span>(num: <span class="type">Int</span>): <span class="type">Unit</span> = println(<span class="string">s"Operation <span class="subst">$&#123;num + 1&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">op2</span></span>(num: <span class="type">Int</span>): <span class="type">Unit</span> = println(<span class="string">s"Operation <span class="subst">$&#123;num + 2&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">op3</span></span>(num: <span class="type">Int</span>): <span class="type">Unit</span> = println(<span class="string">s"Operation <span class="subst">$&#123;num + 3&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Resource</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(num: <span class="type">Int</span>)(codeBlock: (<span class="type">Int</span>, <span class="type">Resource</span>) =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> resource = <span class="keyword">new</span> <span class="type">Resource</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      codeBlock(num, resource)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> e: <span class="type">Exception</span> =&gt; println(e)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      resource.cleanUp()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TopStock</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="type">Resource</span>.use(<span class="number">10</span>) &#123; (num, resource) =&gt;</span><br><span class="line">      resource.op1(num)</span><br><span class="line">      resource.op2(num)</span><br><span class="line">      resource.op3(num)</span><br><span class="line">      resource.op1(num)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">import</span> java.io._</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeToFile</span></span>(fileName: <span class="type">String</span>)(codeBlock: <span class="type">PrintWriter</span> =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> writer = <span class="keyword">new</span> <span class="type">PrintWriter</span>(<span class="keyword">new</span> <span class="type">File</span>(fileName))</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        codeBlock(writer)</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        writer.close()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    writeToFile(<span class="string">"/Users/songchen/output.txt"</span>) &#123;</span><br><span class="line">      writer =&gt;</span><br><span class="line">        writer write <span class="string">"hello from Scala"</span></span><br><span class="line">        writer write <span class="string">"hello from Scala"</span></span><br><span class="line">        writer write <span class="string">"hello from Scala"</span></span><br><span class="line">        writer write <span class="string">"hello from Scala"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="特质"><a href="#特质" class="headerlink" title="特质"></a>特质</h1><p>Java 只允许单继承，这会强制建立一种线性的层次结构模型。但现实世界中充满了横切 关注点(crosscutting concerns)— 一种横切且影响多个抽象的概念，这些抽象并不同属于某个单一的类层次结构 。在典型的企业级应用程序中，安全、日志记录、验证、事务以及资源管理都是这些横切关注点的应用场景。但是，因为我们受限于单一的类层次结构，所以实现这些横切关注点变得相当困难，往往需要代码上的重复或者引入重量级工具 。Scala 使 用特质(trait)解决了这个问题。</p><h2 id="理解特质"><a href="#理解特质" class="headerlink" title="理解特质"></a>理解特质</h2><p>将一个 Friend 特质混入任何的类中，如 Man、Woman、Dog 等，而又不必 让所有这些类都继承同一个公共基类。<br>这段代码的一个缺点是“友好”这个特点并不凸显，而且被合并到了 Human 类中。此外， 经过几个星期的开发，我们发现我们忘记了人类最好的朋友。狗是人类的好朋友— 当我们 需要减压时，它们会安静地倾听。但是，在当前的设计中，我们很难让狗成为一个“朋友”。 因为我们不能为此让 Dog 继承 Human。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> name: <span class="type">String</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listen</span></span>(): <span class="type">Unit</span> = println(<span class="string">s"Your friend <span class="subst">$name</span> is listening"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Human 类混入了 Friend 特质。如果一个类没有扩展任何其他类，则使用 extends 关 键字来混入特质。Human 类以及它的派生类 Man 和 Woman 简单地使用了由 Friend 特质提 供的 listen()方法。你很快将会看到，我们可以按照自己意愿选择重写该方法的实现。</p><p>我们可以混入任意数量的特质。如果要混入额外的特质，要使用 with 关键字。如果一个类已 经扩展了另外一个类(如在下一个示例中的 Dog 类)，那么我们也可以使用 with 关键字来混入第一 个特质。除了混入该特质之外，我们还重写了 Dog 类中的 listen()方法(实际上继承自该特质)。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">val name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">with</span> <span class="title">Friend</span> </span>&#123; <span class="comment">// 选择性重写方法</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">listen</span></span>(): <span class="type">Unit</span> = println(<span class="string">s"<span class="subst">$name</span>'s listening quietly"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择性混入"><a href="#选择性混入" class="headerlink" title="选择性混入"></a>选择性混入</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">useFriend</span></span>(friend: <span class="type">Friend</span>): <span class="type">Unit</span> = friend.listen()</span><br><span class="line"><span class="keyword">val</span> angel = <span class="keyword">new</span> <span class="type">Cat</span>(<span class="string">"Angel"</span>) <span class="keyword">with</span> <span class="type">Friend</span> </span><br><span class="line"><span class="keyword">val</span> friend: <span class="type">Friend</span> = angel angel.listen()</span><br><span class="line">useFriend(angel)</span><br></pre></td></tr></table></figure><h2 id="使用特质实现装饰器模式"><a href="#使用特质实现装饰器模式" class="headerlink" title="使用特质实现装饰器模式"></a>使用特质实现装饰器模式</h2><p>在 Scala 中，特质是一个强大的工具，有助于混入横切关注点，而且可以使用它们来创 建轻量的具有高度扩展性的代码。我们可以精简到仅仅使用最基本的、最少的代码来实现这 种设计，而不是创建一个类和接口的层次结构。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">Check</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">Check</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">check</span></span>: <span class="type">String</span> = <span class="string">"Checked Application Details..."</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">trait</span> <span class="title">CreditCheck</span> <span class="keyword">extends</span> <span class="title">Check</span> </span>&#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">check</span></span>: <span class="type">String</span> = <span class="string">s"Checked Credit... <span class="subst">$&#123;super.check&#125;</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">trait</span> <span class="title">EmploymentCheck</span> <span class="keyword">extends</span> <span class="title">Check</span> </span>&#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">check</span></span>: <span class="type">String</span> = <span class="string">s"Checked Employment...<span class="subst">$&#123;super.check&#125;</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">trait</span> <span class="title">CriminalRecordCheck</span> <span class="keyword">extends</span> <span class="title">Check</span> </span>&#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">check</span></span>: <span class="type">String</span> = <span class="string">s"Check Criminal Records...<span class="subst">$&#123;super.check&#125;</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> apartmentApplication =</span><br><span class="line">      <span class="keyword">new</span> <span class="type">Application</span> <span class="keyword">with</span> <span class="type">CreditCheck</span> <span class="keyword">with</span> <span class="type">CriminalRecordCheck</span></span><br><span class="line">    println(apartmentApplication.check)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特质中的方法延迟绑定"><a href="#特质中的方法延迟绑定" class="headerlink" title="特质中的方法延迟绑定"></a>特质中的方法延迟绑定</h2><p>在上面的例子中，Check 类的 check()方法是具体的。我们的特质扩展自这个类，并 且重写了该方法。我们看到了在该特质中对 super.check()方法的调用是如何绑定到位于 其左侧的特质或者是混入了该特质的类的。如果在基类中方法是抽象的，那么事情就会变得 更复杂一些— 方法绑定必须要推迟到某个具体的方法已知为止。下面让我们更深入地探讨 这一点。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test12</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Writer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeMessage</span></span>(message: <span class="type">String</span>): <span class="type">Unit</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">trait</span> <span class="title">UpperCaseWriter</span> <span class="keyword">extends</span> <span class="title">Writer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">writeMessage</span></span>(message: <span class="type">String</span>): <span class="type">Unit</span> = <span class="keyword">super</span>.writeMessage(message.toUpperCase)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">trait</span> <span class="title">ProfanityFilteredWriter</span> <span class="keyword">extends</span> <span class="title">Writer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">writeMessage</span></span>(message: <span class="type">String</span>): <span class="type">Unit</span> =</span><br><span class="line">      <span class="keyword">super</span>.writeMessage(message.replace(<span class="string">"stupid"</span>, <span class="string">"s-----"</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">StringWriterDelegate</span> <span class="keyword">extends</span> <span class="title">Writer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> writer = <span class="keyword">new</span> java.io.<span class="type">StringWriter</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeMessage</span></span>(message: <span class="type">String</span>): <span class="type">Unit</span> = writer.write(message)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = writer.toString</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> myWriterProfanityFirst = <span class="keyword">new</span> <span class="type">StringWriterDelegate</span> <span class="keyword">with</span> <span class="type">UpperCaseWriter</span> <span class="keyword">with</span> <span class="type">ProfanityFilteredWriter</span></span><br><span class="line">    <span class="keyword">val</span> myWriterProfanityLast = <span class="keyword">new</span> <span class="type">StringWriterDelegate</span> <span class="keyword">with</span> <span class="type">ProfanityFilteredWriter</span> <span class="keyword">with</span> <span class="type">UpperCaseWriter</span></span><br><span class="line">    myWriterProfanityFirst writeMessage <span class="string">"There is no sin except stupidity"</span></span><br><span class="line">    myWriterProfanityLast writeMessage <span class="string">"There is no sin except stupidity"</span></span><br><span class="line">    println(myWriterProfanityFirst)</span><br><span class="line">    println(myWriterProfanityLast)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="常见的-Scala-集合"><a href="#常见的-Scala-集合" class="headerlink" title="常见的 Scala 集合"></a>常见的 Scala 集合</h2><p>Scala 有 3 种主要的集合类型:</p><ul><li>List— 有序的对象集合</li><li>Set— 无序的集合</li><li>Map— 键值对字典</li></ul><p>Scala 推崇不可变集合，尽管也可以使用可变版本。如果想要修改集合，而且集合上所有 的操作都在单线程中进行，那么就可以选择可变集合。</p><h2 id="使用-Set"><a href="#使用-Set" class="headerlink" title="使用 Set"></a>使用 Set</h2><p>如果我们只是想更新从 feeds1 中选择的 feed，如所有包含有“blog”这个词的，那么 我们可以使用 filter()方法来获取这些 feed。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> blogFeeds = feeds1 filter (_ contains <span class="string">"blog"</span>) </span><br><span class="line">println(<span class="string">s"blog feeds: <span class="subst">$&#123;blogFeeds.mkString(", ")&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>我们将会得到如下输出:<br>blog feeds: blog.toolshed.com, blog.agiledeveloper.com</p><p>如果要合并两个 Set 的 feed 来创建一个新的 Set，那么我们可以使用++()方法:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> mergedFeeds = feeds1 ++ feeds2</span><br><span class="line">println(<span class="string">s"# of merged feeds: <span class="subst">$&#123;mergedFeeds.size&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>执行求交集操作(即调用&amp;()方法):</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> commonFeeds = feeds1 &amp; feeds2</span><br><span class="line">println(<span class="string">s"common feeds: <span class="subst">$&#123;commonFeeds.mkString(", ")&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>在每个 feed 的前面加上一个“http://”字符串前缀，我们可以使用 map()方法。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> urls = feeds1 map (<span class="string">"http://"</span> + _) </span><br><span class="line">println(<span class="string">s"One url: <span class="subst">$&#123;urls.head&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h2 id="关联映射"><a href="#关联映射" class="headerlink" title="关联映射"></a>关联映射</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> feeds = <span class="type">Map</span>(</span><br><span class="line"><span class="string">"Andy Hunt"</span> -&gt; <span class="string">"blog.toolshed.com"</span>,</span><br><span class="line"><span class="string">"Dave Thomas"</span> -&gt; <span class="string">"pragdave.me"</span>,</span><br><span class="line"><span class="string">"NFJS"</span> -&gt; <span class="string">"nofluffjuststuff.com/blog"</span>)</span><br></pre></td></tr></table></figure><p><strong>过滤key值</strong>：如果想要得到一个 feed 的 Map，其中 feed 的作者名开头都为“D”，那么我们可以使用 filterKeys()方法。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> filterNameStartWithD = feeds filterKeys (_ startsWith <span class="string">"D"</span>) </span><br><span class="line">println(<span class="string">s"# of Filtered: <span class="subst">$&#123;filterNameStartWithD.size&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p><strong>过滤key和值</strong>：想要对这些值进行筛选，那么除对键进行操作之外，我们还可以使用 filter() 方法。提供给 filter()方法的函数值接收一个(键，值)元组，我们可以像下面这样使 用它:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> filterNameStartWithDAndPragprogInFeed = feeds filter &#123; element =&gt; <span class="keyword">val</span> (key, value) = element</span><br><span class="line">(key startsWith <span class="string">"D"</span>) &amp;&amp; (value contains <span class="string">"pragdave"</span>)</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"# of feeds with auth name D* and pragdave in URL: "</span>) println(filterNameStartWithDAndPragprogInFeed.size)</span><br></pre></td></tr></table></figure><p><strong>更新map</strong>：要添加 feed，请使用 updated()方法。因为我们使用的是不可变集合，所以 updated() 方法不会影响原来的 Map。如同其方法名所提示的一样，它会返回一个携带着新元素的全新 Map。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> newFeeds1 = feeds.updated(<span class="string">"Venkat Subramaniam"</span>, <span class="string">"blog.agiledeveloper.com"</span>)</span><br><span class="line">println(<span class="string">"Venkat's blog in original feeds: "</span> + feeds.get(<span class="string">"Venkat Subramaniam"</span>))</span><br><span class="line">println(<span class="string">"Venkat's blog in new feed: "</span> + newFeeds1(<span class="string">"Venkat Subramaniam"</span>))</span><br></pre></td></tr></table></figure><p>X() = b 等价于 X.updated(b)</p><h2 id="不可变列表"><a href="#不可变列表" class="headerlink" title="不可变列表"></a>不可变列表</h2><p>通过使用 head 方法，Scala 使访问一个列表的第一个元素更加简单快速。使用 tail 方 法，可以访问除第一个元素之外的所有元素。访问列表中的最后一个元素需要对列表进行遍 历，因此相比访问列表的头部和尾部1，该操作更加昂贵。所以，列表上的大多数操作都是 围绕着对头部和尾部的操作构造的。</p><p><strong>插入对象</strong>：如果我们想要前插一个元素，即将一个元素放在当前 List 的前面，我们可以使用特殊 的::()方法。a :: list读作“将a前插到list”</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> prefixedList = <span class="string">"forums.pragprog.com/forums/87"</span> :: feeds </span><br><span class="line">println(<span class="string">s"First Feed In Prefixed: <span class="subst">$&#123;prefixedList.head&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p><strong>插入列表</strong>：假设我们想要追加一个列表到另外一个列表，例如，将 listA 追加到另外一个列表list。那么我们可以使用:::()方法将 list 实际上前插到 listA。因此，代码应该是list ::: listA，并读作“将list前插到listA”。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> feedsWithForums = feeds ::: <span class="type">List</span>(<span class="string">"forums.pragprog.com/forums/87"</span>,<span class="string">"forums.pragprog.com/forums/246"</span>)</span><br><span class="line">println(<span class="string">s"First feed in feeds with forum: <span class="subst">$&#123;feedsWithForums.head&#125;</span>"</span>) </span><br><span class="line">println(<span class="string">s"Last feed in feeds with forum: <span class="subst">$&#123;feedsWithForums.last&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>满足某些条件的 feed，应该使用 filter()方法。如果我们想要检查是 否所有的 feed 都满足某个特定的条件，则可以使用 forall()方法。另外，如果我们想要知 道是否有任意 feed 满足某一条件，那么 exists()方法可以帮到我们</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">println(<span class="string">s"Feeds with blog: <span class="subst">$&#123;feeds.filter(_ contains "blog").mkString(", ")&#125;</span>"</span>) </span><br><span class="line">println(<span class="string">s"All feeds have com: <span class="subst">$&#123;feeds.forall(_ contains "com")&#125;</span>"</span>) </span><br><span class="line">println(<span class="string">s"All feeds have dave: <span class="subst">$&#123;feeds.forall(_ contains "dave")&#125;</span>"</span>) </span><br><span class="line">println(<span class="string">s"Any feed has dave: <span class="subst">$&#123;feeds.exists(_ contains "dave")&#125;</span>"</span>) </span><br><span class="line">println(<span class="string">s"Any feed has bill: <span class="subst">$&#123;feeds.exists(_ contains "bill")&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><p>Feeds with blog: blog.toolshed.com, blog.agiledeveloper.com<br>All feeds have com: false<br>All feeds have dave: false<br>Any feed has dave: true<br>Any feed has bill: false</p><p><strong>foldLeft()方法</strong>，如下所示:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> total = feeds.foldLeft(<span class="number">0</span>) &#123; (total, feed) =&gt; total + feed.length &#125; </span><br><span class="line">println(<span class="string">s"Total length of feed urls: <span class="subst">$total</span>"</span>)</span><br></pre></td></tr></table></figure><h1 id="模式匹配和正则表达式"><a href="#模式匹配和正则表达式" class="headerlink" title="模式匹配和正则表达式"></a>模式匹配和正则表达式</h1><p>学到 Scala 的模式匹配的机制、case 类和提取器，以 及如何创建和使用正则表达式。</p><h2 id="模式匹配综述"><a href="#模式匹配综述" class="headerlink" title="模式匹配综述"></a>模式匹配综述</h2><p>Scala 的模式匹配非常灵活，可以匹配字面量和常量，以及使用通配符匹配任意的值、元 组和列表，甚至还可以根据类型以及判定守卫来进行匹配。接下来我们就来逐个探索一下这 些应用方式。</p><h3 id="匹配字面量和常量"><a href="#匹配字面量和常量" class="headerlink" title="匹配字面量和常量"></a>匹配字面量和常量</h3><p>match 语句是一个在 Any 上进行的表达式。在这个例子中，我们将其应用到了 String 上。它将在目标上进行模式匹配，并使用模式匹配的值调用适当的 case 表达式。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">activity</span> </span>(day: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  day <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"Sunday"</span> =&gt; print (<span class="string">"Eat, sleep, repeat... "</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"Saturday"</span> =&gt; print (<span class="string">"Hang out with friends... "</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"Monday"</span> =&gt; print (<span class="string">"...code for fun..."</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"Friday"</span> =&gt; print (<span class="string">"...read a good book..."</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">List</span> (<span class="string">"Monday"</span>, <span class="string">"Sunday"</span>, <span class="string">"Saturday"</span>).foreach &#123;</span><br><span class="line">  activity</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匹配通配符"><a href="#匹配通配符" class="headerlink" title="匹配通配符"></a>匹配通配符</h3><p>使用下划线(_)表示的通配符处理其他工作日。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DayOfWeek</span> <span class="keyword">extends</span> <span class="title">Enumeration</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> <span class="type">SUNDAY</span>: <span class="type">DayOfWeek</span>.<span class="type">Value</span> = <span class="type">Value</span>(<span class="string">"Sunday"</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MONDAY</span>: <span class="type">DayOfWeek</span>.<span class="type">Value</span> = <span class="type">Value</span>(<span class="string">"Monday"</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">TUESDAY</span>: <span class="type">DayOfWeek</span>.<span class="type">Value</span> = <span class="type">Value</span>(<span class="string">"Tuesday"</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">WEDNESDAY</span>: <span class="type">DayOfWeek</span>.<span class="type">Value</span> = <span class="type">Value</span>(<span class="string">"Wednesday"</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">THURSDAY</span>: <span class="type">DayOfWeek</span>.<span class="type">Value</span> = <span class="type">Value</span>(<span class="string">"Thursday"</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">FRIDAY</span>: <span class="type">DayOfWeek</span>.<span class="type">Value</span> = <span class="type">Value</span>(<span class="string">"Friday"</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">SATURDAY</span>: <span class="type">DayOfWeek</span>.<span class="type">Value</span> = <span class="type">Value</span>(<span class="string">"Saturday"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">activity</span></span>(day: <span class="type">DayOfWeek</span>.<span class="type">Value</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    day <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">DayOfWeek</span>.<span class="type">SUNDAY</span> =&gt; println(<span class="string">"Eat, sleep, repeat..."</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">DayOfWeek</span>.<span class="type">SATURDAY</span> =&gt; println(<span class="string">"Hang out with friends"</span>)</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; println(<span class="string">"...code for fun..."</span>)</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line">activity(<span class="type">DayOfWeek</span>.<span class="type">SATURDAY</span>) </span><br><span class="line">activity(<span class="type">DayOfWeek</span>.<span class="type">MONDAY</span>)</span><br></pre></td></tr></table></figure><h3 id="匹配元组和列表"><a href="#匹配元组和列表" class="headerlink" title="匹配元组和列表"></a>匹配元组和列表</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">processCoordinates</span></span>(input: <span class="type">Any</span>): <span class="type">Unit</span> = &#123; input <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> (lat, long) =&gt; printf(<span class="string">"Processing (%d, %d)..."</span>, lat, long) <span class="keyword">case</span> <span class="string">"done"</span> =&gt; println(<span class="string">"done"</span>)</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; println(<span class="string">"invalid input"</span>)</span><br><span class="line">&#125; &#125;</span><br><span class="line">processCoordinates((<span class="number">39</span>, <span class="number">-104</span>)) </span><br><span class="line">processCoordinates(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure><p>可以用匹配元组的方式来对 List 进行模式匹配，只需要提供你关心的元素即可，而 对于剩下的元素可以使用数组展开(array explosion)标记(_*)。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">processItems</span></span>(items: <span class="type">List</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123; items <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">List</span>(<span class="string">"apple"</span>, <span class="string">"ibm"</span>) =&gt; println(<span class="string">"Apples and IBMs"</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="type">List</span>(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"white"</span>) =&gt; println(<span class="string">"Stars and Stripes..."</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="type">List</span>(<span class="string">"red"</span>, <span class="string">"blue"</span>, _*) =&gt; println(<span class="string">"colors red, blue,... "</span>) </span><br><span class="line">  <span class="keyword">case</span> <span class="type">List</span>(<span class="string">"apple"</span>, <span class="string">"orange"</span>, otherFruits @ _*) =&gt;</span><br><span class="line">    println(<span class="string">"apples, oranges, and "</span> + otherFruits) &#125;</span><br><span class="line">&#125;</span><br><span class="line">processItems(<span class="type">List</span>(<span class="string">"apple"</span>, <span class="string">"ibm"</span>)) </span><br><span class="line">processItems(<span class="type">List</span>(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>))</span><br><span class="line">processItems(<span class="type">List</span>(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"white"</span>)) </span><br><span class="line">processItems(<span class="type">List</span>(<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"grapes"</span>, <span class="string">"dates"</span>))</span><br></pre></td></tr></table></figure><h2 id="使用-case-类进行模式匹配"><a href="#使用-case-类进行模式匹配" class="headerlink" title="使用 case 类进行模式匹配"></a>使用 case 类进行模式匹配</h2><p>case 类是特殊的类，可以使用 case 表达式来进行模式匹配。case 类很简洁，并且容 易创建，它将其构造参数都公开为值。可以使用 case 类来创建轻量级值对象，或者类名和 属性名都富有意义的数据持有者。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Trade</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Sell</span>(<span class="params">stockSymbol: <span class="type">String</span>, quantity: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Trade</span> </span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Buy</span>(<span class="params">stockSymbol: <span class="type">String</span>, quantity: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Trade</span> </span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Hdge</span>(<span class="params">stockSymbol: <span class="type">String</span>, quantity: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Trade</span></span></span><br></pre></td></tr></table></figure><p>使用class进行模式匹配</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TradeProcessor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">processTransaction</span></span>(request: <span class="type">Trade</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    request <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Sell</span>(stock, <span class="number">1000</span>) =&gt; println(<span class="string">s"Selling 1000-units of <span class="subst">$stock</span>"</span>) </span><br><span class="line">        <span class="keyword">case</span> <span class="type">Sell</span>(stock, quantity) =&gt; println(<span class="string">s"Selling <span class="subst">$quantity</span> units of <span class="subst">$stock</span>"</span>) </span><br><span class="line">        <span class="keyword">case</span> <span class="type">Buy</span>(stock, quantity) <span class="keyword">if</span> quantity &gt; <span class="number">2000</span> =&gt; println(<span class="string">s"Buying <span class="subst">$quantity</span> (large) units of <span class="subst">$stock</span>"</span>) </span><br><span class="line">        <span class="keyword">case</span> <span class="type">Buy</span>(stock, quantity) =&gt; println(<span class="string">s"Buying <span class="subst">$quantity</span> units of <span class="subst">$stock</span>"</span>) &#125;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提取器和正则表达式"><a href="#提取器和正则表达式" class="headerlink" title="提取器和正则表达式"></a>提取器和正则表达式</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(input: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line"><span class="keyword">val</span> <span class="type">GoogStock</span> = <span class="string">""</span><span class="string">"^GOOG:(\d*\.\d+)"</span><span class="string">""</span>.r </span><br><span class="line">input <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">GoogStock</span>(price) =&gt; println(<span class="string">s"Price of GOOG is $$<span class="subst">$price</span>"</span>)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">s"not processing <span class="subst">$input</span>"</span>) &#125;</span><br><span class="line">&#125; </span><br><span class="line">process(<span class="string">"GOOG:310.84"</span>) </span><br><span class="line">process(<span class="string">"GOOG:310"</span>) </span><br><span class="line">process(<span class="string">"IBM:84.01"</span>)</span><br></pre></td></tr></table></figure><h2 id="无处不在的下划线字符"><a href="#无处不在的下划线字符" class="headerlink" title="无处不在的下划线字符"></a>无处不在的下划线字符</h2><ul><li>作为包引入的通配符。例如，在Scala中import java.util._等同于Java中的 import java.util.*。</li><li>作为元组索引的前缀。对于给定的一个元组val names = (“Tom”, “Jerry”)， 可以使用 names._1 和 names._2 来分别索引这两个值。</li><li>作为函数值的隐式参数。代码片段list.map { _ * 2 }和list.map { e =&gt; e * 2 }是等价的。同样，代码片段 list.reduce { _ + _ }和 list.reduce { (a, b) =&gt; a + b }也是等价的。</li><li>用于用默认值初始化变量。例如，var min : Int = _将使用0初始化变量min， 而var msg : String = _将使用null初始化变量msg。</li><li>用于在函数名中混合操作符。你应该还记得，在Scala中，操作符被定义为方法。例如，用于将元素前插到一个列表中的::()方法。Scala 不允许直接使用字母和数字字 符的操作符。例如，foo:是不允许的，但是可以通过使用下划线来绕过这个限制， 如 foo_:。</li><li>在进行模式匹配时作为通配符。case <em>将会匹配任意给定的值，而 case _:Int 将匹配任何整数。此外，case <people>{</people></em>*}将会匹配名为 people 的 XML 元素，其具有 0 个或者多个子元素。</li><li>在处理异常时，在catch代码块中和case联用。</li><li>作为分解操作的一部分。例如，max(arg: _*)在将数组或者列表参数传递给接受可变长度参数的函数前，将其分解为离散的值。</li><li>用于部分应用一个函数。例如，在代码片段val square = Math.pow(_: Int,2)中，我们部分应用了 pow()方法来创建了一个 square()函数。</li></ul><h1 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h1><h2 id="Scala-中的异常"><a href="#Scala-中的异常" class="headerlink" title="Scala 中的异常"></a>Scala 中的异常</h2><p>try catch标准用法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  print(<span class="string">s"Amount: $$<span class="subst">$amount</span> "</span>)</span><br><span class="line">  println(<span class="string">s"Tax: $$<span class="subst">$&#123;Tax.taxFor(amount)&#125;</span>"</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> ex: <span class="type">IllegalArgumentException</span> =&gt; println(ex.getMessage)</span><br><span class="line">  <span class="keyword">case</span> ex: <span class="type">RuntimeException</span> =&gt;</span><br><span class="line">    <span class="comment">// 如果需要一段代码来处理异常</span></span><br><span class="line">    println(<span class="string">s"Don't bother reporting...<span class="subst">$&#123;ex.getMessage&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意-catch-的顺序"><a href="#注意-catch-的顺序" class="headerlink" title="注意 catch 的顺序"></a>注意 catch 的顺序</h2><p>在Scala中，用于catch代码块的模式匹配代码将按照它们被编写顺序生效。可惜的是， 如果前面的语句处理了你本打算在后面的语句中处理的异常，Scala 并不会警告你。我们可以 在下面的示例中看到这一点。</p><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>一般来说，递归最大的问题是大规模的输入值会造成栈溢出。但幸运的是，在 Scala 中可以 使用特殊构造的递归来规避这个问题。在本章中，我们将分别探讨强大的尾调用优化(tail call optimization)技术以及 Scala 标准库中的相关支持类。使用这些易于访问的工具，就可以在高度递归的算法实现中既可以处理大规模的输入值又能同时规避栈溢出(即触发 StackOverflowError)的风险。</p><h2 id="使用尾部调用优化回调"><a href="#使用尾部调用优化回调" class="headerlink" title="使用尾部调用优化回调"></a>使用尾部调用优化回调</h2><p>所有支持递归的编程语言都支持尾调用优化。例如，Java 就不支持尾调用优化，所有 的递归，不管是不是尾部调用，都注定会在输入大值时栈溢出。Scala 则很容易支持尾调用优化。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mad</span></span>(parameter: <span class="type">Int</span>): <span class="type">Int</span> = &#123; </span><br><span class="line">    <span class="keyword">if</span> (parameter == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">RuntimeException</span>(<span class="string">"Error"</span>) </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="number">1</span> * mad(parameter - <span class="number">1</span>) </span><br><span class="line">&#125;</span><br><span class="line">mad(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>我们改造一下 mad()函数，去除多余的乘 1 操作。这将使调用在尾部递归— 对函数的 调用在最后，即在尾部。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mad</span></span>(parameter: <span class="type">Int</span>): <span class="type">Int</span> = &#123; <span class="keyword">if</span> (parameter == <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">RuntimeException</span>(<span class="string">"Error"</span>) <span class="keyword">else</span></span><br><span class="line">  mad(parameter - <span class="number">1</span>) &#125;</span><br><span class="line">mad(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="scala确保尾调用优化"><a href="#scala确保尾调用优化" class="headerlink" title="scala确保尾调用优化"></a>scala确保尾调用优化</h2><p>还好 Scala 提供了一个注解，辅助尾递归的编写。可以用 tailrec 注解标记任何函数， Scala 会在编译时检查函数是否是尾递归的。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@scala</span>.annotation.tailrec</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span></span>(number: <span class="type">Int</span>): <span class="type">BigInt</span> = &#123;</span><br><span class="line">  <span class="keyword">if</span> (number == <span class="number">0</span>) <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    number * factorial(number - <span class="number">1</span>)</span><br><span class="line">&#125; </span><br><span class="line">println(factorial(<span class="number">10000</span>))</span><br></pre></td></tr></table></figure><p>因为这个版本的 factorial()函数是常规递归，而不是尾递归，因此编译器会报一个 恰当的错误:<br>error: could not optimize @tailrec annotated method factorial: it contains a recursive call not in tail position<br>    number * factorial(number - 1) ^<br>error found</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@scala</span>.annotation.tailrec</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span></span>(fact: <span class="type">BigInt</span>, number: <span class="type">Int</span>): <span class="type">BigInt</span> = &#123; </span><br><span class="line">    <span class="keyword">if</span> (number == <span class="number">0</span>)</span><br><span class="line">        fact </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        factorial(fact * number, number - <span class="number">1</span>) </span><br><span class="line">&#125;</span><br><span class="line">println(factorial(<span class="number">1</span>, <span class="number">10000</span>))</span><br></pre></td></tr></table></figure><p>修改后的 factorial()函数接收两个参数，其中第一个参数 fact 是已经计算出来的 部分结果。对 factorial()函数的递归调用发生在尾部，符合函数头部的注解。在做了这 样的更改之后，Scala 就不会报错，而会在调用中做优化。</p><h2 id="蹦床调用"><a href="#蹦床调用" class="headerlink" title="蹦床调用"></a>蹦床调用</h2><p>尽管 Scala 中的尾调用优化非常强大，但也有诸多限制。编译器只能够检测到直接的递 归，也就是说函数调用自己。如果两个函数相互调用，也就是蹦床调用(trampoline call)， 那么 Scala 就无法检测到这种递归，也不会做优化。<br>用@scala.annotation.tailrec 去标记例子中的函数不会有效果— 你将会得到 错误提示，表明这些函数都不是递归的。Scala 编译器无法识别跨方法的递归。<br>像这种函数间相互调用产生的递归，我们可以用 TailRec 类和 scala.util.control. TailCalls 包中的可用函数解决。<br>TailRec 的实例将会保存函数值(参见第 6 章)。TailRec 中的 result()函数是一个 简单的迭代器或者说是循环。它会取出保存在 TailRec 中的内部函数，检查它是不是子类 Call 或者 Done 的实例。如果是 Call 的实例，那么它会发信号通知调用继续执行，迭代会 继续执行内部函数以便做进一步的处理。如果是 Done 的实例，那么它会发信号通知迭代终 止，并将内部函数中留存的结果返回。</p>]]></content>
      
      
      <categories>
          
          <category> professional skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> software programming </tag>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala实用指南读书笔记（一）</title>
      <link href="/2020/01/02/----81/"/>
      <url>/2020/01/02/----81/</url>
      
        <content type="html"><![CDATA[<p>第一部分 小试牛刀<br>Scala 是一门强大的编程语言:不需要牺牲强大的静态类型检查支持，就可以写出富有表 现力而又简洁的代码。</p><h1 id="探索scala"><a href="#探索scala" class="headerlink" title="探索scala"></a>探索scala</h1><h2 id="scala的特殊性"><a href="#scala的特殊性" class="headerlink" title="scala的特殊性"></a>scala的特殊性</h2><p>scala的关键特性信息：</p><ul><li>同时支持命令式风格和函数式风格</li><li>纯面向对象</li><li>强制合理的静态类型和类型推断</li><li>简洁而富有表现力</li><li>能和 Java 无缝地互操作</li><li>基于精小的内核构建</li><li>高度的伸缩性，仅用少量代码就可以创建高性能的应用程序</li><li>具有强大、易用的并发模型</li></ul><h2 id="以少胜多"><a href="#以少胜多" class="headerlink" title="以少胜多"></a>以少胜多</h2><p>用更少的代码解决更多的问题 — 简化日常编程<br>筛选出内部最高价格的股票</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Record</span>(<span class="params">year: <span class="type">Int</span>, month: <span class="type">Int</span>, date: <span class="type">Int</span>, closePrice: <span class="type">BigDecimal</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">PrintMax</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getYearEndClosingPrice</span></span>(symbol: <span class="type">String</span>, year: <span class="type">Int</span>): <span class="type">BigDecimal</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> url = <span class="string">s"https://raw.githubusercontent.com/ReactivePlatform/"</span> +</span><br><span class="line">      <span class="string">s"Pragmatic-Scala-StaticResources/master/src/main/resources/"</span> + <span class="string">s"stocks/daily/daily_<span class="subst">$symbol</span>.csv"</span></span><br><span class="line">    <span class="keyword">val</span> data = io.<span class="type">Source</span>.fromURL(url).mkString</span><br><span class="line">    <span class="keyword">val</span> maxClosePrize = data.split(<span class="string">"\n"</span>)</span><br><span class="line">      .filter(record =&gt; record.startsWith(<span class="string">s"<span class="subst">$year</span>-12"</span>)).map(record =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> <span class="type">Array</span>(timestamp, open, high, low, close, volume) = record.split(<span class="string">","</span>)</span><br><span class="line">      <span class="keyword">val</span> <span class="type">Array</span>(year, month, date) = timestamp.split(<span class="string">"-"</span>)</span><br><span class="line">      <span class="type">Record</span>(year.toInt, month.toInt, date.toInt, <span class="type">BigDecimal</span>(close.trim))</span><br><span class="line">    &#125;).sortBy(_.date)(<span class="type">Ordering</span>[<span class="type">Int</span>].reverse).take(<span class="number">1</span>)</span><br><span class="line">      .map(_.closePrice)</span><br><span class="line">      .head</span><br><span class="line">    maxClosePrize</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> symbols = <span class="type">List</span>(<span class="string">"AMD"</span>, <span class="string">"AAPL"</span>)</span><br><span class="line">    <span class="keyword">val</span> year = <span class="number">2017</span></span><br><span class="line">    <span class="keyword">val</span> (topStock, topPrice) = symbols.par.map &#123; ticker =&gt; (ticker, getYearEndClosingPrice(ticker, year)) &#125;</span><br><span class="line">      .maxBy &#123; stockPrice =&gt; stockPrice._2 &#125;</span><br><span class="line">    printf(<span class="string">s"Top stock of <span class="subst">$year</span> is <span class="subst">$topStock</span> closing at price $$<span class="subst">$topPrice</span>"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个功能强大的专用迭代器— map() 函数和 maxBy()函数。在 Java 中，我们习惯用“方法”这个术语来指代类的成员，而“函 数”这个术语通常用于指代不属于类的过程(procedure)。然而，在 Scala 中这两个术语可交 换使用。</p><p>这两个迭代器分别行使了两种独立的职责。首先，我们使用 map()函数遍历股票代码， 以创建一个由股票代码及其 2017 年收盘价格组成的“对”或“元组”为元素的列表。最终结 果的元组列表形式为 List((股票代码 1，价格 1)，(股票代码 2，价格 2)，…)。</p><a id="more"></a><p>第二个迭代器处理第一个迭代器的结果。maxBy()函数是一个从列表中取出最大值的专 用迭代器。因为该列表中的值是元组(对)，所以我们需要告诉 maxBy()函数如何比较两个 值。在 maxBy()函数附带的代码块中，我们指定了一个包含两个元素的元组，我们感兴趣的 是第二个属性(代码块中的_2)— 价格。</p><p>可视化动作：<br><img src="/2020/01/02/----81/15773793874093.jpg" alt="-w514"></p><p>在这个例子中，我们从 Web 获取每个股票代码的数据，这涉及多次访问网络的调用。假 设网络延迟是d秒，而我们要分析n支股票，那么顺序代码大概需要n × d秒。因为代码中 最大的延迟在于访问网络来获取数据，所以如果我们并行地执行代码以获取不同股票代码的 数据，那么我们可以将时间缩短到大约 d 秒。Scala 使得将顺序代码改成并行模式变得很简单， 只需一个很小的改动:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">symbols.par.map &#123; ticker =&gt; (ticker, getYearEndClosingPrice(ticker, year)) &#125; .maxBy &#123; stockPrice =&gt; stockPrice._2 &#125;</span><br></pre></td></tr></table></figure><p>插入了对 par 的调用，就是这么简单。这段代码现在已经是在并行地处理每一个股 票代码，而不是顺序迭代。</p><p><strong>强调一下这个例子的一些优点</strong>：</p><ul><li>代码很简洁。我们利用了Scala的许多强大特性，如函数值、(并行)集 合、专用迭代器、不可变值、不可变性和元组等</li><li>函数式风格，具体说来就是函数组合。我们使用 map()方法将股票代码 的列表转换为股票代码及其价格组成的元组的列表。然后我们使用 maxBy()方法将 其转换成所需的值。和使用命令式风格不同，我们将控制逻辑让渡给函数所在的标准 库以完成任务，而不是耗费精力在迭代的控制上。</li><li>无痛地使用并发。没有必要再使用 wait()和 notify()方法或者 synchronized 关键字了。</li></ul><p>更多的优点：</p><ul><li>Java 中的原始类型在 Scala 中被看作对象。例如，2.toString()在 Java 中将产生编译 错误，但在 Scala 中是有效</li><li>Scala 编译成了字节码，这样我们就可以使用运行 Java 程序的方式来运行 Scala 程序，也 可以用脚本的方式运行它。Scala 也可以很好地与 Java 互操作。</li><li>Scala是一门静态类型的编程语言，但与Java不同，它的静态类型更加合理— Scala会 尽可能地使用类型推断。我们可以依靠 Scala 本身来推断出类型，并将结果类型应用到其余 代码中，而不是重复又冗余地指定类型。我们不应该为编译器工作，而应该让编译器为我们 工作。例如，当我们定义var i = 1时，Scala将立即推断出变量i的类型为Int。</li></ul><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>Scala 本质上是一门混合型编程语言，我们既可以使用命令式风格也可以使用函数式风 格，这是把双刃剑。其优点在于，当使用 Scala 编写代码时，我们可以先使其工作，然后再 做优化。对于刚刚接触函数式编程的程序员，他们可以先用命令式风格写好代码，然后再将 代码重构成函数式风格。</p><p>函数式编程提倡<strong>不可变性</strong>、<strong>高阶函数</strong>和<strong>函数组合</strong>。这些特性合在一起就能使代码简洁、 富有表现力、易于理解和修改。不可变性还有助于减少那些由于状态改变而悄然滋生的错误。</p><p><strong>Java和Scala代码风格对比</strong></p><p>命令式风格的 Java 代码1，用于从给定日期开始的一系列温度中计算出最大值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMax</span><span class="params">(List&lt;Integer&gt; temperatures)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> highTemperature = Integer.MIN_VALUE; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> temperature : temperatures) &#123;</span><br><span class="line">        highTemperature = Math.max(highTemperature, temperature);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> highTemperature; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala 也支持命令式风格，下面是 Scala 版本的代码:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMax</span></span>(temperatures: <span class="type">List</span>[<span class="type">Int</span>]) = &#123; </span><br><span class="line">    <span class="keyword">var</span> highTemperature = <span class="type">Integer</span>.<span class="type">MIN_VALUE</span> </span><br><span class="line">    <span class="keyword">for</span> (temperature &lt;- temperatures) &#123;</span><br><span class="line">        highTemperature = <span class="type">Math</span>.max(highTemperature, temperature) </span><br><span class="line">    &#125;</span><br><span class="line">    highTemperature </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建了可变变量 highTemperature，并在循环中持续修改它。我们必须确保正确 地初始化可变变量，并在正确的地方把它们修改为正确的值。</p><p>函数式编程是一种声明式风格，我们只要指定做什么而不用指定如何去做。XSLT、规则 引擎和 ANTLR 这些工具都普遍使用声明式风格。让我们把前面的代码用不带可变参数的函 数式风格重写一下。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMax</span></span>(temperatures: <span class="type">List</span>[<span class="type">Int</span>]) = &#123; </span><br><span class="line">    temperatures.foldLeft(<span class="type">Integer</span>.<span class="type">MIN_VALUE</span>) &#123; <span class="type">Math</span>.max &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="体验-Scala"><a href="#体验-Scala" class="headerlink" title="体验 Scala"></a>体验 Scala</h1><h2 id="使用-REPL"><a href="#使用-REPL" class="headerlink" title="使用 REPL"></a>使用 REPL</h2><p>相当多的编程语言都提供了REPL(read-eval-print loop)工具，使用REPL可以便捷地 键入代码片段，并以交互方式立即看到代码运行结果。除了执行代码片段外，REPL 往往还 提供一些在运行时不方便获取的细节。这使得 REPL 成为一个特殊工具，可以用来做试验， 也可以用来学习 Scala 推断变量或函数类型的方法。</p><p>要启动 REPL，应在命令行(在终端窗口或命令提示符下)键入 scala。启动后会打印 出一些介绍信息，紧跟着一个提示符:</p><h2 id="命令行上的-Scala"><a href="#命令行上的-Scala" class="headerlink" title="命令行上的 Scala"></a>命令行上的 Scala</h2><p>和Java最大的差异，直接写代码就可以得到最终的反馈结果，而不需要像java一样必须使用 main()方法的 Main 类</p><h2 id="以独立脚本方式运行-Scala-代码"><a href="#以独立脚本方式运行-Scala-代码" class="headerlink" title="以独立脚本方式运行 Scala 代码"></a>以独立脚本方式运行 Scala 代码</h2><h3 id="在类-Unix-系统上以独立脚本方式运行"><a href="#在类-Unix-系统上以独立脚本方式运行" class="headerlink" title="在类 Unix 系统上以独立脚本方式运行"></a>在类 Unix 系统上以独立脚本方式运行</h3><p>在类 Unix 系统上，在脚本中设置 shebang 前缀如下。键入并运行chmod + x hello.sh以确保文件hello.sh具有可执行权限，然后在 命令行上键入如下命令以运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env </span></span><br><span class="line">scala println(<span class="string">"Hello "</span> + args(0))</span><br></pre></td></tr></table></figure><p>./hello.sh Buddy<br>Buddy 是传递给脚本的参数。下面是运行结果: Hello Buddy</p><h3 id="在-Windows-上以独立脚本方式运行"><a href="#在-Windows-上以独立脚本方式运行" class="headerlink" title="在 Windows 上以独立脚本方式运行"></a>在 Windows 上以独立脚本方式运行</h3><p>忽略不计，不在windows上进行代码操作</p><h3 id="Scala-的-IDE-支持"><a href="#Scala-的-IDE-支持" class="headerlink" title="Scala 的 IDE 支持"></a>Scala 的 IDE 支持</h3><p>根据Intellij Idea 配置</p><h4 id="Maven依赖配置"><a href="#Maven依赖配置" class="headerlink" title="Maven依赖配置"></a>Maven依赖配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-reflect<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-actors<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-scala-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Maven打包插件配置"><a href="#Maven打包插件配置" class="headerlink" title="Maven打包插件配置"></a>Maven打包插件配置</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;!-- 这是个编译java代码的 --&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.2</span>&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;source&gt;<span class="number">1.8</span>&lt;/source&gt;</span><br><span class="line">        &lt;target&gt;<span class="number">1.8</span>&lt;/target&gt;</span><br><span class="line">        &lt;encoding&gt;<span class="type">UTF</span><span class="number">-8</span>&lt;/encoding&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;phase&gt;compile&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;compile&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;!-- 这是个编译scala代码的 --&gt;</span><br><span class="line">    &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;scala-compile-first&lt;/id&gt;</span><br><span class="line">            &lt;phase&gt;process-resources&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;add-source&lt;/goal&gt;</span><br><span class="line">                &lt;goal&gt;compile&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.5</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;archive&gt;</span><br><span class="line">            &lt;manifest&gt;</span><br><span class="line">                &lt;mainClass&gt;pro.simba.<span class="type">Main</span>&lt;/mainClass&gt;</span><br><span class="line">            &lt;/manifest&gt;</span><br><span class="line">        &lt;/archive&gt;</span><br><span class="line">        &lt;descriptorRefs&gt;</span><br><span class="line">            &lt;descriptorRef&gt;jar-<span class="keyword">with</span>-dependencies&lt;/descriptorRef&gt;</span><br><span class="line">        &lt;/descriptorRefs&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class="line">            &lt;phase&gt;<span class="keyword">package</span>&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h4 id="编译sdk配置"><a href="#编译sdk配置" class="headerlink" title="编译sdk配置"></a>编译sdk配置</h4><p><img src="/2020/01/02/----81/15774317263759.jpg" alt></p><h1 id="从-Java-到-Scala"><a href="#从-Java-到-Scala" class="headerlink" title="从 Java 到 Scala"></a>从 Java 到 Scala</h1><p>你可以在使用 Scala 的同时运用自己的 Java 技能。在某些方面 Scala 与 Java 类似，但在 许多其他方面又彼此不同。Scala 青睐纯面向对象，但它又尽可能将类型和 Java 的类型对应 起来。Scala 在支持熟悉的命令式编程风格的同时，也支持函数式编程风格。因此，你可以使 用最熟悉的风格立即开始编程，而不用承受陡峭的学习曲线。</p><h2 id="Scala-简洁的-Java"><a href="#Scala-简洁的-Java" class="headerlink" title="Scala:简洁的 Java"></a>Scala:简洁的 Java</h2><p>Java代码中通常充斥着很多样板代码— getter、setter、访问修饰符、处理受检异常的代 码等。这些样板还在不断增多，使代码不断膨胀。在后面我们会了解到，Scala 编译器做了一 些额外的工作，这样就不用耗费精力编写并维护那些本可以生成的代码上了。</p><h3 id="减少样板代码"><a href="#减少样板代码" class="headerlink" title="减少样板代码"></a>减少样板代码</h3><p>Scala 具有非常高的代码密度— 输入少量代码就可以完成许多功能。作为对比，我们来 看一个 Java 代码的例子。例如：字符串插值(语法形如 s”…${expression}…”)，避免了Java的拼凑字符串。</p><h3 id="更多便利特性"><a href="#更多便利特性" class="headerlink" title="更多便利特性"></a>更多便利特性</h3><p>使用 val 或 var 定义变量。使用 val 定 义的变量是不可变的，即初始化后不能更改。然而，那些使用 var 定义(不推荐使用)的变 量是可变的，可以被改任意次。</p><p>scala中 ，循环所使用的 to()是一个方法，这一点很容易被忽略。to()方法和 until()方法实际上都是 RichInt 上的方法— 我们将在 3.2 节中讨论富封装器(rich wrapper)。变量 i 的类型为 Int， 被隐式转换为 RichInt，因此在这个变量上可以调用这个方法。这两个方法都返回 Range 的实例。因此，1 to 3等价于1.to(3)，但是前者更优雅。</p><h3 id="转向函数式风格"><a href="#转向函数式风格" class="headerlink" title="转向函数式风格"></a>转向函数式风格</h3><p>使用偏向函数式风格的 foreach()方法来实现循环：<code>(1 to 3).foreach(i =&gt; print(s&quot;$i,&quot;))</code><br>上面这个例子很简洁，且没有赋值操作。我们使用了 Range 类的 foreach()方法。这 个方法接受函数值作为参数。所以，在括号中，我们提供了一个接受一个参数的代码主体， 在这个例子中参数为 i。=&gt;符号将左侧的参数列表与右侧的实现分开。</p><h2 id="Java-原始类型对应的-Scala-类"><a href="#Java-原始类型对应的-Scala-类" class="headerlink" title="Java 原始类型对应的 Scala 类"></a>Java 原始类型对应的 Scala 类</h2><p>Java 的世界观是分裂的— 其原始类型(如 int 和 double)和对象截然不同。从 Java 5 开始，利用自动装箱(autoboxing)机制，可以将原始类型视为对象。然而，Java 的原始类 型不允许方法调用，如 2.toString()。另外，自动装箱还涉及类型转换的开销，会带来一 些负面的影响。<br>和 Java 不同，Scala 将所有的类型都视为对象。这就意味着，和调用对象上的方法一样， 也可以在字面量上进行方法调用。在下面的代码中，我们创建了一个 Scala 中的 Int 的实例， 并将它传给 java.util.ArrayList 的 ensureCapacity()方法，其参数类型为 Java 的 原始类型 int。</p><h2 id="元组和多重赋值"><a href="#元组和多重赋值" class="headerlink" title="元组和多重赋值"></a>元组和多重赋值</h2><p>在 Java 中，方法可以接受多个参数，但是只能返回一个结果。在 Java 中返回多个结果 需要使用拙劣的变通方案。例如，为了返回用户的姓、名和电子邮箱地址，我们不得不引入 Person 类，或者返回一个 String 数组或一个 ArrayList。Scala 的元组，与多重赋值(multiple assignment)结合，可以将返回多个值变成小菜一碟。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPersonInfo</span></span>(primaryKey: <span class="type">Int</span>) = &#123;</span><br><span class="line">    <span class="comment">// 假定primaryKey是用来获取用户信息的主键</span></span><br><span class="line">    <span class="comment">// 这里响应体是固定的</span></span><br><span class="line">    (<span class="string">"Venkat"</span>, <span class="string">"Subramaniam"</span>, <span class="string">"venkats@agiledeveloper.com"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> (firstName, lastName, emailAddress) = getPersonInfo(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> 除了直接赋值，还可以直接访问元组中的单个元素。例如，如果运行 val info = getPersonInfo(1)，那么随后就可以采用 info._1 这种语法形式访问其中的第一个元 素，第二个元素则是 info._2，以此类推。</p><h2 id="灵活的参数和参数值"><a href="#灵活的参数和参数值" class="headerlink" title="灵活的参数和参数值"></a>灵活的参数和参数值</h2><p>参数的定义和参数值的传递在任何编程语言中都是最常见的编程任务。Scala 提供了一些 便利的特性来定义变长参数、声明参数的默认值以及定义命名参数。</p><h3 id="传递变长参数值"><a href="#传递变长参数值" class="headerlink" title="传递变长参数值"></a>传递变长参数值</h3><p><strong>只有最后一个 参数可以接受变长参数值</strong>。我们可以在最后一个参数类型后面<strong>加上星号</strong>，以表明该参数 (parameter)可以接受可变长度的参数值(argument)。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(values: <span class="type">Int</span>*) = values.foldLeft(values(<span class="number">0</span>)) &#123; <span class="type">Math</span>.max &#125;</span><br></pre></td></tr></table></figure><h3 id="为参数提供默认值"><a href="#为参数提供默认值" class="headerlink" title="为参数提供默认值"></a>为参数提供默认值</h3><p>使用参数默认值的例子</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mail</span></span>(destination: <span class="type">String</span> = <span class="string">"head office"</span>, mailClass: <span class="type">String</span> = <span class="string">"first"</span>): <span class="type">Unit</span> = println(<span class="string">s"sending to <span class="subst">$destination</span> by <span class="subst">$mailClass</span> class"</span>)</span><br></pre></td></tr></table></figure><p>调用 mail()方法的几个样例</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mail(<span class="string">"Houston office"</span>, <span class="string">"Priority"</span>) </span><br><span class="line">mail(<span class="string">"Boston office"</span>)</span><br><span class="line">mail()</span><br></pre></td></tr></table></figure><p>为省略的参数补上默认值这个操作是在编译时完成的。不过在重载方法的时候，需要特 别小心。如果一个方法在基类中用了一个默认值，而在其派生类的相应重载方法中却使用了 另一个默认值，就会让人感到困惑，到底选用哪个默认值。对于多参数的方法，如果对于其中一个参数，你选择使用它的默认值，你就不得不让这 个参数后面的所有参数都使用默认值。</p><h3 id="使用命名参数"><a href="#使用命名参数" class="headerlink" title="使用命名参数"></a>使用命名参数</h3><p>使用命名参数时，必须注意以下几点:</p><ul><li>对于所有没有默认值的参数，必须要提供参数的值。</li><li>对于那些有默认值的参数，可以选择性地使用命名参数传值。</li><li>一个参数最多只能传值一次。</li><li>在重载基类的方法时，应该保持参数名字的一致性。如果不这样做，编译器就会优先使用基类中的参数名，就可能会违背最初的目的。</li><li>如果有多个重载的方法，它们的参数名一样，但是参数类型不同，那么函数调用就很有可能产生歧义。在这种情况下，编译器会严格报错，就不得不切换回基于位置的参数形式。</li></ul><p>调用方式：<code>mail(mailClass = &quot;Priority&quot;)</code></p><h2 id="隐式参数"><a href="#隐式参数" class="headerlink" title="隐式参数"></a>隐式参数</h2><p>函数的定义者首先需要把参数标记为 implicit。针对这种场景，Scala 要求我们把隐式 参数放在一个单独的参数列表而非常规的参数列表中(6.4 节将详细介绍 Scala 支持多参数列 表)。如果一个参数被定义为 implicit，那么就像有默认值的参数，该参数的值传递是可然而，如果没有传值，Scala 会在调用的作用域中寻找一个隐式变量。这个隐式变量必 须和相应的隐式参数具有相同的类型，因此，在一个作用域中每一种类型都最多只能有一个 隐式变量。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wifi</span>(<span class="params">name: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connectToNetwork</span></span>(user: <span class="type">String</span>)(<span class="keyword">implicit</span> wifi: <span class="type">Wifi</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(<span class="string">s"User: <span class="subst">$user</span> connected to WIFI <span class="subst">$wifi</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">atOffice</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(<span class="string">"--- at the office ---"</span>)</span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">officeNetwork</span></span>: <span class="type">Wifi</span> = <span class="keyword">new</span> <span class="type">Wifi</span>(<span class="string">"office-network"</span>)</span><br><span class="line">  <span class="keyword">val</span> cafeteriaNetwork = <span class="keyword">new</span> <span class="type">Wifi</span>(<span class="string">"cafe-connect"</span>)</span><br><span class="line">  connectToNetwork(<span class="string">"guest"</span>)(cafeteriaNetwork) </span><br><span class="line">  connectToNetwork (<span class="string">"Jill Coder"</span>) </span><br><span class="line">  connectToNetwork (<span class="string">"Joe Hacker"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">atJoesHome</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(<span class="string">"--- at Joe's home ---"</span>)</span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">homeNetwork</span></span>: <span class="type">Wifi</span> = <span class="keyword">new</span> <span class="type">Wifi</span>(<span class="string">"home-network"</span>)</span><br><span class="line">  connectToNetwork(<span class="string">"guest"</span>)(homeNetwork)</span><br><span class="line">  connectToNetwork(<span class="string">"Joe Hacker"</span>)</span><br><span class="line">&#125;</span><br><span class="line">atOffice() </span><br><span class="line">atJoesHome()</span><br></pre></td></tr></table></figure><p>connectToNetwork()函数拥有两个参数列表，一个是类型为 String 的常规参数， 另一个是类型为 Wifi 的隐式参数。</p><p>在 atOffice()函数中，我们定义了 Wifi 类的两个实例，并将其中一个标记为 implicit。我们调用了 connectToNetwork()方法 3 次，但只在第一次调用时为参数 wifi 提供了值。其他两次调用编译器都会自动填入参数的值。如果参数有一个默认值，那么编译 器会在函数的定义中寻找该值。然而，因为这里的参数 wifi 是隐式参数，所以编译器会在 这个函数调用的作用域中寻找定义为 implicit 的值。</p><p>在 atJoesHome()函数中，我们只定义了一个 Wifi 实例，并标记为 implicit。给connectToNetwork()方法传递参数是可选的。例如，客人可能想要知道自己连接到了哪个网络，但是这个网络很有可能就是常驻者日常隐式使用的 。在这种情况下，显式指定一个隐式定义的参数是正确的。</p><p> 运行这段脚本可以观察到如下输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--- at the office ---</span><br><span class="line">User: guest connected to WIFI cafe-connect</span><br><span class="line">User: Jill Coder connected to WIFI office-network </span><br><span class="line">User: Joe Hacker connected to WIFI office-network</span><br><span class="line">--- at Joe&#39;s home ---</span><br><span class="line">User: guest connected to WIFI home-network</span><br><span class="line">User: Joe Hacker connected to WIFI home-network</span><br></pre></td></tr></table></figure><p>输出结果表明，在省略参数值时，相应作用域中的隐式变量就会被使用。尽管在不同的 函数中调用的是同一个函数，但是所传入的被省去的参数却不是同一个。虽然参数默认值和 隐式参数都可以让调用者省去参数，但是编译器绑定到参数的值却完全不同。</p><h2 id="字符串和多行原始字符串"><a href="#字符串和多行原始字符串" class="headerlink" title="字符串和多行原始字符串"></a>字符串和多行原始字符串</h2><p>在 Scala 中创建一个跨行的字符串非常简单，完全不需要用乱七八糟的+=，只要将多行的 字符串放在一对 3 个双引号之中(“””…”””)就可以了。这是 Scala 对所谓的 here 文档2(或 heredoc)的支持。我们创建一个跨行的字符串来举例说明。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">""</span><span class="string">"In his famous inaugural speech, John F. Kennedy said</span></span><br><span class="line"><span class="string">"</span><span class="type">And</span> so, my fellow <span class="type">Americans</span>: ask not what your country can do <span class="keyword">for</span> you-ask what you can do <span class="keyword">for</span> your country.<span class="string">"</span></span><br><span class="line"><span class="string">He then proceeded to speak to the citizens of the World..."</span><span class="string">""</span></span><br><span class="line">println(str)</span><br></pre></td></tr></table></figure><h2 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h2><p>在 Java 中以输出或者消息的形式创建一个字符串非常混乱。例如，要创建一条这样的消 息”A discount of 10% has been applied”，其中的数值10来自一个名为discount 的变量，就十分费力。我们可以这样写:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String message = <span class="string">"A discount of "</span> + discount + <span class="string">"% has been applied"</span>;</span><br></pre></td></tr></table></figure><p>同样烦琐。Scala 提供了简洁而流畅的语法，使用表达式来创建字符串字面量。下面 是在 Scala 中用于创建所需要的消息的等价方式:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> message = <span class="string">s"A discount of <span class="subst">$discount</span>% has been applied"</span></span><br></pre></td></tr></table></figure><p>字符串字面量中可以有零个或者多个内嵌表达式。如果表达式是最简单的一个变量，那 么在它的前面加上美元符号($)。而对于更复杂的表达式，可以把它们放在大括号中，如下 例所示:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> price = <span class="number">90</span></span><br><span class="line"><span class="keyword">val</span> totalPrice = <span class="string">s"The amount of discount is <span class="subst">$&#123;price * discount / 100&#125;</span> dollars"</span></span><br></pre></td></tr></table></figure><h2 id="合理的约定"><a href="#合理的约定" class="headerlink" title="合理的约定"></a>合理的约定</h2><p>Scala 中有一些约定，可以让代码简洁且易于阅读、编写。下面是这些特性的示例。</p><ul><li>支持脚本。不是所有的代码都需要放在一个类中。如果一个脚本就能满足需求，就直 接将可执行的代码放在一个文件中，没有必要都堆在一个类中。</li><li>return 是可选的。假定最后一个求值的表达式能够匹配方法所声明的返回类型，那 么这个表达式的求值结果将会自动作为方法调用的结果值返回。无须加入显式的 return 语句可以简化代码，尤其是在将一个闭包传递为方法参数时。</li><li>分号是可选的。不需要使用分号来标识每一个语句或者表达式的结束(参见 3.10.3 节)这个特性能够去除代码中的噪声。如果要多个语句放在同一行上面，可以使用分 号来分隔。没有分号，Scala 也能智能地推断出一个语句或者表达式是否是完整的， 如果不是，那么 Scala 将会接着在下一行读取剩余的代码。</li><li>类和方法默认就是公开的，所以你无须显式使用 public 关键字。</li><li>Scala 提供轻便的语法以创建 JavaBeans— 它用很少的代码就能创建变量和不可变的属性(参见 4.1.2 节)。</li><li>对于我们不关心的那些异常，Scala不会强制要求进行捕获(参见10.1节)，这样做能够缩减代码体积，同时也能够避免不合理的异常处理。</li><li>括号和点号也是可选的，我们在 3.1.2 节讨论过。</li></ul><p>除此之外，Scala 默认会导入两个包、scala.Predef 对象以及它们相应的类和成员。 只用类名就可以从这些预导入的包中引用相应的类。Scala 按照顺序导入下面的包和类:</p><ul><li>java.lang</li><li>scala</li><li>scala.Predef</li></ul><h2 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h2><p>不常用，不实际 </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>(<span class="params">val real: <span class="type">Int</span>, val imaginary: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">+</span></span>(operand: <span class="type">Complex</span>): <span class="type">Complex</span> = &#123;</span><br><span class="line">    println(<span class="string">"Calling +"</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Complex</span>(real + operand.real, imaginary + operand.imaginary)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">*</span></span>(operand: <span class="type">Complex</span>): <span class="type">Complex</span> = &#123;</span><br><span class="line">    println(<span class="string">"Calling *"</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Complex</span>(</span><br><span class="line">      real * operand.real - imaginary * operand.imaginary,</span><br><span class="line">      real * operand.imaginary + imaginary * operand.real)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sign = <span class="keyword">if</span> (imaginary &lt; <span class="number">0</span>) <span class="string">""</span> <span class="keyword">else</span> <span class="string">"+"</span></span><br><span class="line">    <span class="string">s"<span class="subst">$real</span><span class="subst">$sign</span><span class="subst">$&#123;imaginary&#125;</span>i"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> c1 = <span class="keyword">new</span> <span class="type">Complex</span> (<span class="number">1</span>, <span class="number">4</span>) </span><br><span class="line"><span class="keyword">val</span> c2 = <span class="keyword">new</span> <span class="type">Complex</span> (<span class="number">2</span>, - <span class="number">3</span>) </span><br><span class="line"><span class="keyword">val</span> c3 = <span class="keyword">new</span> <span class="type">Complex</span> (<span class="number">2</span>, <span class="number">2</span>) </span><br><span class="line">println (c1 + c2 * c3)</span><br></pre></td></tr></table></figure><h2 id="Scala-与-Java-的差异"><a href="#Scala-与-Java-的差异" class="headerlink" title="Scala 与 Java 的差异"></a>Scala 与 Java 的差异</h2><p>在你开始感受到 Scala 设计上的优雅和简洁时，你也应该注意到一些细微差别。例如， 在处理赋值、等价性检查、函数返回值的时候，Scala 和 Java 有语义上的不同。因为这些特 性的处理与我们在 Java 中已经习惯的方式有显著的不同，很容易犯错。请花一点时间了解它 们以避免各种“惊喜”。</p><h3 id="赋值的结果"><a href="#赋值的结果" class="headerlink" title="赋值的结果"></a>赋值的结果</h3><p>在Java中，赋值操作(像a = b)的值就是a的值，因此像x = a = b这样的多重 赋值就可以出现，但是在 Scala 中不能这样做。在 Scala 中赋值操作的结果值是一个 Unit— 大概等价于一个 Void。从结果上讲，将这种值赋值给另外一个变量有可能造成类型不匹配。 看一看下面这个例子。</p><h3 id="Scala-的"><a href="#Scala-的" class="headerlink" title="Scala 的=="></a>Scala 的==</h3><p>对于基于值的比较，在 Scala 中，可以使用简洁的==而不是 equals()方法。如果要对 引用做基于身份1的比较，那么可以使用 Scala 中的 eq()方法。</p><h3 id="可有可无的分号"><a href="#可有可无的分号" class="headerlink" title="可有可无的分号"></a>可有可无的分号</h3><p>在涉及语句或者表达式的终止时，Scala 很厚道— 分号(;)是可选的，这就能够减少 代码中的噪声。我们可以在语句或者表达式的末尾放置一个分号，特别是，如果想要在同一 行上放置多个语句或者表达式的话，但一定要小心。在同一行上写多个语句或者表达式可能 会降低代码的可读性，就像下面这个例子:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sample = <span class="keyword">new</span> <span class="type">Sample</span>;</span><br><span class="line">println(sample)</span><br></pre></td></tr></table></figure><p>如果一行的末尾没有以一个中缀标记1(如+、*、. )结尾，且不在括号或者方括号中， 那么 Scala 会自动补上分号。如果下一行的起始处能够开始一个语句或者表达式，那么这一 行的末尾也会自动补上分号。</p><h3 id="避免显式-return"><a href="#避免显式-return" class="headerlink" title="避免显式 return"></a>避免显式 return</h3><p>使用 return 语句从方法返回结果，而这在 Scala 中却不是一个好的实 践。return 语句在 Scala 中是隐式的，显式地放置一个 return 命令会影响 Scala 推断返回 类型的能力。</p><h2 id="默认访问修饰符"><a href="#默认访问修饰符" class="headerlink" title="默认访问修饰符"></a>默认访问修饰符</h2><p>Scala 的访问修饰符(access modifier)和 Java 有如下不同点: </p><ul><li>如果不指定任何访问修饰符，那么 Java 会默认为包内部可见，而 Scala 则默认为公开。</li><li>Java 主张全有或全无，也就是说，对当前包的所有类可见或者对所有都不可见。而Scala 对可见性的控制是细粒度的。</li><li>Java 的 protected 是宽泛的，其作用域包括在任意包中的派生类和当前包中的任意类，而 Scala 的 protected 与 C++和 C#的类似，只有派生类能够访问。然而，在Scala 中 protected 还有相当自由和灵活的用法。</li><li>Java 的封装是类级别的。可以在一个类的实例方法中访问该类的任何实例的所有私有字段和方法，在 Scala 中也一样，不过，在 Scala 中也可以进行定制，让其只能在当 前的实例方法中访问，这样就和 Ruby 比较像了。</li></ul><h3 id="定制访问修饰"><a href="#定制访问修饰" class="headerlink" title="定制访问修饰"></a>定制访问修饰</h3><p>在不使用任何访问修饰符的情况下，Scala 默认认为类、字段和方法都是公开的。如 果想将一个成员标记为 private 或者 protected，只要像下面这样用相应的关键字标 记即可。</p><h3 id="Scala-的-protected"><a href="#Scala-的-protected" class="headerlink" title="Scala 的 protected"></a>Scala 的 protected</h3><p>在 Scala 中，protected 让所修饰的成员仅对自己和派生类可见。对于其他类来说，即 使正好和所定义这个类处于同一个包中，也无法访问这些成员。更进一步，派生类在访问 protected 成员的时候，成员的类型也需要一致。让我们用下面的例子做检验。</p><h3 id="细粒度的访问控制"><a href="#细粒度的访问控制" class="headerlink" title="细粒度的访问控制"></a>细粒度的访问控制</h3><p>可以为 private 和 protected 修饰符指定额外的参数。故而，除了简单地将一个成员 标记为 private，还可以标记为 private[AccessQualifier]，其中 AccessQualifier 可以是任何封闭类名、一个封闭的包名或者是 this(即实例级别的可见性)。</p><p>访问修饰符上的限定词告诉 Scala，对于所有类该成员都是私有的，除了以下情况。</p><ul><li>如果没有指定 AccessQualifier(在默认情况下)，那么该成员只能在当前类或者 其伴生对象中访问(第 4 章中将讨论伴生对象)。</li><li>如果 AccessQualifier 是一个类名，那么该成员可以在当前类、伴生对象以及 AccessQualifier 对应的封闭类和其伴生对象中可访问。</li><li>如果 AccessQualifier 是一个封闭的包名，那么该成员可以在当前类、伴生对象 以及所提到的包下面的所有类中访问。</li><li>如果 AccessQualifier 是 this，那么将会限制该成员只能在该实例中访问，对 于同一个类的其他实例，也是不可见的，这是所有选项中限制最严格的。</li></ul><h1 id="处理对象"><a href="#处理对象" class="headerlink" title="处理对象"></a>处理对象</h1><p>我们将从最熟悉的基础开始，快速深入 Scala 面向对象的方方面面。让我们把一个简单 的 Java 类移植到 Scala，然后再深入研究 Scala 的能力。首先构造器就很有意思，因为 Scala 代码往往会比 Java 代码更加简洁，然后我们会见到 Scala 为对象的创建提供的便利。</p><h2 id="创建并使用类"><a href="#创建并使用类" class="headerlink" title="创建并使用类"></a>创建并使用类</h2><p>在 Scala 中创建类表意清晰且高度简洁。我们先探索如何创建实例，然后探索如何创建 类，最后才是如何定义字段和方法。</p><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>在 Scala 中创建类的实例和在 Java 中创建实例差不太多。例如，我们创建 StringBuilder 的一个实例:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">StringBuilder</span>(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><p>在 Java 的版本中，我们为属性 year 显式定义了字段和方法，并显式定义了构造器。而 在 Scala 中，类构造器(我们非正式地用其指代类)的参数定义了字段，并自动生成了访问 器方法。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params">val year: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> milesDriven: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">miles</span></span>: <span class="type">Int</span> = milesDriven</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">drive</span></span>(distance: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    milesDriven += <span class="type">Math</span>.abs(distance)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义字段、方法和构造器"><a href="#定义字段、方法和构造器" class="headerlink" title="定义字段、方法和构造器"></a>定义字段、方法和构造器</h3><p>如果类定义没有主体，就没有必要使用大括号({})。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreditCard</span>(<span class="params">val number: <span class="type">Int</span>, var creditLimit: <span class="type">Int</span></span>)</span></span><br></pre></td></tr></table></figure><p>除了用主构造器参数声明的字段，还可以定义其他字段、方法和辅助构造器(auxiliary constructor)。在下面的代码中，this()方法就是一个辅助构造器。另外，我们定义了变量 position 并且重载了 toString()方法。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val firstName: <span class="type">String</span>, val lastName: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> position: <span class="type">String</span> = _</span><br><span class="line">  println(<span class="string">s"Creating <span class="subst">$toString</span>"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>, positionHeld: <span class="type">String</span>) &#123; <span class="keyword">this</span>(firstName, lastName)</span><br><span class="line">    position = positionHeld</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = &#123;<span class="string">s"<span class="subst">$firstName</span> <span class="subst">$lastName</span> holds <span class="subst">$position</span> position"</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与类定义结合的主构造器接收两个参数，即 firstName 和 lastName。如果需要，可 以很容易就把主构造器设置为 private，详见 4.6.2 节。<br>除了主构造器，我们还有一个辅助构造器，使用名为 this()的方法定义。它接收 3 个 参数:前两个和主构造器相同，第三个是 positionHeld。在辅助构造器中，我们调用主构 造器来初始化与名字相关的字段。Scala 强制规定:辅助构造器的第一行有效语句必须调用主 构造器或者其他辅助构造器。</p><h2 id="遵循-JavaBean-惯例"><a href="#遵循-JavaBean-惯例" class="headerlink" title="遵循 JavaBean 惯例"></a>遵循 JavaBean 惯例</h2><p>大部分 Java 框架已经认定了 JavaBean 惯例，不遵循该惯例会 让我们在那些框架中使用 Scala 类非常困难。别着急，用一个注解就能轻松解决这个问题。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dude</span>(<span class="params">@<span class="type">BeanProperty</span> val firstName: <span class="type">String</span>, val lastName: <span class="type">String</span></span>) </span>&#123; </span><br><span class="line">  <span class="meta">@BeanProperty</span> <span class="keyword">var</span> position: <span class="type">String</span> = _</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用该注解，我们让 Scala 创建了访问器方法 getFirstName()、getPosition()和 setPosition()，还有两个参数和一个声明字段上的 Scala 风格的访问器。因为我们没有用 该注解标记参数 lastName，所以 Scala 不会为它生成 JavaBean 风格的访问器。</p><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>Cop 就能概括这一切，也更容易输入。下面演示了如何给 PoliceOfficer 取别名，且不失其身份。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoliceOfficer</span>(<span class="params">val name: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">CopApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">type</span> <span class="title">Cop</span> </span>= <span class="type">PoliceOfficer</span></span><br><span class="line">  <span class="keyword">val</span> topCop = <span class="keyword">new</span> <span class="type">Cop</span>(<span class="string">"Jack"</span>)</span><br><span class="line">  println(topCop.getClass)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala 标准库中很多类都取了别名。有时候别名是为了使用更合适的名字，有时候是为了 在指定包中引用某些类。例如，Set 就是一个别名，它指向 immutable 包中的 Set 版本， 而不是 mutable 包中的版本。</p><h2 id="扩展一个类"><a href="#扩展一个类" class="headerlink" title="扩展一个类"></a>扩展一个类</h2><p>在 Scala 中扩展一个基类和 Java 中很像，只是多了两个非常好的限制:其一，方法的重 载必须用 override 关键字;其二，只有主构造器能传递参数给基类的构造器。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>(<span class="params">val id: <span class="type">Int</span>, val year: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">s"ID: <span class="subst">$id</span> Year: <span class="subst">$year</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params">override val id: <span class="type">Int</span>, override val year: <span class="type">Int</span>, var fuelLevel: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Vehicle</span>(<span class="params">id, year</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">s"<span class="subst">$&#123;super.toString&#125;</span> Fuel Level: <span class="subst">$fuelLevel</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> car = <span class="keyword">new</span> <span class="type">Car</span>(<span class="number">1</span>, <span class="number">2015</span>, <span class="number">100</span>)</span><br><span class="line">println(car)</span><br></pre></td></tr></table></figure><h2 id="参数化类型"><a href="#参数化类型" class="headerlink" title="参数化类型"></a>参数化类型</h2><p>在 Scala 中，可以创建单独的函数，也可以创建参数化的函数。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span></span>[<span class="type">T</span>](input1: <span class="type">T</span>, input2: <span class="type">T</span>): <span class="type">Unit</span> = println(<span class="string">s"got <span class="subst">$input1</span> (<span class="subst">$&#123;input1.getClass&#125;</span>) <span class="subst">$input2</span> (<span class="subst">$&#123;input2.getClass&#125;</span>)"</span>)</span><br></pre></td></tr></table></figure><p>没有将 echo()函数的参数类型指定为 Int 或者 String 这样的具体类型，而是将 它们开放为参数化类型 T，留给程序员去决定(具体类型)。记号[T]告诉编译器后面提到的 类型 T 其实不是一个已经存在的命名风格糟糕的单字母类，而是一个参数化类型。</p><p>可以像调用别的函数一样调用这个函数，但是参数的类型必须在调用时决定。我们使用 两种不同类型的参数来调用 echo()函数。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo(<span class="string">"hello"</span>, <span class="string">"there"</span>) </span><br><span class="line">echo(<span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>创建一个参数化类和创建参数化函数一样简单。我们创建了一个类 Message，并延迟定义其字段的类型。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span>[<span class="type">T</span>](<span class="params">val content: <span class="type">T</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">s"message content is <span class="subst">$content</span>"</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is</span></span>(value: <span class="type">T</span>): <span class="type">Boolean</span> = value == content</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字段 content 的类型被参数化了，其类型会在类创建实例的时候决定。is()方法的参 数类型也是如此。和单独的函数不同，我们不需要在 is()方法的定义中放[T]标记。如果这 个方法接受的参数类型不是类层面指定的参数化类型 T，基于同样的理由，我们就必须和前 面提到的一样使用那个标记。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> message1: <span class="type">Message</span>[<span class="type">String</span>] = <span class="keyword">new</span> <span class="type">Message</span>(<span class="string">"howdy"</span>) </span><br><span class="line"><span class="keyword">val</span> message2 = <span class="keyword">new</span> <span class="type">Message</span>(<span class="number">42</span>)</span><br><span class="line">println(message1) </span><br><span class="line">println(message1.is(<span class="string">"howdy"</span>)) </span><br><span class="line">println(message1.is(<span class="string">"hi"</span>)) </span><br><span class="line">println(message2.is(<span class="number">22</span>))</span><br></pre></td></tr></table></figure><p>在 Java 中，<strong>尖括号(&lt;&gt;)被用于指定泛型。在 Scala 中我们使用方括号([])来替代</strong> 。然而，这不是唯一的差异。在 Java 中类型擦除会让范式变得相当脆弱，Scala 在参数化类型 上会做更加严谨的类型检查— 我们会在 5.1.2 节中看到这些内容。而且，我们可以在参数化 类型上加限制— 我们将会在 5.4 节中探索这个话题。</p><h2 id="单例对象和伴生对象"><a href="#单例对象和伴生对象" class="headerlink" title="单例对象和伴生对象"></a>单例对象和伴生对象</h2><p>在处理 static 字段和方法时，Scala 和 Java 有显著不同。此外，Scala 直接支持单例对 象。我们来探索一下单例对象和伴生对象，以及 Scala 对 static 的处理方法。</p><h3 id="单例对象"><a href="#单例对象" class="headerlink" title="单例对象"></a>单例对象</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Marker</span>(<span class="params">val color: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  println(<span class="string">s"Creating <span class="subst">$&#123;this&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">s"marker color <span class="subst">$color</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MarkerFactory</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> markers = mutable.<span class="type">Map</span>(</span><br><span class="line">    <span class="string">"red"</span> -&gt; <span class="keyword">new</span> <span class="type">Marker</span>(<span class="string">"red"</span>), <span class="string">"blue"</span> -&gt; <span class="keyword">new</span> <span class="type">Marker</span>(<span class="string">"blue"</span>), <span class="string">"yellow"</span> -&gt; <span class="keyword">new</span> <span class="type">Marker</span>(<span class="string">"yellow"</span>))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getMarker</span></span>(color: <span class="type">String</span>): <span class="type">Marker</span> = markers.getOrElseUpdate(color, <span class="keyword">new</span> <span class="type">Marker</span>(color))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="独立对象和伴生对象"><a href="#独立对象和伴生对象" class="headerlink" title="独立对象和伴生对象"></a>独立对象和伴生对象</h3><p>选择将一个单例关联到一个类。这样的单例，其名字和对应类的名字一致，因此被 称为伴生对象(companion object)。相应的类被称为伴生类。我们在后面可以看到这种方式 非常强大。</p><p>在前面的例子中，我们想规范 Marker 实例的创建。类与其伴生对象间没有边界— 它 们可以相互访问私有字段和方法。一个类的构造器，包括主构造器，也可以标记为 private。 我们可以结合这两个特性来解决前一节末尾特别提出的问题。下面是使用一个伴生对象对 Marker 这个例子进行的重写。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Marker</span> <span class="title">private</span>(<span class="params">val color: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  println(<span class="string">s"Creating <span class="subst">$&#123;this&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">s"marker color <span class="subst">$color</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Marker</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> markers = mutable.<span class="type">Map</span>(</span><br><span class="line">    <span class="string">"red"</span> -&gt; <span class="keyword">new</span> <span class="type">Marker</span>(<span class="string">"red"</span>), <span class="string">"blue"</span> -&gt; <span class="keyword">new</span> <span class="type">Marker</span>(<span class="string">"blue"</span>), <span class="string">"yellow"</span> -&gt; <span class="keyword">new</span> <span class="type">Marker</span>(<span class="string">"yellow"</span>))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getMarker</span></span>(color: <span class="type">String</span>): <span class="type">Marker</span> = markers.getOrElseUpdate(color, <span class="keyword">new</span> <span class="type">Marker</span>(color))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Marker 的构造器被声明为 private;然而，它的伴生对象可以访问它。因此，我们可 以在伴生对象中创建 Marker 的实例。如果试着在类或者伴生对象之外创建 Marker 的实例， 就会收到错误提示。</p><h3 id="Scala-中的-static"><a href="#Scala-中的-static" class="headerlink" title="Scala 中的 static"></a>Scala 中的 static</h3><p> 在 Scala 的未来版本中，将会引入@static 注解对静态方法和字段提供了支持。</p><h2 id="创建枚举类"><a href="#创建枚举类" class="headerlink" title="创建枚举类"></a>创建枚举类</h2><p>Scala 中创建枚举，要先从创建对象开始，这和创建一个单例的语法特别相像，但 可以赋予多个命名的实例，毕竟，单例模式并不强制只有一个实例，它只是一种对所选实例 的创建的控制方式。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> finance.currencies</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Currency</span> <span class="keyword">extends</span> <span class="title">Enumeration</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Currency</span> </span>= <span class="type">Value</span></span><br><span class="line">    <span class="keyword">val</span> <span class="type">CNY</span>, <span class="type">GBP</span>, <span class="type">INR</span>, <span class="type">JPY</span>, <span class="type">NOK</span>, <span class="type">PLN</span>, <span class="type">SEK</span>, <span class="type">USD</span> = <span class="type">Value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包对象"><a href="#包对象" class="headerlink" title="包对象"></a>包对象</h2><p>首先我们使用单例创建一个例子，然后将其转换成一个包对象，这样做可以帮助我们理解其中的好处。<br>在这个例子中，我们会复用之前创建的枚举 Currency 和类 Money。这是一个名为 Converter 的单例，带有一个 convert()方法，它能帮助我们将钱从一种货币换算成另一 种货币。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> finance.currencies</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="type">Currency</span>._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Converter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">convert</span></span>(money: <span class="type">Money</span>, to: <span class="type">Currency</span>): <span class="type">Money</span> = &#123;</span><br><span class="line">    <span class="comment">// 获取当前的市场汇率......这里使用了模拟值</span></span><br><span class="line">    <span class="keyword">val</span> conversionRate = <span class="number">2</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">Money</span>(money.amount * conversionRate, to)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们在同一个包的类 Charge 中使用这个方法:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> finance.currencies</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Charge</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">chargeInUSD</span></span>(money: <span class="type">Money</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moneyInUSD</span> </span>= <span class="type">Converter</span>.convert(money, <span class="type">Currency</span>.<span class="type">USD</span>)</span><br><span class="line">    <span class="string">s"charged $$<span class="subst">$&#123;moneyInUSD.amount&#125;</span>"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们能够敏锐地观察到:convert()操作对于 finance.currencies 这个包非常基 础，但是 Converter 这个前缀没有增加任何价值。它是一个人工的占位符— 一种噪声。 我们可以用包对象来避免它。<br>包对象没什么特别的，就是一个单例，和 Converter 本身很像，只不过它有特殊的名 字和语法。它使用相应的包名作为名字，并用单词 package 标记。我们把 Converter 重 写为一个包对象。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> finance</span><br><span class="line"><span class="keyword">package</span> <span class="class"><span class="keyword">object</span> <span class="title">currencies</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> <span class="type">Currency</span>._</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">convert</span></span>(money: <span class="type">Money</span>, to: <span class="type">Currency</span>): <span class="type">Money</span> = &#123; <span class="comment">// 获取当前的市场汇率......这里使用了模拟值</span></span><br><span class="line">    <span class="keyword">val</span> conversionRate = <span class="number">2</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">Money</span>(money.amount * conversionRate, to)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="善用类型"><a href="#善用类型" class="headerlink" title="善用类型"></a>善用类型</h1><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>与任何静态类型的编程语言一样，Scala 在编译时验证对象的类型。同时，它不要求明确 标注显而易见的类型，它可以进行类型推断。无论是对于简单类型还是泛型，都可以使用类 型推断。</p><h3 id="简单类型的类型推断"><a href="#简单类型的类型推断" class="headerlink" title="简单类型的类型推断"></a>简单类型的类型推断</h3><p>以下几种情况下，必须要显式地指定类型:</p><ul><li>当定义没有初始值的类字段时;</li><li>当定义函数或方法的参数时;</li><li>当定义函数或方法的返回类型，仅当我们使用显式的 return 语句或者使用递归时1;</li><li>当将变量定义为另一种类型，而不是被直接推断出的类型时，如 val frequency: 2 Double = 1 。</li></ul><h3 id="针对泛型和集合的类型推断"><a href="#针对泛型和集合的类型推断" class="headerlink" title="针对泛型和集合的类型推断"></a>针对泛型和集合的类型推断</h3><p>定义 了几个 ArrayList 的实例，我们先使用显式的类型，然后再使用类型推断。</p><p><code>var list1: util.List[Int] = new util.ArrayList[Int]</code></p><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>尽管可以在 Scala 中使用 Java 的任何类型，但同时也可以享受到由 Scala 提供的一些原生 类型。Scala 在值类型和引用类型之间进行了更加明确的划分，并且通过类型定义进一步增强 了类型验证和类型推断。让我们掌握这些基础类型，因为在 Scala 中，将会经常遇到这些类型。</p><h3 id="Any-类型"><a href="#Any-类型" class="headerlink" title="Any 类型"></a>Any 类型</h3><p>Scala 的 Any 类型是所有类型的超类型2，如图 5-1 所示。<br><img src="/2020/01/02/----81/15777817957416.jpg" alt><br>Any 是一个抽象类1，定义了如下方 法:!=()、==()、asInstanceOf()、equals()、hashCode()、isInstanceOf() 和 toString()。</p><h3 id="关于-Nothing"><a href="#关于-Nothing" class="headerlink" title="关于 Nothing"></a>关于 Nothing</h3><p>在 Scala 中，Nothing 是一切类型的子类型。</p><h3 id="Option-类型"><a href="#Option-类型" class="headerlink" title="Option 类型"></a>Option 类型</h3><p>返回空集合，而不是 null 引用。如果遵循这个建议，我们就不必忍受 NullPointerException 了。即使结果 集合为空，迭代也会变得很容易。在使用集合的时候，这是很好的建议，但是在使用其他返 回类型时，我们也需要类似的内容。</p><p>Scala 进一步指定了可能的不存在性。使用 Scala 的 Option[T]，可以进行有意图的编 程，并指定打算不返回结果。Scala 以类型安全的方式实现了这一点，因此可以在编译时强制 进行检查。让我们来看一个使用了这个特殊类型的例子。</p><h3 id="Either-类型"><a href="#Either-类型" class="headerlink" title="Either 类型"></a>Either 类型</h3><p>当一个函数调用的结果可能存在也可能不存在时，Option 类型很有用。有时候，你可 能希望从一个函数中返回两种不同类型的值之一。这个时候，Scala 的 Either 类型就派上 用场了。</p><h2 id="返回值类型推断"><a href="#返回值类型推断" class="headerlink" title="返回值类型推断"></a>返回值类型推断</h2><p>Scala 是否自动推断取决于你如何定义函数。<strong>只有当你使用等号(=)将方法 的声明和方法的主体部分区分开时1，Scala 的返回值类型推断才会生效。否则，该方法将 会被视为返回一个 Unit，等效于 Java 中的 Void。</strong>让我们研究一下下面这些函数的返回值 类型。</p><h2 id="参数化类型的型变"><a href="#参数化类型的型变" class="headerlink" title="参数化类型的型变"></a>参数化类型的型变</h2><p>在 5.1.2 节中，Scala 阻止我们将一个指向 ArrayList[Int]的引用赋值给一个指向 Array List[Any]的引用。这是一件好事情。通常来说，一个派生类型的集合不应该赋值给一个基 类型的集合。然而，有时候我们需要放宽这一规则。在这些情况下，我们可以要求 Scala 允 许在其他情况下无效的转换。</p><h3 id="协变和逆变"><a href="#协变和逆变" class="headerlink" title="协变和逆变"></a>协变和逆变</h3><p>在期望接收一个基类实例的集合的地方，能够使用一个子类实例的集合的能力叫作协变 (covariance)。而在期望接收一个子类实例的集合的地方，能够使用一个超类实例的集合的能力叫作逆变(contravariance)。在默认的情况下，Scala 都不允许(即不变)。</p><h3 id="支持协变"><a href="#支持协变" class="headerlink" title="支持协变"></a>支持协变</h3><p>虽然 Scala 的默认行为总的来说是好事，但是我们还是想要小心地将派生类型的集合， 也就是 Dog 的集合，看作是其基类型的集合，也就是 Pet 的集合。考虑下面的例子。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> dogs = <span class="type">Array</span>(<span class="keyword">new</span> <span class="type">Dog</span>(<span class="string">"Rover"</span>), <span class="keyword">new</span> <span class="type">Dog</span>(<span class="string">"Comet"</span>))</span><br></pre></td></tr></table></figure><p>如果我们把 dogs 传递给前面的方法，我们将会得到一个编译错误:workWithPets(dogs) // 编译错误</p><p>不能将一个包含Dog的数组发送给一个接受 Pet 的数组的方法。但是，这个方法是无害的。然而，Scala 并不知道这一点，<br>所以它试图保护我们。我们必须要告诉 Scala，我们允许这样做。下面是一个我们如何能够做到这一点的例子 。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">playWithPets</span></span>[<span class="type">T</span> &lt;: <span class="type">Pet</span>](pets: <span class="type">Array</span>[<span class="type">T</span>]): <span class="type">Unit</span> = println(<span class="string">"Playing with pets: "</span> + pets.mkString(<span class="string">", "</span>))</span><br></pre></td></tr></table></figure><p>我们使用一种特殊语法定义了playWithPets()方法。T &lt;: Pet表明由T表示的类 派生自 Pet 类。这个语法用于定义一个上界(如果可视化这个类的层次结构，那么 Pet 将 会是类型 T 的上界)，T 可以是任何类型的 Pet，也可以是在该类型层次结构中低于 Pet 的 类型。通过指定上界，我们告诉 Scala 数组参数的类型参数 T 必须至少是一个 Pet 的数组， 但是也可以是任何派生自 Pet 类型的类的实例数组。因此，现在我们可以执行下面的调用了。</p><h3 id="支持逆变"><a href="#支持逆变" class="headerlink" title="支持逆变"></a>支持逆变</h3><p>假设我们想要将宠物从一个集合复制到另外一个集合，那么我们可以编写一个名 为 copy()的方法，其接受两个类型为 Array[Pet]的参数。然而，这将不能帮助我们传递 一个 Dog 的数组。此外，我们应该能够从一个 Dog 的数组复制到一个 Pet 的数组。换句话 说，在这个场景下，接收数组中元素类型是源数组中元素类型的超类型也是可以的。这里我们需要的是一个下界 。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyPets</span></span>[<span class="type">S</span>, <span class="type">D</span> &gt;: <span class="type">S</span>](fromPets: <span class="type">Array</span>[<span class="type">S</span>], toPets: <span class="type">Array</span>[<span class="type">D</span>]): <span class="type">Unit</span> = &#123; <span class="comment">//... &#125;</span></span><br><span class="line"><span class="keyword">val</span> pets = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Pet</span>](<span class="number">10</span>) </span><br><span class="line">copyPets(dogs, pets)</span><br></pre></td></tr></table></figure><h3 id="定制集合的型变"><a href="#定制集合的型变" class="headerlink" title="定制集合的型变"></a>定制集合的型变</h3><p>如果你是一个集合类的作者， 你也可以控制这一行为，也就是说，如果你假定派生类型的集合可以被看作是其基类型的集 合。你可以通过将参数化类型标记为+T 而不是 T 来完成这项操作，如下所示。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span>[+<span class="type">T</span>] <span class="title">//</span>...</span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">list1</span> </span>= <span class="keyword">new</span> <span class="type">MyList</span>[<span class="type">Int</span>] </span><br><span class="line"><span class="keyword">var</span> list2: <span class="type">MyList</span>[<span class="type">Any</span>] = _ </span><br><span class="line">list2 = list1 <span class="comment">// 编译正确</span></span><br></pre></td></tr></table></figure><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>实现类型转换有两种不同的方式— 编写隐式函数和创建隐式类。第一种方法在 Scala 中由来已久，而隐式类则是相对较新的。让我们一起来探索一下吧。</p><h3 id="隐式函数"><a href="#隐式函数" class="headerlink" title="隐式函数"></a>隐式函数</h3><p>DateHelper 提供了我们想要的 days()方法。我们在该方法中使用的 match()方法 是 Scala 的模式匹配(我们将会在第 9 章中学习)的一部分。因为 DateHelper 是一个常规 类，所以我们可以创建一个它的实例，并调用其上面的 days()方法。但是，真正的乐趣在 于，在一个 Int 上调用 days()方法，并让 Scala 静默地将 Int 转换为一个 DateHelper 的实例，这样就可以调用这个方法了。Scala 只需在一个简单的函数前面加上 implicit 关 键字即可使用启用这个技巧的特性。<br>如果一个函数被标记为 implicit，且在当前作用域中存在这个函数(通过当前的 import 语句导入，或者存在于当前文件中)，那么 Scala 都将会自动使用这个函数。让我们 创建这个隐式函数，并进行流式调用吧:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.language.implicitConversions</span><br><span class="line"><span class="keyword">import</span> java.time.<span class="type">LocalDate</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateHelper</span>(<span class="params">offset: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">days</span></span>(when: <span class="type">String</span>): <span class="type">LocalDate</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> today = <span class="type">LocalDate</span>.now</span><br><span class="line">    when <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"ago"</span> =&gt; today.minusDays(offset)</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"from_now"</span> =&gt; today.plusDays(offset)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; today</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DateHelper</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> ago = <span class="string">"ago"</span></span><br><span class="line">  <span class="keyword">val</span> from_now = <span class="string">"from_now"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  implicit def convertInt2DateHelper(offset: Int): DateHelper = new DateHelper(offset)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TopStock</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">convertInt2DateHelper</span></span>(offset: <span class="type">Int</span>): <span class="type">DateHelper</span> = <span class="keyword">new</span> <span class="type">DateHelper</span>(offset)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> ago = <span class="string">"ago"</span></span><br><span class="line">    <span class="keyword">val</span> from_now = <span class="string">"from_now"</span></span><br><span class="line">    <span class="keyword">val</span> past = <span class="number">2.</span>days(ago)</span><br><span class="line">    <span class="keyword">val</span> appointment = <span class="number">5</span> days from_now</span><br><span class="line">    println(past)</span><br><span class="line">    println(appointment)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="隐式类"><a href="#隐式类" class="headerlink" title="隐式类"></a>隐式类</h3><p>将一个类标记为 implicit 类。当使用隐式 类的时候，Scala 设置了一些限制。其中最值得注意的是，它不能是一个独立的类，它必须要 在一个单例对象、类或者特质中。让我们重新修改这个流式日期的例子，从而使用隐式类。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> ago = <span class="string">"ago"</span></span><br><span class="line">  <span class="keyword">val</span> from_now = <span class="string">"from_now"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">DateHelper</span>(<span class="params">val offset: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.time.<span class="type">LocalDate</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">days</span></span>(when: <span class="type">String</span>): <span class="type">LocalDate</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> today = <span class="type">LocalDate</span>.now</span><br><span class="line">      when <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"ago"</span> =&gt; today.minusDays(offset)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"from_now"</span> =&gt; today.plusDays(offset)</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; today</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TopStock</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">import</span> <span class="type">DateUtil</span>._</span><br><span class="line">    <span class="keyword">val</span> past = <span class="number">2</span> days ago</span><br><span class="line">    <span class="keyword">val</span> appointment = <span class="number">5</span> days from_now</span><br><span class="line">    println(past)</span><br><span class="line">    println(appointment)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> professional skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> software programming </tag>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开局一只狗，装备全靠打</title>
      <link href="/2020/01/01/----80/"/>
      <url>/2020/01/01/----80/</url>
      
        <content type="html"><![CDATA[<p>在开始这一篇的日记的时候，我居然因为今年一个倒霉催的开局，想到了这么二呼的一句话 ，其实吧，在这个时候，我也还在熬夜加班，等待着同事们在处理新疆网信办服务迁移的事情 。</p><p>过去的每一年，我都特别期待每一年是一个全新的自己，而今年，就如我上一篇日记所说的我并没有特别的期待新年，因为很多事情已经在12月份做好了准备，而2020年我相信一定是我特别有收获的一年。</p><p>其实细细回望过去，每一年我都很有收获。虽然我也怨恨过很多事情，但是发现自己被眷顾的事情也不少。有一个美好的妻子，可爱的女儿，以及不近不远的各种人际关系，使我的生活不会喧嚣，淡也不至于孤独和寂寞 。</p><p>岳父和岳母的关系没有缓和的迹象，而生活需要给予他们的是一定的决断。男人这种东西，其实没有太多出息，岳母花费越多的心思去追寻男人，男人就是会嫌恶的更多。为什么这么清楚这个情况，也是我自己也是男人啊。</p><p>最近又开始学习scala，针对上次的kotlin语言学习写了一个oss，golang写了一个proxy。scala也需要寻找一个全新的代码开始执行，要考虑使用vcc还是ass的权限组织架构生成来处理，实践才是学习的最快的方式。</p><p>答应星爷这周去道馆报道的，衣服裤子也都洗了，好像也没有更多的理由去逃避了，这周六就开始恢复练习吧 ，也不枉费自己其实也练习了挺久的素振练习。再者，自己的这身肉，我也是扛不住了，在下真的是太肥了 。</p><p>现在是2020年1月1日3:28分，一个并不完美的开局，却给我最好的感受，并没有过去的那种雄心壮志，也没有颓废的无法开始，学习，看书，记账，把自己整理的井井有条，在衣着和品味上也不断的提升。一个全方面提升的自己令自己感到安心，当然，我还是可以做的更好一点，但是如果陷入这种可以更好的思维，反而容易泥足不前。每一天1.01，要远比0.99好的多，要牢牢记住。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mood </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>年底的颓废状态</title>
      <link href="/2019/12/18/----79/"/>
      <url>/2019/12/18/----79/</url>
      
        <content type="html"><![CDATA[<p>每年的12月都是一个神奇的12月，都会陷入两种焦灼的状态在反复并行：</p><ul><li>其一：认为已经到了年底了，做什么事情都没有干劲，有事情等到明年再说吧。</li><li>其二：又过了一年了，不能再作为那个颓废的自己了，开始寻找各种工具，计划，目标，要把自己变成更厉害的那个自己。</li></ul><p>当然从结果上来看，很明显第二点是没有做到的，毕竟到现在的我，还是那个颓废的自己。只不过今年有一点点的变化就是，我变得有点老迈。这个老迈不是指身体上或者心理上的，而是念旧上的。开始整理自己的笔记，整理自己的周围，整理自己的财物，仿佛要把自己的一切都整理下来，保留下来，记录下来。这种东西，我称之为一种老。老是贪得无厌的开始，年轻的人，从来不怕失去，而且年轻的人特别希望卸下自己的负担，因为这个世界有太多的东西可以去争取，过去的东西只会成为自己的累赘，而老了，就觉得获取越来越难，对过往就越来越珍惜，越来越觉得无以为继。</p><a id="more"></a><p>面对2020年的期许，和过去还有一点不同的就是，过去总是从新的一年第一天开始，而现在，却是从上一年的最后一个月开始的。这个事情多还是有赖于我使用了国誉自我的手帐，虽然说到现在为止也不过坚持了三周多的时间，还有很多地方写的并不是那么让人满意。但这也是我这种没有耐心的人坚持最长的一本手帐了，真的也是特别的感慨。很多事情开始降低自己的期许，反而变得越发容易坚持，而坚持这件事情，本身就具备足够多的意义。今年如果我能完整的记录完一本手帐，那我算是给自己33岁的人生留下了一份记忆，后续的每一年我都可以坚持下去，这就是一本流水账，然而，谁又能说流水账没有意义呢，帝王的流水账就是起居注，我的流水账对于未来的我，也是一份财富。</p><p>而后对于生活我还确定了稳定的几项生活必备的工具：</p><ul><li><p>苹果全家桶体系：帮助我解决所有3c产品同步的问题，所有不具备这个基础条件的事物都会被排除且不用多做考虑</p></li><li><p>滴答清单：过去的我认为日程必须井井有条，必须满满当当。但是每次都会因为自己生活记录的都是琐碎的事情而放弃，我不是什么大人物，生活也没有紧张到那个份上。但是现在的滴答清单对于我来说，更多的是一种事务提醒，而非是把自己绑架成时间的奴隶。设置的也多是重复的事务，来保障自己不要忘记必须做的事情。这样对于自己的管理我认为是恰到好处，没必要增加自己无意义的负担。</p></li><li><p>mweb：挑选了多种工具之后，还是会感慨真的没有任何工具是特别完美的，都是有取舍的。mweb支持表格，支持快速导入图片等功能对我来说还是战胜了所谓的编辑多格式和导出多格式的ulysses。并且将自己qzone上所写的文章全部搬家到了github上，创建了自己的全新博客。断断续续其实过去还是写了不少文章，我一直以为我写文的巅峰时在10年前，后来发现自己10年之后的文章才尚且有点质量。现在我希望能继续保持这份，可能真的能磨练自己的文笔也说不清呢。而现在写的这篇，也是我在这个平台上第一篇博客。</p></li><li><p>国誉自我：前文已经提到了起居注形式的内容存在。每日的流水账记录最多的就是睡觉时间，每天都用来大段大段的时间来睡觉，这显得自己一点都没有出息，但是没有出息也要面对自己的没有出息，面对它，那就是真实的自己。</p></li><li><p>money pro：这个工具我还没有购买，也还在犹豫是否需要购买，但是过去这么多年对于金钱没有管控，而导致自己和老婆多年也并没有针对财务获得多大的益处。现在是否也需要认真的面对自己大手大脚的行为。无论最终是否决定是这个工具，也依然决定未来的一年我要对家庭经济的全面管控。如果发现最终消费最多的是自己，那我也要诚实的面对这个事实，然后加以改正。</p></li></ul><p>上述看了很多问题，其实最终发现很多事情无法坚持，其本质都是无法面对那个自己。对于自己充满了过多的期待而因为无法实现最终就会导致无法面对。而2020我还有很多很多的期许，比如剑道，比如早起，比如读书。这些事情都会慢慢的被安排上日程，虽然现在还在艰难爬行，但是启步艰难是每一次行进的必然。而开始了不要放弃才是后续对于自己的唯一心法，万物皆空，唯有一心不散。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mood </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对习惯的戒心</title>
      <link href="/2010/11/06/----78/"/>
      <url>/2010/11/06/----78/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-11-6 06:06</p></blockquote><p>这次互联网大战,其实是个很好的契机.能够让大家觉醒与依赖是一件多么可怕的事情,而这些依赖性不过是出于某种习惯,如果能脱离出某种工具本身来看待自身真是的需求,则会发现我们并非如此的依赖一个东西.</p><p>从无到有一直是如此容易,从有到无总是困难的.但其实身来就是无,为何我们的生活依旧过的很好.为何要被一种无聊经济绑架.最近常常反思自己在网页游戏上浪费的时间是多么的多.这种无聊经济创造的价值又被谁吸收的干干净净.</p><p>腾讯从过去的OICQ的瘦企鹅到现在肥头大耳的QQ.其实从来就没有摆脱抄袭的道路.只是学会了别人的技术还能做的比别人更好,这确实是本事.模仿不是罪孽,商人追逐利益最大化也没有错.可惜你的做法是错的.</p><p>我似乎天然就在追求一种自由,一种心境和精神上的自由.为此我很长时间都觉得身无长物是一件乐事.因为那样我不会患得患失,没有就从来不怕失去.但即使得到了,也不见得我无法承受失去的痛苦.因为束缚感令我很不愉快.其实绝大部分的人也许都是如此.我们对于整个世界的不满也许就在于世界束缚了我们不让我们随心所欲.我并不想世界按照我的指引去前进,我只是想世界不要过来指引我而已.</p><a id="more"></a><p>人总是充满了惰性,要主动去改变自己的生活习惯总是非常困难的,所以如果有人强迫你离开这种依赖,你应该欢呼雀跃.主动不够勇敢的时候,有人拿枪顶着你你就应该觉醒.不要把鸡蛋放在一个篮子里.这话不只适用于经济学.而对于自己生活上所依赖的东西,你也可以分散在不同的地方.那样一旦出现裂变,你的伤痛就比别人小的多.</p><p>其实又岂止是互联网,其实发生在生命中一切物欲上的依赖都应当有所警惕.你有可能一天失去这里的所有.有人说了在这个体制下没有人是安全的,其实在这个世界本就没有人是安全的.追求心境上的平和有多种方式.无欲则刚,这话真是浅显易懂.如果能因此事件,有所警惕.不得不说这是一件功德.世事的浮华侵蚀人群总是令人怵不及防.</p><p>这是在qzone最后一篇文字,以后我会移居一个极少人知道的地方继续写字.突然很想毫无意义的对着写了这么久的地方说当年聊天室里面/bye命令的话：青山不改 绿水长流 我们后会有期:)</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>悬崖的三五步是安全的</title>
      <link href="/2010/10/11/----77/"/>
      <url>/2010/10/11/----77/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-10-11 02:31</p></blockquote><p>标题借用李敖的原话，近来看它的节目，发现自己对于这位老人过去的感触错的离谱。如果不能持续的看大量的他的节目，进行贯穿的话，很容易对他产生误会。就如他在节目外的原话一般，做李敖有话说就像是早泄，只有二十分钟的时间中要说的话实在太多，还没有说完，节目就结束了。所以他的很多言论，思想其实都散布在一个个节目当中。只有细细品味，才能感受到这个老人其实并不张狂，而只是真的有些话想要说而已。</p><p>宪法中保障的每个人都有言论自由，我们的国家加入联合国的时候在世界人权宣言里面所签字的就是赞成人们有言论自由。对于这一点，似乎大家都认为是笑话了。因为在这个国家中，感受到的就是无时无刻的不自由。我们不能随意发表自己的政治观感，不能随意的接受到世界的资讯，中国的互联网被称为世界最大的内联网，中国的搜索引擎的结果永远是关键词屏蔽的结果。在这个处处不自由的国度里，只有消费是自由的。只有你拥有金钱，你将可以享受到这个世界任何角落发达国家同等的消费自由，这也许就是我们这一代浮躁的盲目追求名利的原因之一吧。我们的国家的维持并非以民主选举来保持社会的稳定，而是以经济带动的模式在让这个国家向前走。在一个暂时不能谈“民主”的国家中，似乎言论自由也并非如此必要。</p><a id="more"></a><p>在此可以先讨论一个问题，言论的自由是否有一个标准。我们这样一个网络的时代里，并非戒严期间。就算每个人都感受到了诸多限制，但也必须得承认我们还是有一定说话的权利的。只是这个说话权利受到了一定的限制。这个限制的线又在何处？这条线是由谁规定的，如果有这条规定，那么究竟是中央政府，地方政府，还是某些机关单位自己的自作主张呢。说个大跃进时代的笑话吧，毛泽东出访苏联，苏联告诉他说我们国家花了二十年的时候就超过美国。毛泽东大受刺激，回来后对下面说，苏联老大哥花二十年就超过了资本主义国家的老大，我们怎么着也得超过资本主义的老二吧，我们必须十五年超过英国。这个任务下放到省，中央说十五年，你不好意思给中央丢脸吧，怎么的也得提前几年，那就十二年吧。这么层层的往下压，我市九年，我乡六年，我县三年，我村今年，之后便是错误的大跃进时代，在此亦不展开讨论。回归到正题，对于言论自由的标准，是否也有这种层层压制的可能，中央提出了一个概念，但落实到地方和机关甚至是人去操作的时候，不同的人对于一个概念就将有不同的诠释，这种诠释有时则有可能离经叛道。这种行为也许是善意的，只是为了他们的理念，维护国家的安定团结而做出的行为，但有时显得过于敏感和小心，言论越过悬崖的界限，其实并非处在你们限定的那条标准上。</p><p>言论自由是很重要的，但消息的传播的管制却也是必要的。新闻的传播是标准的有教无类，当你无法控制受众的群体时，你必然要从源头控制这个言论的自由。如果认为任何东西只要是真实的所有人就应当就有知情权，那么富士康的自杀事件和杀童报复社会事件就不会如此密集的出现的一段极短的时间之内。这种心理上的传播对于心中有异的人群，是让他们寻求到一种发泄的出口，而这种出口明显是错误的，但却由于没有管制，将这种错误的思想植入了那些人的心中，并暗示他们这可能是可以宣泄自己黑暗的一种方式时。传媒必将为这个所谓的言论自由付上责任。言论自由不等于胡说八道，言论自由也不等于肆无忌惮，前年环球时报上一篇文章，所阐述的观点即是：中国并非是个言论不自由的国度，而是言论自由过甚的国度。当然写这样的文章必然遭到很多的人反对和嘲笑。但很多人都没有细细品味这篇文章的含义。我们国家有太多了借着言论自由而胡说八道不负责任的人。文章列举了很多事例来比对中外同样情况发生之时，我国的人们并不为此付出任何责任，而外国却要为此道歉乃至下台。对于言论要负责的并非全是政治言论，对于经济，社会等等难道就不要负责任吗？想想我们国家有多少砖家放出的疯语，他们可以说：为了拉动内需，这个时候买房就是爱国。也可以说：查处低房价，是为百姓负责。还可以说：春运的一票难求是由于票价太低。这些昏话比比皆是，那么要在这个国度阐述自由主义和言论自由，这些人是否应当优先拿板砖将自己拍死？</p><p>我说这些并非是要因噎废食，只是想说，在谈论言论自由这个议题的时候，是否视野应该放的更广一些。不能强求这个国家一步到位的走向胡说八道的地步，这样的言论自由其实才是真正的言论不自由。因为当自由成为一种乱流的时候，真正正确的声音往往难以被听到，难以被发现，当需要我们真正凝结成一股力量的时候，我们却因为很多似是而非的言论而导引向错误的方向。如果你们真的言论那么重要，是否首先能够加强自己的知识以及修养，然后在大家需要你们的时候，发出正确的声音。当每个人都可以谨慎的发出自己的声音，并将为自己的声音负责的时候，那么言论自由对于这个国度将有着更加积极的意义。也请到时候我们的朝廷能够明白，那个叫言论自由的悬崖，悬崖边的两三步并不危险，不要如此的急于“保护”我们，那个地方非常的安全，不要妄自的给予我们限定界限，我们也必将懂得哪里才是真正的悬崖，并在那里闲庭信步。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百花缭乱</title>
      <link href="/2010/10/06/----76/"/>
      <url>/2010/10/06/----76/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-10-6 14:14</p></blockquote><p>从现在这一分钟起,可以学习如何耐的住寂寞.</p><p>记仇什么的最没意思了,我才不记仇.我只是会忘记对你的好,忘掉就好了,记仇是很难的,但仇恨的那一刻对自己植入一个想法就可以忘掉如何对你好,这样看来是不是很方便的方式.我看起来不错嘛~~那就这么做,从这一刻忘掉如何对你好.开始记起如何对自己好.</p><p>昨天才觉得生活好的连多愁善感的时间都没有,今天却有大把时间可以用来多愁善感.以此看来是否多愁善感不过是牵动的那一丝联系上.联系着你我的生活让我没有感觉到飘浮不定的情绪.而今天却全部回溯到身体的每一个细胞.这种飘忽啊飘忽的情绪.靠别人来怜悯是没有作用的.在每个街头的争执也不会换来下一次面对生活更加优越的快感.不如节省点这点情绪.</p><p>要读的书堆积如山.要做的事也一样.但想做的事情却只有一样,就是现在没有办法做的事情.这种矛盾只能跟随着耳机的嘶吼来缓解.或者在这里胡言乱语来抒发情绪.下一刻我一定会把这满纸荒唐给忘的干干净净.明显,我的记忆力不好.如果记忆力太好,就会自己绕不过自己.但是记忆力太不好.再想起来就无法原谅自己的愚蠢.这点,真矛盾啊.</p><a id="more"></a><p>140字的限制真是讨厌,连一句完整的话都没法表述.140字的限制真是讨厌,原来不是我不是没有140字的埋怨要发泄.是那140字根本装不完我的苦闷.微博什么的，我还是没有入门学习去如何玩。所以我还会继续写我的qzone..写我的闲篇,不知所云.没有开头,没有结尾.没有指代,没有意义.</p><p>话说我公司楼下有一只独眼猫霸.一般猫遇人均争相躲避.唯独它一只横在路中间动都不动.如果你抬起脚来驱赶它.它也只会给你让开几步.然后再慵懒的趴在那里不理世人.下班回家,偶然会碰到一小女孩从家中拿出牛奶来专喂猫霸,让其余的猫都羡慕不已.不知道猫霸那略显惊悚的长相是如何吸引到小女孩的特殊对待.也许是猫霸身上的气质让这个小女孩和我一样对猫霸着迷不已.这个世界仿佛都欠着猫霸的,它趴在路中间享受着它的阳光,周围的人群熙熙攘攘,但却和它无关.它不用像狗一样对人主动示好,也不像一般猫一样对人敬而远之.它走在属于自己的道路上,印下那一路的梅花印,还有它的桀骜不驯.</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三坊七巷是什么？</title>
      <link href="/2010/10/02/----75/"/>
      <url>/2010/10/02/----75/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-10-2 01:14</p></blockquote><p>星巴克入驻从很久以前就开始炒作，直到几天前正式营业。各种各样的粉丝和猎奇者在其门口排起了长龙，据传闻还有星巴克的铁杆粉丝穿梭于各地的新开张的星巴克秒杀各种城市杯的传闻，对此唏嘘不已。</p><p>我必须承认的一个事实就是，我一点都不懂咖啡，不懂的程度到，只要你给我加足奶和糖，不让我忍受过多的酸苦，我就已经很满意。但是对于星巴克这样名目的进入我们所谓的文化古街，不得不有微词。三坊七巷的仿古建筑本身透露的就是一股子低俗的品位，执政者似乎完全没有艺术品位和文化涵养。一味的追求于看起来像是古代建筑这种风格在走形式。而其中不得不悲哀的就是这种造假造谣的建筑立面还充斥着各式各样令人恶心的内在。从地方特产到酒吧咖啡屋，好似全无主张和规划。有人说我们现在已经面临了一个新的破坏古迹高峰的时代。犹如第二次文化大革命，其区别只在于当时的人们破坏古迹还是为了理想，而现在的人们为的只是利益。而面对这样的行为无能为力的我，只能每每走过都找不到自己小时候住家的悲凉。</p><a id="more"></a><p>对于文化的保存，很能看出一个地方执政者的涵养和品位。在这里也许我们会炮轰星巴克为何变得如此不伦不类，但却不应该忽略其一个基础问题，就是场地的管理者为何会放星巴克进驻三坊七巷。在商言商，星巴克只是追逐人流的开在人流量多的地方，这本无可厚非。这并非是单纯的星巴克不伦不类，而是管理部门究竟想三坊七巷塑造出何种文化形象。一家商家会选择自己适合的地段，以配合自己商家的形象和品位。北京的半岛酒店不会让永和豆浆进去开业，香港的置地广场也容不下麦当劳，哪怕其能够出到再贵的租金。三坊七巷从重建开始就没有一个较为有远见的思想和意识，本身并无限定其应有的形象和文化符号，而只是单纯的看到谋利二字，且是非常肤浅的短线操作。福州人对其的态度也不过是哄骗外来游客的一条街道而已。只是面对现在全国这种古街造假成风的现象，不知道这种同类质的造假又能哄骗的了谁。是否当谁也无法哄骗的时候，就让星巴克入驻其中为本地消费市场打开一条新的道路。</p><p>三坊七巷的现状，并非一家星巴克的问题，而是整条街存在都与这个城市格格不入。它的存在并非是一条黄金地段的商业街如此简单，而是承载了福州人对它更多的期待。在这份期待之下，三坊七巷表现如此，不过是它根本不知道自己究竟是何物，究竟是条繁荣的商业街道，抑或是标准的文化古街？在商业利益和文化期待面前，三坊七巷也只能不伦不类的继续存活下去。只有等到哪一天真正有远略的执政者，推翻一切从新来过，也许才能还苟延残喘的三坊七巷以本来面目。当然，不排除推翻重来也不过是另外一次的不伦不类罢了。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谓之纯真</title>
      <link href="/2010/09/20/----74/"/>
      <url>/2010/09/20/----74/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-9-20 10:06<br>对于我的电影审美，用最简单的形容方式就是：bin-bon-bian-bon-bon.所以像山楂树之恋这样的片子，我实在是看不进去的。不过这个号称“史上最干净的爱情故事”倒是确实值得玩味。</p></blockquote><p>对于纯爱这个名词，要定义似乎并不困难。列举再多的条件，其可以总结在四个字之上：“超凡脱俗”。当你的爱情一切与世俗隔离的时候，不再考虑性，金钱，门第之类存在于世俗层面上的东西，再配以精神上对于爱情恒古不变的追求和忠贞，那么也许你就能达到一个纯爱的标准。那以一名著的人物来看待这种纯粹追求爱情，似乎贾宝玉很合适吧。但是做这样的人物是要有资本的，而且有极大的资本。首先不用谋生，这点自不必多说，其次天赋异丙，谁能出生就含块玉呢？再则，社会体系中最高的当局必须支持你，红楼梦中的贾母是支持宝玉的。处在这么几个条件之下，你才有可能去追求所谓的纯爱。然则试问，一个人处在如此优越的条件之下，他也并非不在世俗之中，而是世俗达到某种极致之后，也就是纯爱出现之时。那么纯爱，不过是一种奢侈品。纯爱一点都不能成为批判社会爱情观沦落的象征，反而是爱情观沦落到极致的一种表现。当一切生理，物质的追求都得到满足了，就开始追求精神上难以满足的一种追求。这种难以满足的追求，让那些不为世俗所扰的人孜孜不倦罢了。</p><a id="more"></a><p>其实生活中，我们一直很现实。这种现实，并不会被灌输上不道德的层面。然则对于爱情过度的崇拜，却把很多生活中正常的事物归类于不道德的产物。精神追求不应该和物质追求是处在一个对立面之上，而是一种相互填补的过程。正常人的需求都不会单纯的是物质或者精神这么单纯。那么既然这是一种硬币的两面，都是一种需求，又为何会被冠以道德不道德的名义。一般而言，精神追求是一种较物质追求更深层次的追求。而批判这种层次追求的人又分为两类，一种是已经满足浅层需求，一种则没有。满足的人对于还未满足的人说三道四，这明显缺乏厚道。而后一种则更加有趣，出于嫉妒的心理，去指责别人世俗，而自己却又不愿意依靠努力去实现这种浅层追求。于是就搬出更深层次追求的高度来对人横加指责。仿佛是要体现出自己出于道德制高点上的优越感。俗不知两种追求本身就没有高低之分，只有内外之别。每当此时，我都会想再次引用那段话：长久的沙漠生活,只使人学到一点好处,任何一点点现实生活上的享受,都附带的使心灵得到无限的满足和升华.换句话说,我们注重自己的胃胜于自己的脑筋.——三毛《素人渔夫》</p><p>这几年，社会失去了很多玉女偶像。且不谈这种玉女偶像是否本身年龄界限对于维护这个玉女的形象已经接近崩溃的边缘，就接连在于他们身上发生的事情，也足以使这种形象破灭。网络上最可笑的言论就是：她们居然也有这一面。这句话到底什么意思呢？是否作为一个偶像，她将不再吃喝拉撒，她将不再交往，做爱，结婚，生子。无论一个人身份为何，都还是建立在一个人的基础之上。八卦杂志就以拍明星的某个瞬间丑态为乐，每个人都或多或少会碰到某些状况，而这些照片却能满足八卦读者平衡心理的良药，相较之下八卦读者应该是这个世界最好满足的一群读者了。因为只要给他们看一些“人之常情”，就能够带来他们精神无限的升华和满足。如此道来，八卦的杂志也算是一门功德事业了。只不过为何有这么多人存在于这种幻想的迷思之中，需要八卦这么浅显的杂志来点醒人的心智，让我十分疑惑。</p><p>回溯到这部电影，与其说塑造一个精神上的“纯”，不如说塑造了一个现实中的“伪”。也许这种纯真只可能存在于父母辈中被美化的记忆里面，却留给了我们后世无限的哀思和遐想。为了这份本不存在的场景，只好去虚构当年一份纯真美好的画面。只是这份“纯”，已经离“真”很远而已。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与天使打交道</title>
      <link href="/2010/09/12/----73/"/>
      <url>/2010/09/12/----73/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-9-12 06:48</p></blockquote><p>长久以来，我都觉得小孩是最接近天使的生物。现在想来，这几乎是一种偏见的思想。很多研究都表明小孩生来就会骗人，会观察父母的脸色来哭闹来达到自己的要求。而为什么对孩子会对此有如此的好感，可能是对于那份直率有着莫名的好感。长大了之后我们已经有很多事情不再敢说，不再敢表达了，不过这是否因为这个社会本身就给予了孩子直率的空间才使得孩子能够如此“放肆”？我们更加容易原谅孩子的莽撞和冒失，而对于身边的成年人会更加的苛求而已。</p><p>在多数的时候，我们似乎总会忽视一个特性，就是小孩的残忍性。前段日子看到有个QQ投票写的就是小时候做过的残忍事情，八成以上你都做过。回头想起来发现自己孩时做过残忍的事不胜枚举，而现在想来如此残酷的对待一条生命近乎于不可思议？在当时并不自觉。轰动的校园杀童案件有着一个非常明显的特征，就是那些疯狂的人专门对着孩子下手，犯罪现场是有成年人在场的，如果只是报复社会的无差别杀人，并不会忽略这些人，但这个杀人狂可以直接选择略过大人而直取小孩。这一点从心理上是对比自己弱势生物的一种凶残，而这份凶残在小孩身上同样有体现，孩子会天然的对于昆虫等这种比自己还要弱小的生物表现出凶残而缺乏怜悯。不清楚这种算不算人的一种本性，孟子曰：人性之善也，犹水之就下也。然而这个逻辑之中有一个天然的缺陷就是，人性之恶也，犹水之就下也。也就是这句话反过来说的时候是同样成立的，如果一个两面的观点都能成立的例子，是否还能够支持一个如此基础性的哲学思想。诸子们对于论述并不在行，习惯于举例子来印证道理，但有些引用的也并非恰当。</p><a id="more"></a><p>最近看少年犯罪的书籍，对于法律产生了新的迷惑。我们在孩时都拿到过一张叫做未成年人保护卡（证？），当时未成年人保护法的创立被誉为法律的一大进步。而我拿到这张卡的时候对此是非常疑惑的，我并没有记住这中间可以为我带来多少的保护，而我深深的记得是它把未成年人分割成不同的年龄。而这个年龄是犯罪的年龄，你于多少岁以下犯罪不受罚，多少岁以下轻罚。十三岁的时候我会对着这张卡片默念叨，如果这个时候我要杀人的话，我是不用负责任的，十四岁的时候我会遗憾，我已经十四岁了，我已经开始要负一部分责任了，乃至快到十八岁的时候，我会告诫自己，不能做出任何出格的事情，因为你马上就面临着全部的刑罚。回过头来看这个法律，结合我上面提到的，小孩的凶残更习惯于对待比自己更弱小的生物进行施加。那么少年犯罪有相当大一部分，被施加犯罪的对象同样是未成年人。法律对于成年人施加在未成年人身上的犯罪是要重罚的，而同样是未成年人对于未成年人的时候，这个惩罚却显得非常微薄。这一点上是否有着严重的矛盾？其实未成年人保护法的存在本身就很值得玩味，因为任何人伤害别人的时候，都应该受到法律的制裁。那么为什么要产生一个未成年人保护法这样的东西，如果深入思考一下就可以明白，这部法律居然不是用来保护受害者的，而是用来保护加害者的。就是说，这部法律更着重于让未成年人有改过自新的机会，让他们生命重新走上正常的生活轨迹而存在的，也就是一部少有的站在加害者一边的法律。对此也许会有人对我的论调不以为然，因为未成年人本身就不属于完全行为能力的人，所以他们对自己行为并不能完全负责，应该给予更多的宽容。然而就像我说的，这种法律问题不只是如此，这还挑战了我对于法律的一个神经：即法律面前人人平等。这个法律有很明显的间隔，就是14岁，16岁，18岁。这种划分从我的角度来看是相当不负责任的，因为可操作性能问题，犯罪的时候单纯的以年龄划分，其实不过是一个偷懒的方式而已，举个例子，一个差三天十六岁的孩子犯罪和满十六岁的孩子犯罪，他们面临着刑罚就是完全不同的。而谁有告诉我他们在行为能力上有着多少的差别呢？其实这点上并非不能区隔，我们在判定成年人犯罪的时候都应该去区分成年人的心理状况，但我们对于未成年人却简单的用年龄一刀切割，是否显得如此草率？我们难道不能够正确的区隔一下孩子犯罪时的动机是否属于自主意识的行为？说孩子不懂法律那更是扯淡，成年人非专业人士的也不懂法律。如果这点都可以说事那么大家都可以以此为借口来逃避法律的制裁，顺带一提的是，我对于精神疾病患者犯罪就不受罚也有微词，但这个不属于本文讨论的范畴了。</p><p>对于这样的法律存在，我感到一丝隐忧。这是否像我们纵容孩子天真那样在纵容孩子的犯罪呢？再过个三四年，我应该也会当上父亲，如果有别人家的孩子对我的孩子做出不可饶恕的罪行。我是否能够用他是未成年人这样的理由来说服自己？我很清楚国家的暴力机关是为维护法律的，因为法律是可能代表“正义”。但是法律是可以被不断修改的，由于能够被修改，就说明这并不是一个相对完善的“正义”。为了一个并不相对完善的事物而让有些人付出了惨痛的代价是否合理。请不要告诉我冤冤相报何时了这样轻松的话语，我认为法律应该更多的站在弱者和受害者的角度上看待问题，不是过多的去考虑加害者是否有改过自新的机会。过多的讲述饶恕，却忽略了那些被害者的心情。有些伤痛，是永远也弥补不回来的。而我对于加害者的心态是很简单的，如果你不明白别人的痛苦，那么就让你感受一次同样的彻骨之痛就好。</p><p>　　如果法律不可以制裁你们，请别得意忘形。因为正义的利刃从来都不会生锈，只是它将由不同的方式从天而降罢了。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挥之不去的伤感</title>
      <link href="/2010/09/05/----72/"/>
      <url>/2010/09/05/----72/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-9-5 13:23</p></blockquote><p>受到好多负面情绪的冲击，有些不值一提，但有些却值得铭记。</p><p>向所有为这片土地洒过热血的先烈们，后生在这里向你们叩首，阿Q并不代表民族性，狼图腾那种法西斯也不值得学习，而你们我抱以深深的致敬。谁认为中国缺乏尚武的精神？希腊人还在做梦在神话里交配的时候，我们已经在几十万的战场上互相坑杀了，这是个早熟的民族，什么样的腥风血雨没有经历，什么样的权谋斗争没有使过。过早的流干了鲜血，过早的见识了这份残酷。当然会变得谨慎，当然会变得惧怕。人命不再是数字的概念，每一个生命都值得尊重。自上而下的教育应该埋葬，不要再喊为了集体的利益而牺牲个人，如果总是如此，那么到底什么是集体的利益？是否满足某些少数的私欲就是所谓的集体利益？集体中包含着每一个个人的利益，只有当所有人的利益都得到了保障，才有所谓集体利益的存在。没有什么大公无私，只有确保了每个人的“私”，才能实现所谓的“公”。</p><a id="more"></a><p>国虽大,好战必亡,天下虽安,忘战必危。前几天韩国货轮撞沉我国的渔船，我们的外交部继续和播报器一样说着：我们严重关切，我们严重交涉。永远都是这种话让人感觉外交部是否做的太容易，没事就慰问，有事就关切。翻来覆去如此，如何不让国人认为这是种无能的表现。即便做了什么具体工作，却也觉得这些不足以对国人说道。总是认为政府是保姆型的政府，可惜却不明白要做保姆型的政府，那么对于政府的道德要求是非常高的。如果你要做保姆，那么你就必须是圣贤型的，问题是现在国家混乱不断，正道消息从不流露，那么小道传闻自然漫天遍野。这些传闻自然有损于人民对国家的信心，对国家的期待。现在国民有种意识，我们强大了，我们不再受欺负了，百年积弱总算轮到我了，就像有人穷了一辈子的人突然中了五百万，其心理问题是必然补偿过去所有的辛苦，将所有没做过事情都做一次，“好你个高丽棒子敢撞我们船，不揍你不知道谁是爷了”。这种思想的危险，这种情绪的浅薄。但是又是谁教导了人民这种土财主的思想呢？不就是所谓的正统传媒天天报道的祖国强盛了，祖国领导都很忙，祖国想揍谁就揍谁。愤青就没想过一旦开战，石油管道立刻会被切断，我们的石油储备只能坚持七天，我国石油战略储备计划根本没有完成。汉武帝集六十年之力才敢言犯我强汉者，虽远必诛。我朝有什么，改革开放三十年前二十年在梦游开会，后十年在生产裤衩娃子和芭比娃娃。GDP全是没有国防力量的GDP。号称世界第二的GDP？美国的科技，英国的金融，德国的工业，中国的芭比娃娃。如果这也能并列的话我只能说最后我们依旧要靠我们的血肉继续组成我们新的长城，然后再忘恩负义的对战后可怜的老兵不闻不问。只是有了现在心寒的境遇之后，不知道我们民族是否还有像先烈一般的人愿意挺身而出去组建血肉的长城了。</p><p>一寸山河一寸血。最近看民国史，学生的游行，工人的罢工，花魁的宣传，军阀的抗争，全都是最最普通的面孔，虽然被人有种无意识的导向，唆使。但是满腔的血性，则让我看到了中华的魂魄。我绝不认同什么抗日战争如此艰苦是因为汉奸太多，更不觉得我们的先烈打的战争是可耻而失败的战争。我们在抗战换取了世界的尊重，就是但这样的尊重，又是建立在怎样地基础上？成千上万的士兵阵亡，成队成队的士兵殉国。一寸山河一寸血，这是民族最悲壮的口号，是无数国军用生命换来的。而我们到现在为止不要说没有搞清楚他们每个人的名字了，连我们的数字都没有搞清楚。日本的靖国神社你可以仇恨，但他们每一个阵亡将士的名字，事迹全部的记录在案。而我们连数字自己都能吵的不可开交，南京大屠杀日本根本不承认有过这种罪行，因为你说我杀这么多人那你统计出名字来告诉我确实死亡这么多人，而这个工作又有谁去实现了。国家在抗战中直到美国参战后才对日宣战，而根据日内瓦公约，没有宣战的国家是没有战俘这一说法的，所以在很长的时间以来我们的被俘的将士都被日本人虐杀到死。而这里到底有多少人根本不清楚，不清楚到精确到百万这个计量单位都精确不到。为什么没有去做，是不能，还是不想？为什么不想？数十年过去了，孟良崮那还写着“击毙张灵甫之地”，每闻与此，只能伤感。</p><p>九月三日那天，QQ消息弹出对每个抗日老兵补助三千多元。我轻笑了一下，思维很自然的反应是每个月不足三百，还不是年年都有。现在还有多少的抗日老兵呢？真的是走一个就少一个了。我们造个铁裤衩一百亿，公款吃喝每年九千亿，我们的老兵补助三千块。呵呵，Good Job !</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，花脸道</title>
      <link href="/2010/08/25/----71/"/>
      <url>/2010/08/25/----71/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-8-25 05:22</p></blockquote><p>为见证时间的过去，为见证自己的成长，干杯欢呼。我和你比，你已经死了，我却超越了。</p><p>这么写好像和前天的说法完全的相反，不过当我回顾《你好，花脸道》的时候，发现现在穿越真是一个好东西。当然基本都是穿越过去，而不是穿越未来。因为未来在几年内就会被彻底的实现，而过去却从来不会被改写。一个简陋的校园社区，居然让我当年流了口水和心生向往。这充分说明了我当年的纯情和天真。而现在属于伪业内人士的我，看到这个webx.x的年代，不得不感慨一下。发展的效率几乎让我连回味往事的时间都没有，我自然的在几个网络社区之间切换来切换去。并且提供了让我寻求符合自己交友需求的一切便利。前几天在人人网上看到各位小学同学的近照时，不得不说，福州这么小，我们永远碰不到，网络这么广，我想找谁就找谁。这么看来我是否应该发帖求助一些事情，比如当年我们魔居的同仁们，我知道你们都比我大上十岁，但是一把年岁的玩QQ也多的是，别在网海里装了，出来冒个泡如何，在我难过的人生一个阶段里，感谢你们和我胡扯瞎掰，以及那个轻狂岁月的一切。</p><p>话说回来，现在的变迁不回首则毫无感触，一回首才发现真是一日千里。在我已经开始混网络的初始，我还穷极无聊的在一本杂志中寻找可以交往笔友的对象。当然由于自己的字被人说太“丫”，所以收到的回信真是寥寥无几。但即使在这个情况之下，我也依旧还是有几个笔友。笔友这个词对现在是有多么陌生。一个月内才可能有一次的交流，必然会格外的珍惜里面留下的话语给对方的印象。而当年的见识却让我很难说出新奇的事物和有趣的话语。所以就会一遍遍的打稿，然后再尽量公正的抄正。走到邮箱前投递的那一份感触，现在想来骚包不已。要恢复那种悠哉悠哉的心情，一份不知何时来自远方的惊喜和投递出去后那一份真诚的期待，无论如何也追不回来了。</p><a id="more"></a><p>人和人的距离到底是近了还是远了，很多道学人士都在担心我们这代人。但就是这个让我们感觉冷漠的世界，我们用网络的各种社区联系着彼此，而这样社区的火爆不正显现了我们对和人交流的渴望。人是社会性的动物，这个话近乎于白烂的常识，但是这个社会是现实社会抑或是网络社会其本质已经不在重要。因为人天然就有和别人分享自己生命的渴望，人还是必须由投射在别人身上自己的影子来寻求自身的一种存在感的，而这种存在感在被一个社区所认可的时候，其程度就会骤然提升到一个高度。以至于满足了时候就会容易疏离对现实世界的渴望。当然任何方式都是在相互转换的过程，现实和网络已经变得模糊起来，也难以像过去一般单纯的区分网络和现实了。开始父母还老是由于社会上的报道对我再三警告不要和网友见面，而现在各种社区组织活动的见面形式几乎已经不值得进行讨论，而父母们自己走进网络的时候也自然而然的从网络社区发展成车友，酒友等等现实社会团体。网络的浪潮来的时候，近乎于所有人都逃不掉，不像过去的某种事物，带着强烈的年龄断层和时代感。这充分的表明了网络的包容性能满足各种类型的人。将来我们的世界再往哪个方向走我是看不到，因为即使看到了端倪，也会很快被超越成为生活的一个习惯，而面对飞速进展的时代时，还在怀念着过去笔友一封封鬼扯的我，年华老去…</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No thanks</title>
      <link href="/2010/08/23/----70/"/>
      <url>/2010/08/23/----70/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-8-23 02:33 </p></blockquote><p>回来突然有了点失落，这份失落简直不可思议，好像一直对生活满意，对工作满意，对家庭满意。那到底是对什么开始不满意的，想了半天开始发现是对自己不满意了。</p><p>似乎对自己的要求有点低了，说着话似乎应该脸红了。因为其实我对自己的要求一直很低，除了偶尔会反省自己和自己的期望相去甚远，其余大部分的时候我都在喜欢自己。喜欢自己的慵懒，喜欢自己的思想，喜欢自己的选择。在这个喜欢的过程中，却也可以慢慢的走向不喜欢自己的路。果然那个结论下的很对，就是不断肯定自己和不断否定自己的过程，这条路纠结下去，感觉是泥泞交错。</p><p>满意也好，不满意也好，似乎不是能力的变化，而是心态的转变。有时候我觉得这些都没有所谓，那我就满意了。当有所谓的时候就不满意了，那我的满意是不是只是在放纵自己而已。我应该对自己有要求的，起码我笑着谈的话也是好好活着。最近好像连这一点也没有认真的去做到。保持健康，我的生活健康吗？八点睡到十一点，玩到三点，再睡到八点。我的自律性在哪里，是跟随着别人不认可的道路也一样走上自律的道路。但在正常的时间轨迹里并不是我能左右一切的。比如八点到十一点我总会有很多时间拖延或者妨碍我的轨迹，换句话说，当有冲突的时候，我并不容易的遵守轨迹。按部就班的道路也许不适合我，但适合我的道路产生迷惑的时候是否就要退回到按部就班。</p><a id="more"></a><p>今天玩狼人杀的时候，星月牌翻出了长辈不参与投票的效果。突然发现自己已经老掉了。我由于早于一般人读书，在自己的圈子里从来没有过这种感受，今天感受到自己在圈子里平均年龄之上的时候，感觉时间真的不多了。我一直觉得没有时间了，一直又在浪费着自己的时间。当今天举手的感触突然冲击到了自己脆弱的神经。是啊，我也不小了。不能在那么自我安慰自己的按部就班自己的道路。我确定要这么蜗牛吗？我确定自己还年轻吗？三天后我二十四。拍拍自己，确实不小了。</p><p>做什么事情就专心去做吧，珍惜时间吧，时间真的不够的，对的，就像你说的那样，我之所以时间不够是因为我要浪费很多时间才开始变得有动力。那样成长太慢了，浪费的时间第一次让我心慌。此时此刻，你会笑着和我说差不多时间到了吗？那么就约定好时间到了就应该怎么走。不要浪费时间了。没有时间了，时间太少了。天天追逐你的，开始流逝了。你和那些四十岁的人差多少，你和那些三十岁的人差多少，你和你同年龄的人又差多少。开始恐惧了吧，呵呵。</p><p>知耻而后勇还是好同志？但我现在没有为自己的过去感觉到耻辱，我却只是单纯的对着自己的将来感觉到恐惧。每天的进步真的太慢了，我是否离你越来越远了。如果要研究心学就去研究吧，如果要去考察隋唐政治史就去考察吧。你眼前的事情怎么那么多，随着那个雨季突然下来的瓢泼，一切是否都如预期的那样回流呢。我连雨季都没等到，就要出发了，舔舔嘴唇是不是不敢迈出去这个步伐？我不会再错过你了。你将不再是麻烦，你将不再是恐惧，你会是回流我生命的勇气，一点点的浸透我的灵魂。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嘿，好久不见</title>
      <link href="/2010/08/10/----69/"/>
      <url>/2010/08/10/----69/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-8-10 01:32</p></blockquote><p>我曾经说过，我们是最好的朋友，这一点，我到现在也和以前那么想着。虽然我们已经相形渐远，这一点一直都没有改变。</p><p>今天听到你的消息了，搞坏了我的心情，有些事情我也不明白该怎么去判断，懂得越多，对于下判断就越发谨慎。我曾经也单纯的认为你是崇洋媚外的小孩，但现在我也会无聊的喊着崇尚美国的自由。这一切还有那一切都是一种讽刺，现在的学识在讽刺着过去的无知，而将来的成熟又在嘲笑现在的轻狂。所以我相信现在的我，会比过去更加理解你的心情。</p><p>对于你的事情我不知道如何你规劝，因为我不希望你丧失对生活反抗的勇气。如果你对现在生活已经不再满意，那应该懂得如何去反抗。你还年轻，你还可以的。看看镜子中的自己，是否还那么朝气蓬勃呢。犹如那个企鹅一样继续摇摇摆摆。也许我现在还这么看你就代表的我已经离你的生活很远的。但是我觉得人在什么时候保持一份赤子之心并不是一件坏的事情。起码我们对生活还有希望，最近有人说前面都是阴影请不要担心，因为你的后面就是光。我一直不反对任何形式的幸福，哪怕这种幸福带着许多人的不解。但是这个幸福请确实是你自己的幸福，不抱怨。站在外面指教别人的幸福是件容易的事情。这样说着话的我多少有点不负责任，我只能说我的心情你应该能理解的吧。当你踏上征途的时候你就该知道前面一定是千难万险，然而走到现在是否还没有偏离你最初的梦想，如果你还向往着自由，那你是否还能仰望星空放声歌唱。</p><a id="more"></a><p>人生一世，犹如白驹过隙，我知道你是很信神的人。但这份信仰是否真实的换来心灵的安定呢，还是像着过去那样赌博式的听天由命。请把生活掌握在自己手里吧。这个话我即使说无数次你可能也听不进去。我能理解你对生活的那份不安，但是因为这一点实在太过于重要。所以我唯有重复重复再重复。直到你明白这一点，我才会觉得有那么一点点心安。</p><p>某些时候我确实是很贱的人，我和朋友的交际真的很少。我可以和朋友老死不相往来，但是我不能容忍我的朋友和我不在一个城市里面，因为我觉得在仰望同样一片星空的时候。我们都会一直在一起，只有你在离我最远的地方，此时此刻我不再关心外国的月亮是否圆润。我只是厌恶这份距离带来的恐惧。我尝试的笑的知道你离开的消息，那是因为我希望在时间的下一刻让我等到你回来，然后我也会笑着对你说：嘿，好久不见。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小撰</title>
      <link href="/2010/07/19/----68/"/>
      <url>/2010/07/19/----68/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-7-19 09:13</p></blockquote><p>我国的城管一直都以一个负面形象在人民的心中,甚至于”城管”这个词汇就已经是单纯的贬义词.我不以为这是城管这个编制的错误,而纯粹是我国法律的悲哀.城管所”管辖”的,往往都是社会最下层的人民.他们靠着自己艰辛在城市中寻求一点生存的出路.但这点在法律的规定下是不允许的,很多时候时候我为此感到惋惜.我们的法律在对于弱势的群体制裁一向快速有效.但对于更多的社会毒瘤,却只能视而不见.这种轻软怕硬的执法群体,就只能执行着这些片面性的法律.在人民的白眼下做着等同于犯罪的行为.</p><p>我们的宪法保障了人民的私有财产不被侵占的权利.我们的宪法保障了人民有不受他人伤害的权利.作为法盲,我想有个基本常识就是,宪法是国家的根本大法,所有与宪法违背的法律均将视为无效.更何况我到现在都无法查到天桥摆摊一样的行为究竟触犯了哪条法律.就算触发了相关的法规,也应当有相应的处罚条例来惩处,城管应该没有代行处罚的权利.但我每当看到那些被砸烂的货物,被打伤的人民,被没收的货车.我都为这些人们以后的生活担忧.他们真的很坚强.但是为了这份坚强他们究竟又付出了多少血汗.</p><a id="more"></a><p>人们有活下去的权利.而国家应该有义务让所有人活下去.如果有人说国家没有这个义务.那国家又何必在意失业率这个”没有意义”的问题.但当我们刻苦耐劳的人民已经没有办法用正常的渠道获取一份报酬的时候,他们只好用自己微薄的力量去开辟一条游走在法律边缘的道路.也许这些都不值得称道.但是否应该给予一定的宽容.他们只是想活下去而已.并没有过分的要求.如果只是减少了一些人的”方便性”.那么,是否可以让一些步.我们已经拥有了比他们多的多的社会资源可以使用,而他们却在那份出生就带来的不平等之中寻求生存而已.</p><p>总理说新的一年让人民活的更有尊严一点,我听了很感动,因为我相信国家不是没有明白人.但心里却暗暗的想着:很难.即得利益者是不会放开手中的任何一点利益.而那些贫苦人民依旧要在生活线上苦苦挣扎.尊严在很多时候成为了一个奢侈品.在我们的国家里面.我们要面对着太多太多的不确定性,这种不确定性丧失了祖国的温暖.并让绝大多数人永远的暂住在了自己的国家.但却不因为很难,就变得没有努力的必要,没有努力的方向.CharlesdeSecondat．BarondeM Ontesquieu永远是我心中最伟大的人物之一,他的不朽著作&lt;&lt;论法的精神&gt;&gt;里面不断传诵的话语在这里献给我爱的国家,我希望您真的在成长,成长到我们都将以你为我们的骄傲.</p><p>　　</p><p>　<strong>一个公民的自由是一种心境的平安状态,这种心境的平安状态是从人人认为他本身是安全的这个角度出发的,要想享有这样的自由,就必须建立一个这样的政府:在它的统治下,一个公民不惧怕另一个公民. — &lt;&lt;论法的精神&gt;&gt;</strong>                                                                                                                                                                   　　　　　　　　　　　　　　　　　　　　　　　　　</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟不上的时代</title>
      <link href="/2010/07/14/----67/"/>
      <url>/2010/07/14/----67/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-7-14 09:39</p></blockquote><p>突然发现时代的变化已经让我应接不暇，这似乎是一个我老了的讯号，其实像我这种偏自闭的人，世界怎么变化我是不太去管的。我关心的我记录，我不关心的我无视。不过这么大的变化不加以记录的话，实在说不上是一个观察者应有的态度。</p><p>微博其实不算个新鲜事物了，但像我这种后知后觉的人，也是到了今年年初的时候才去很傻逼的百度了一下什么叫微博。诚然我当初认为这是一个很牛逼的东西，一个随时随地让自己与世界同在的东西。具体做什么，为什么，牛什么。我没研究，也没时间研究。而到了我真正看到微博的时候，我对其是很失望的，我根本不了解里面的意义。一个只有140字的聊天模式的东西，为什么就如此红火。140字，对于我这样混BBS回复都不只这点含字量的人实在是不够用，但是无数人却可以使用这140字表达出了自己很多很多的想法，虽然在我眼中都是水贴般的废话以及不着边际的空话。但依旧让人们乐此不疲。我明白人都有表达的欲望和分享的欲望。一个随时随地让你和朋友分享的东西，确实能极大的满足自己的表达欲。而这个表达欲的及时性和传播的扩张性也让人们很快摈弃了旧有分享的模式。有事微博没下，没事看别人微博一下。从那一刻起我们超越了时间，空间，我们让网络融入了生活的毛细血管中。无时无刻的出卖了自己的生活，无时无刻的窥探别人的生活。而这种窥探在于新型手机的帮衬下，我们甚至超越了地域的限制。小妞，别反抗了，我是有背景的人。大爷，别逗了，我是有微博的人。为什么我是个有微博的人，因为我不在这里，我有微博，我将不在这里，我将于大家同在，而且我将把你拉得与大家同在，在大家同在的时代，我们就是裸露下黑夜下的躯体，追逐着暗藏在黑夜里的光束，默默的明处注视着别人的一举一动，并出卖着自己的一举一动。我们不能通过毁灭世界达成的灵魂共有，却在网络之间慢慢的融合起来。将自己的灵魂投散在各个灵魂之间，达成共鸣。</p><a id="more"></a><p>我知道豆瓣其实相当的早，但是我个人对于一切豆类以及类豆类植物的排斥，乃至于眼中掉对豆这个字眼都极度的敏感，甚至于反感，记得小时候还有一个词令我反感，就是豆蔻年华，所以我一直没有加入豆瓣的社区。不过我了解豆瓣的道路却很新颖。从豆瓣的网络编程技术角度去了解豆瓣的。敏捷型开发模式也曾经让我醉心不已。但这不是重点，重点在于豆瓣的模式。虽然现在看起来豆瓣的模式已经不算新颖。但是在当时，作为web2.0的进化者，在我眼中它是个将共享内容发挥的很好的站点。在参与信息产品的创造、传播和分享的过程中创造价值。而不同的人抱着不同的心理来构建的世界将线下和线上的世界结合起来确实令我觉得值得玩味。用更简单的方式来说，豆瓣就是BBS的进化版本，它将集群模式更便捷的提供给网站的使用者，将本身由网站的开发者需要寻求的主题开放给大众来开发。这样集结了更多的思维，创造出了更多新颖的团体和社群，让更多的受众都在一个网站中达成了自己创立团队的目的，也让更多人在同一个网站中更容易的寻求到了自己志同道合的伙伴。在伴以三条明线（电影，音乐，读书）和一条暗线（同城）加以连接各个独立的团体。这个产品对于生活在自己城市本身就有完善一套生活圈子的人来说可能并不是最重要的，但是对于那些生活在异地或者心灵本身就相对空虚的人们来说，寻求自己的团队就极其的重要，人毕竟还是社会性的动物，在一个群体当中找到自己的存在感是很重要的事情，而这个事情在于生活中寻求认同已经越来越不容易的时候。就转而到网络之间寻找更容易接纳彼此的团队。由于更容易，大家更愿意加入，也由于这份容易，使得这份接纳变得如此的廉价。混豆瓣的人都有着无时无刻显现的伪小资范。在伪小资范的阴霾下，格局未免就小了很多，这点可以从三条明线之间展露无遗，其本质既是神色犬马和纸醉金迷的产物，而在那条暗线下达成一种契机在现实中实例化。若寻求这之间有多少人与人之间抱着不正当的心态在社区的伪装下想着猥亵的勾当，就应当能明白这份格局的脆弱。</p><p>世间的变化确实很快，李开复的那句：世界因你而不同让我看出了一个人对自己自信的极致。但由于我的专业问题，所以看待网络的发展却有着自己独道的角度和看法。网络的发展从根上就是一个共享。而我们不管是web X.X的版本概念，都是将这个共享的概念发展到极致。而这些不断改变我们生活形态的事物，其实就是一步步的走向网络最后的理想：我们共享了我们的全部。从服饰，饮食，居家到理念，创意，梦想，乃至我们的一切一切。全部都被这个网络肢解，共享。如果将这些信息全部收集起来，足以构建出一个强壮的世界。而这个健壮的世界足以慢慢的架空我们现实的世界。我们经常可以看到一群人坐在一桌子里，各自拿着各自的手机，玩着类型不等却又极其相似的游戏。将自己投射在网络上空而无视了现实的存在的空间。虽然现在，无数人还会把网络世界发展到线下的世界以获得感官上最大的冲击。不过以这个世界的发展，如果感官都可以100%的投入网络的时候，是否就会真正进入那个可怕的科幻世界，我们躺在一个个机器当中，将自己的身体的全部都分享成网络的信息，我们的睡眠欲，食欲，性欲都将在网络中被彻底的实现。我们是否就将不再期盼这个令人厌倦的世界有什么而彻底的沉迷在这个网络的世界之中。一旦网络世界的倒塌，我们从破损的机器之中爬出来的时候，看着身上腐烂的躯壳，是否会认为这是现实世界的末日？我想这并不是危言耸听，已经有很多人离开网络就会感觉自己的世界开始不完整。而这个时候，网络还没有实现我们种种的原始欲，一旦这些原始欲都已满足，就必须寄希望于网络的世界足够健壮了。虽然我认为世界如果因此而毁灭也没有什么不好的，起码，他们在毁灭的时候，还是幸福的吧。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现在是五点零八分</title>
      <link href="/2010/07/14/----66/"/>
      <url>/2010/07/14/----66/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-7-14 05:14</p></blockquote><p>我一晚上没睡，并非来自突如其来的自省。</p><p>突然感觉自己自制力很差，总是挥霍，然后弥补。欠你的人生，欠他的人生，欠我的人生，我眼睛已经开始花了。</p><p>我已经不打算睡了，但是我还是有点困，这么矛盾，其实我还能睡两个小时左右。</p><p>我看着他们笑笑的样子，说着反正天亮了，就不要睡了。我感觉我看到了偶像。</p><p>打算切实的按照自己的计划去做，不要赖在床上什么都不做，就算我去了，也只会有好事发生，要相信这一点。</p><p>迷迷糊糊，迷迷糊糊的，感觉还有微笑的力量，这个时候，应该可以怀着感恩的心情继续下去。</p><p>现在是五点十四分，你好七月十四号的早晨，希望你今天并不太热。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看着悲伤的故事 听着温暖的歌</title>
      <link href="/2010/06/26/----65/"/>
      <url>/2010/06/26/----65/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-6-26 04:43</p></blockquote><p>拼命的在抹去着白夜行里的苦涩.我讨厌悲伤,讨厌罪恶,讨厌离别.这样的时候我就反问这样的自己为什么会喜欢的推理小说呢.那里面充满了离别的苦涩和生死的悲伤.而我却拼命在里面寻求阅读的快感.这本该是件很悲伤的事情,是很悲伤的事情.我总是喃喃的说道.在这一刻,我明白了.我该很庆幸我看的那些书的作者手下留情.你们没有把生命的罪恶刻画的如此深刻.那些略带平凡的写作.却挽救了多年以来我看推理小说的兴趣.因为你们的肤浅,所以我对于死掉的人没有任何感触,因为你们的肤浅,我对活下来的人没有任何庆幸.谢谢,真的谢谢你们.</p><p>手纸～拝启 十五の君へ～,这首歌在涛发给我的时候我没有感触,虽然曲子很流畅让人很温暖.也许在公司那样的环境本就不适合品味任何东西.而回家后回味起这首歌的味道时,我一遍遍的反复的获取着里面的温暖.如果没有这首歌.我甚至会看不下去白夜行吧..或者我能够看的下去,只是到结尾的时候无法接受那样的一切.在我咀嚼里面冲突的滋味时,我在幻想自己是不是该写篇书评.可是我发现我的生活还是太阳光了.我不想和那些豆瓣的书友一般.把焦点针对在雪穗到底爱不爱亮这个没有意义的焦点上.我尝试着去接近那样的心理,却发现我的幻想都是越发幼稚.我甚至认为他们那时候能听到我现在的歌就会好起来吧..有着这样幼稚想法的我连自己都开始取笑自己了.你要如何告诉一个拥有阳光的人,其实你们的阳光是很宝贵的呢.坏人坏的那么情有可原,是因为我们连什么是真正的罪恶都已经分不清楚了.而之所以分不清楚,是因为我们离的太阳太近了.任何一点的瑕疵都觉得那么刺眼.</p><a id="more"></a><p>彻底的黑暗，恍如白昼。这样的字眼冲击着我的心里.不是对阳光没有渴望,不是对世界没有憧憬.而是被夺走了,被碾碎了.不会因为你是谁而妥协,不会因为你在哪而消失,不会因为你觉得够了而停止,我告诉很多人被动的委屈是无止境的.没有什么时候是够.说这话的时候我自己都觉得很阴暗.爱有时候是奢侈的.也许会连爱的能力都失去了.剩下的只有一份执念.拼了命也要达成的执念.在这中间发生的一切罪恶或者不罪恶的都已经无所谓了.只要两个人还在这份执念的轨道上就好了.也许只有这样才是活下去的动力.不知道为什么活着,只是知道那份轨道却一定要把他们走完.她不会回头看他的.最后一点光都已经暗了.也就没有回头的必要了.因为没有光,她也就不存在了.”我的天空里没有太阳,总是黑夜,但并不暗,因为有东西代替了太阳.虽然没有太阳那么明亮,但对我来说已经足够了,凭借着这份光,我便能把黑夜当成白天.我从来就没有太阳,所以不怕失去.”.雪穗不是不怕黑夜,而是因为有光.凭借着这份光.她还是可以走下去的.她还是可以在装作幸福的轨道给亮看着的.而这盏光已经灭了.她的幸福又要给谁看呢.</p><p>他们都已经累了.最后的亮已经无力再为雪穗发光了.雪穗在亮的身体面前发出冰冷的声音.背过扶梯,那也许是她为亮做的最后一次坚强.一切都结束了.他们的轨道终于还是到此为止.留下的只有男孩牵着女孩手的剪纸.还在寄托着他们卑微的梦想.</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个侦探题 还有我的推理</title>
      <link href="/2010/06/20/----64/"/>
      <url>/2010/06/20/----64/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-6-20 01:27</p></blockquote><p>有一个男人是上班族      性格很孤僻     但是他有一个爱好就是加班      而且是加班到很晚      直到公司一个人没有的时候才回家      这一天他照旧在公司加班到很晚     两点的时候他从公司出来     往家走（他家里公司很近     步行20来分钟就到了）     走着走着他突然想上厕所     这时正好在路边上有一个公共厕所      他就走进去上厕所      他看见一个男的     那个男的跟他说了一句话      这个上班族当时就昂了一声      但是并没有感觉什么特别的或者异样      就进去上完厕所回家了      回家后     他洗了个澡     躺在床上想起那个男人和他说的那句话      突然从床上跳了起来     把家里的门窗都锁好关好      在沙发上一夜未睡     胆战心惊的过了一夜      第二天早上他给警察局打了个电话      说那个厕所可能发生了凶杀案      警察赶到那个厕所     在女厕所发现了一具长发女尸     问     那个杀人凶手对那个上班族说了什么<br>         提示一：是在半夜的公共厕所<br>         提示二：一具长发女尸<br>         提示三：这句话在白天说一点问题都没有     但是在晚上说就很奇怪   </p><p>大部分答案：那个人说 小心地滑，我在拖地。  </p><a id="more"></a><p>疑问：</p><ol><li><p>如果是这个答案，为什么这句话晚上说就很奇怪  </p></li><li><p>为什么他想到那句话突然跳起来把门窗关好  </p></li><li><p>为什么他当时不打电话，而是第二天早上才打  </p></li><li><p>如果是这个答案，为什么他说可能发生凶杀案而不是有一具女尸  </p></li><li><p>“性格很孤僻””但是他有一个爱好就是加班      而且是加班到很晚      直到公司 一个人没有的时候才回家””回家后，洗了个澡”感觉和答案有什么关系</p></li></ol><hr><p>以下是我的推理：</p><p>1.关于灯的问题，我想说应该是有灯的。如果没有灯，那么互相双方都看不清楚对方的长相，那么就更谈不上杀人灭口的必要。毕竟相互都看不清楚状况就算此人第二天不报案,在厕所里面有女尸在白天也一样会被发现的.所以报案不是关键,关键的是加班男应该看到了凶手的长相,而凶手也看到了加班男的长相.所以加班男才恐惧被杀人灭口.</p><p>2.同上所述,厕所里面有灯,那么都能看的清楚对方长相的情况下,不可能把尸体看作是拖把.还有一点可以证明这点就是,加班男打电话报警说的是凶杀案,而不提女尸,则女性长发这个特征并没有被加班男看到,也就表示加班男应该是没有看到尸体.只是从侧面了解到了一场凶杀的事实.</p><p>3.关于小心地滑,我在拖地这句话.我以为在晚上说并没有什么不妥,公共设施的清理工作总会避开人流要使用的期间,虽然可以说半夜两点有可能太晚,但这也不至于让人联想到谋杀,只会让人感觉意外.要往谋杀方面联想则要有更确切的表现.</p><p>4.同上,这里应该要有个更清楚的迹象表现和凶杀案有关系,所以我以为最直接的联系应该是血.所以说加班男看到这个人的时候,这个人身上一定有着血.而这个男人就是在解释身上血迹的缘由.我估计这话可能是:别害怕,我是杀猪的,来这里洗洗.而加班男此时则礼貌性的回了一句.也就是此时他没有反应过来对方言语的真实性.回家之后加班男对血的印象越来越深刻,而对半夜屠宰牲畜这个事情开始产生怀疑.</p><p>5.最后他就全副武装起来.至于为什么在沙发上,是由于床上容易睡着.而加班男希望自己不要入睡.为什么没有立刻打电话,是由于夜晚的恐怖压迫到了他自己没有立刻行动.当然这些并不是特别重要.主要的还是加班男在厕所里看到了什么.所以我的推论就是,加班男一定是看到了血迹.一个没有任何案件背景的人,只有看到最直观的东西才有可能联想到凶案.至于别的东西,则是不可以站在我们已经知道这是凶杀案的角度来展开的.</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合理中的不合理，或者不合理中的合理</title>
      <link href="/2010/06/18/----63/"/>
      <url>/2010/06/18/----63/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-6-18 15:13</p></blockquote><p>前文序：推理小说的书评难写，因为会剧透，不想被剧透的请别看此文</p><p>阿加莎·克里斯蒂作为推理女王的地位不容置疑，而他作为本格推理的创意也同样被赋予了很高的评价。作为其代表作之一，显然《东方快车谋杀案》不会失去应有的水准。 看完小说给我最深的感触就如我标题所说的，一切都在合理与不合理之间纠缠在一起了。这本小说在一般人看来最出人意料的就是我们面对一本推理作品，即便不会去做严谨的推理，也会在看书的过程中不断的猜测凶手是谁来增加推理小说阅读时候的乐趣。而这样的心理会使得推理迷们看多了同质性的解密后，难有其意外性可言。而此时推理的创作就要剑走偏锋，例如像《嫌疑犯X的献身》这样开始就告诉你凶手是谁，又或者像《无人永生》所有人都会被杀，都是创作时候增强这样意外性的一个创举。而《东方快车谋杀案》同样有了一个新颖的创举，所有的嫌疑人都是凶手。让读者在阅读之后惊叹作者的想象力和创造力。本格推理的生命就是谜题。而推理的过程往往是最精彩的，阿加莎的小说可以说是写的比较公平的小说。很多小说会由于作者水平的限制不敢将很多的线索公开与小说的进程之中，而往往解密的时候拿出了很多案件进展过程中根本没有出现的线索或者证据。这样不公平的小说往往让推理迷们很失望，但看阿加莎的小说就不会出现这样的问题。所以可以说解密的趣味是可以贯穿全书的。</p><a id="more"></a><p>《东方快车谋杀案》秉承阿加莎的特色，出场的人物较多，这样的写法增强了小说的复杂性。但这之间让我最困扰的反而不是众多的人物搞乱了其间的线索，而是难以逾越的不在场证明。所有人的不在场证明都过于完美，我一直有一个概念就是不在场证明是给傻子看的。因为在合理的时间内没有不在场证明远比在不合理的时间之中有很充足的不在场证明要高明的多。当然这要排除推理剧中总是扮演很2角色的警察同志们。而适时的作者抛出了全部人都是凶手这个答案。也许这个答案非常精妙。他非常符合推理界的那句名言：When you have eliminated the impossible, whatever remains,however improbable,must be the truth! 但在我看来却有很深的致命伤，其一就是大雪封山，致使火车无法开动，这是一个很大的前提，这个前提却是作者的矛盾和死结。本格推理有一个套路就是用某种手段让凶手无法逃脱，且没有嫌疑犯从外突然加入。那么不管什么时候读者都会默认凶手就在嫌疑人之中。而过于完美的不在场证明致使这些证词的可信度越来越低。而本书没有运用过多的谜题，只有一个谜题就是没有人有作案时间，让人认为这一定是外人所为，但即使不管大雪封山这个前提，本格推理迷们也不会对外人入侵这个结果满意，而这个矛盾点维系之间，这让人隐约感觉出了凶手的模样。简言之，阿加莎在创作的时候有个问题就是写死了可能性。12个人之中应当有嫌疑人和非嫌疑人的阵营组合才更容易让谜题精彩起来，也容易使读者误入歧途。而12个人都没有嫌疑则和12个人都有嫌疑形成了同样的局面。线索越多越好，但线索却不该是那种一查就明了的线索，那样和少数的线索就没有过多的差别。还好阿加莎对小说的节奏把握的很好，本书的简短反而没有时间让读者反应过来这种很简单的诡计，小说就直接进入精彩的推理。这点也不得不说是作者的写作功力的体现，使得小说收尾的时间恰到好处。其二则是参与杀人的参与性，这里面藏着一个很巧妙的心理我先按下不表。单谈杀人是件隐秘性的工作，参与杀人这个行为的人应当越少越好，因为人心的不可控不论有多么强的牵绊，在面对真实的死亡时，必然有很多的不确定性和各人心理承受能力的差异。越多的参与者虽然模糊了嫌疑犯的焦点，但却使得只要攻破其一点，则全盘皆破。故事的波洛就是这么做的，抓住其动机一点就如抓住了首尾相接的田鼠，一拉就拉出了一串的犯罪者。而各人身份的过于牵强以及最重要的纸片没有燃烧尽的关键程度，使我对这种偶然性大大的不满。因为没有燃尽的纸片署名让整个犯罪动机缺乏更多的可能性，而一切都围绕着阿姆斯特朗事件的身份安插不免的让人觉得有牵强附会之嫌。但这里却要谈到凶手们一个巧妙的心理，十二人陪审团以及十二刀这个暗示，使得行凶的手法上有了更合理的解释，所有人都亲手执行这个步骤，所有人都无法逃脱这个共同犯罪的事实，而在面对真实的死亡面前，所有人却又都可以逃脱自己是凶手的心理谴责。因为没有人明白死者到底是死于哪一刀，这点相当的高明，既然大家都无法逃脱了犯罪的事实，又使所有人都没有确切的感受到杀人的恐怖。再套以十二陪审团这个光明的影子。一切的一切都安排的恰到好处，可以说阿加莎在写这本书最最精彩的部分凶手是所有人的意外性，也不是不在证词线索的复杂性。而是这种犯罪心理上的双重暗示让我惊叹不已，在有人性的影子下，本格推理才有了新的高度，而不是单纯必须存在手法而创造出一个手法来挑战趣味。但凡在出现人的小说里，脱离了人性的范畴，一切都变得空洞起来，而在这份空洞之下，是无法让人回味小说的美好的，而这点上在我看来就是大师和普通写手最大的区别。</p><p> 结尾很符合国人的心理，国人并没有认为法制是个好东西，而国情一直是人治高于法制的。当然从情感上讲不管是哪个国家都同样的受用，对于我也很受用，罪犯受到了正义的制裁，比他受到法律的制裁更让我们大快人心。这不得不说侧面体现了我们从心底就没有认为法律代表了正义。在这个法律不能代表正义的时代，我们就需要福尔摩斯，波洛等这样的名侦探为我们主持正义，而向往正义的美好愿望，也会随时随地的流淌在人们心底最干净的地方，我们都在等待，等待着由自己来主持正义的一天。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两天的特权</title>
      <link href="/2010/06/08/----62/"/>
      <url>/2010/06/08/----62/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-6-8 01:07 </p></blockquote><p>又是一年春来到，好吧。是夏来到。</p><p>高考应该是生命中很美好的两天不是吗？这一天警车开道，花车净街，仿佛一切都是为你们准备的，而父母也会为了这两天的日子极尽“谄媚”之能事。吃好睡好就为了一个好成绩，一个好分数，一个好出路。这两天的日子仿佛一切都让那些和高考有关的人变得愚蠢。警察忘记了自己的职责不是为了给某些人开特权，学生忘记了应试教育的悲哀和可恶，父母忘记了人生的路很长其实很多时候和高考无关。高考的两天，和愚蠢相关的两天，在这两天中，一批人找到了生活的指标。一切都美的不像话，那么的有目标，那么的万众一心。</p><p>其实我都不是很理解为什么我会在这里说风凉话。只是一边看着这些孩子为了高考前仆后继，而手头上的新闻写着新增考生多少人，新增学位多少人。不免的有些悲凉。已经再也没有人会谈论大学生是天之骄子。而硕士多如狗，博士满街走之类的笑语早就不是现在这个时代的标语了。而是我上大学时代的标语了。就这么不值钱的东西，还是有那种盲目的追从。人应该是很难从习惯中走出来。而我们报考的专业还是那么的可笑。不管过了多少年，哲学系，考古系依旧那么冷门。种田种菜的能换钱的行当还比较吃香。大学不是精神升华的场所，而是可以换钱的交易。陈先生说的独立之精神 自由之思想不要说学生早就不知为何物，就算是那些专家和教授应该也不知道为何物了。前段时间听说高考在某些地方的报名率下降了，很多农民的孩子不再高考。因为高考的投资和回报不成正比。我心中嗤笑，谁告诉你们高考是投资的，就算是一种投资，它也不是能马上换成钱的东西。大学也许是一种观念，一种思想，一种理念的投资。但这些和你们说有用吗？换钱吧，孩子们，你们到大学的第一课还是学不会做人的，因为你们要开始职场规划了。其实聪明如你们的还发现不了这是个局吗？人生就是关关难过关关过。欢呼的时间是有的，不过留不给你们什么。</p><a id="more"></a><p>我朝从来不是考知识的，永远都在考技巧，这些点你答到了没，这些方法你用上没。这不怪你们，要怪就要怪教你们的老师本身就那点水平，你们答出点花火来他们就不知道怎么改卷了。他们只知道对着答案勾勾叉叉就是本事了。然后发给你们订正出他们从教学参考书读出来的正确答案。风言福州这次作文题目很范，很多孩子暗自叫苦。这种猜心的游戏当然叫苦，因为你不知道改卷的老师是什么喜好，你就拿不准自己写的东西符合不符合阅卷老师high点。满足她的high点，你的作文成绩自然就高了。多听话的孩子，大笔挥一挥，一切好商量。天才的学生就别祈祷遇到天才的老师了。你能遇到知道自己是庸才的老师就已经是万幸了。因为那个庸才的老师是没那个自信抹灭超出他理解范围的文章的。</p><p>还有一天，好好享受人生少有的特权日吧。过了这一天，一切又平等了，当你们失去准考证的那一刻，这个世界对你们而言又是平的了。因为社会的机器又开始照着往常的样子运转起来了，齿轮的咔咔声碾碎了一切的无谓，往后的日子，该亮爪子的亮爪子，该呲牙的呲牙，从你们的卷子开始。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关系良好</title>
      <link href="/2010/06/05/----61/"/>
      <url>/2010/06/05/----61/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-6-5 03:03 </p></blockquote><p>让我固执到死吧，我还是只能遵照自己的决心生活下去。我还是成为不了你那样的人，即使我怎么用智商去弥补情商，但耍脾气的嘴脸真是不好克制。我会笑着面对自己的失误，或者哭着去面对，那也没有什么不好。</p><p>重复重复啊重复啊，那样最美的日子真的好近好近，我突然想起来了最美的要素还有之一是小宝贝，摇头尾巴晃的时候没有音乐真是不可忍受。我的耳朵最近好舒服。</p><p>咔叽咔叽，儿时的店铺即使从对面搬到了这面，却水准依旧，从我记事开始你们就存在了，虽然当时更有古风，物是人是真的挺不容易。嗯嗯，你们很美，请继续保持。</p><a id="more"></a><p>小事小事都是小事，增重才是一件最大的事情。吃了超过平时二分之一的分量，撑的我睡不着。悲剧。</p><p>雷兽，你是没脑袋是不是？破头破爪破屁股，你就是没脑袋，好吧，等我虐你一万次啊一万次。</p><p>生活就等等等啊，消磨了过去，每天都有计划，每月都有欲望，每季都有目标，每年都有理想。我等等等等等等啊，什么事情都被我等到了。还有什么事情是等不到了。我知道我想过的你迟早会给我。即使时间跨度有点长，但能拿到就是好的。对于这点我很感激你。不过你也稍微夸我一下，我从来都不贪心不是吗？或者我还没有染上贪心的恶习。</p><p>要面对自己，面对自己，面对自己，咬牙切齿的也要面对自己。有时候傻里傻气的是吧，嘲笑算什么，不削又算什么，起码我还喜欢我自己。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>能力的鉴赏</title>
      <link href="/2010/05/27/----60/"/>
      <url>/2010/05/27/----60/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-5-27 10:17</p></blockquote><p>本文略显刻薄，非喜勿看。</p><p>谈论一个香艳的话题，潜规则。最早这个词汇似乎是从演艺圈冒出来的，后来人们发现这个世道的潜规则是无所不在的。没发现是一回事，发现了又是另外一回事。于是乎道学人士又开始走起人心大坏世风日下等老生言论。这种貌似放之四海皆准的言论仿佛就像在空气中放了个屁。恶心人了一阵子却没人会把它当回事。人还是爱比较的，初看这一现象时候会破口大骂人，但反观自己摸摸鼻子，发现自己在那个位置上也难保不会做出同样令人诟病的事情。所以也就默声作罢。</p><p>用工作来养活自己，这点其实不分男女，也不管你长的漂亮与否。在工作的内容上，我以为是单纯的。因为事情是实实在在的存在，只有解决工作，才能得到报酬，这点没有任何疑议。所以在我眼中，差别就在于，人是否能确实的完成这份工作，以及完成了这份工作之后是否又确实的对得起这份薪水。有五分的工作，就得到五分的报酬，而你用三分的工作价值换取了五分的工作价值，那一切这就都是你变味的开始。首先你会开始害怕失去这份工作，因为你拿到了虚高的价值。在别处你可能拿不到这两分虚高的价值，而人是能很快适应自己薪资上升所改变的生活水平，却很难适应薪资下降所带来的生活困扰。那么从三分里看五分，其中必然有两份虚假，这两分的虚假，就需要靠你用其他的东西来弥补。当然我也不以为用两分的虚就能换来长期的钱肉交易，但这却是条被撕裂的口子，也是一个被拿捏的把柄。先不谈失去这两分虚高的不适应性，单说这样单纯的物质生活还有可能被信用卡的贷款所束缚，有些人的生活甚至就靠着这两分的虚高在维持着他们生活的“水准”，那么失去这份虚高的工作，就意味着生活资金流的断裂。因为她很心虚，她心中清楚她的能力不是随时随地的能找到同等回报的工作。因为是假的，必然有人不会买账。这条口子在平时看似安全，但是却隐藏着很大的危机，当她的直接领导想要对她染指的时候，即使她“屈就”于社会的道义不从，却也没有勇气离职去寻找新的工作。所有的这些都会换作成无形的压力压在这个人的肩膀上，就算领导不给你穿小鞋，而是正常的工作交际也会变成莫大的压力，往后领导却已不会在看重这个人的能力而给予其任何的晋身机会。这种两难的境地之下，加之上生活的各种诱惑，在现在教育体系下根本没有几个人明白气节会何物的年代，很容易就会有人一咬牙就从了，不就是肉碰肉吗？有没有那么难。两分的虚很快就成为了两十分甚至两百分的虚，这份虚所带来的快感很快就麻木了道德给予谴责的痛苦，没事还能看些书就望文生义的振振有词，咱这是崇尚自由主义。哲学有个时候就真是给这种人自慰的良剂。</p><a id="more"></a><p>花开两朵个表一枝，上面的段落貌似有些偏颇。因为有个实际的问题，能力是否就只指处理问题的能力。长相姣好是否也算是能力之一。为什么演艺圈是最容易出现潜规则的地方。其中确实有很大的成分虚假，就犹如我上面提到的，价值的虚高。还有一点，就是在演艺圈里面混，其能力的重要之一就是长相。那么这份能力要如何表现，却就很难说的清楚，一个演艺人员在还没有市场号召力之前，需要如何获得展现自己长相的能力的机会？与其将来要获取几百万人的喜欢，不如直接获得一两个人的喜欢还是比较容易的事，于是他/她们就很容易的到某些人的床上去施展他们的“能力”了。这样的逻辑看起来是否很完美，每个人都是用施展自己的能力完成某种“工作”来获取报酬。可惜这却有个概念上的错误，就是公权力。很多人也许会认为自己的行为并不妨碍他人只是为了让自己生活更好一些，却没有反应她的这份虚假的报酬从来就不是从那个和你上床的人手上直接获得。而是使用了人们赋予这个人的公权力带来的。因为公权力是大家赋予这个人的，但她却用来为你谋取利益，你就是变相的在其他人的手中压榨了他们的价值分到了你的手上。就好比现在我朝很吊诡的一个事情，土地本来就是国民的土地，国民应当是自己国家土地的主人。现在国民将土地交给国家管理，国家居然把交给他管理的土地卖给国民换钱（莫谈国事，止步）。根据能量守恒的原则，价值也同理是守恒的。一旦有人想要或许虚的价值，就要有人用实的价值去弥补，而如果这样的行为和方式也算作一种能力的话，那真是一种肮脏的能力，他们和明抢豪夺没有区别，不过是一个隐形，一个显性罢了。道德就是以不伤害他人为底线的，换个华丽的包装其实掩饰不了这种污秽的本质。用一句我很喜欢的俗语：光屁股拉磨，转圈丢人。</p><p>我知道很多人，都在自己的岗位上兢兢业业。而你的主管是很清楚谁是办事的人，谁是无用的人。主管即使是个色狼，也不会对办事的人下手，因为女人多的是，但是要找到个放心顺手创造价值的员工，却要难的多。所以很多人就不要再装了，什么叫这个社会没有给你们生存的空间，当婊子就别立牌坊了。想想自己有多少的水分，不如把自己拧干了重新上路，起码换个心安理得，问心无愧。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有钱难买爷高兴</title>
      <link href="/2010/05/23/----59/"/>
      <url>/2010/05/23/----59/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-5-23 02:36</p></blockquote><p> 人生一世,草木一秋.</p><p>我是聪明人,这点到什么时候我都有自负的资本.</p><p>即使是错误的道路又如何,我会笑着继续谈论让我懒的资格.</p><p>左走右走来回走.指挥交通有警察的.</p><p>知行合一,我不违背自己的良心,我不违反自己的原则,我没有伤害任何人.这还不够吗?</p><p>hearts on fire ….吼啊吼的..我耳朵好舒服</p><p>缓一缓,不要急,优比捏创造了问题和答案,贺加涅斯却把答案给藏起来了.但也藏的不太远.</p><p>let’s keep on dancing until the morning light.</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>披星戴月去挨针</title>
      <link href="/2010/05/09/----58/"/>
      <url>/2010/05/09/----58/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-5-9 00:22</p></blockquote><p>我一直很坚决的认为自己身体底子很好的，虽然看起来有点瘦弱。不过看来这个事情心里想想就好了，乱说会有报应的。</p><p>连续的低烧还是有到爆发的时候，高烧不退的时候我开始担心自己烧坏脑子不能写程序，如果不能写程序我能干嘛，谁要来养我一辈子，或者养我半辈子，呵呵。起码有个一技之长不但是件好事，而且还是个很宝贵的事情，所以天旋地转之间我都开始尝试物理疗法用湿毛巾，那捂着不到五分钟就发热的毛巾真的不能顶用。每天听袁腾飞讲辽史，前几天才听到辽太宗就是烧死的，不觉得如此唏嘘，看来就算堆满的冰块也不是个事。</p><a id="more"></a><p>午夜的医院其实没有诡异的气氛，只有一个急诊室让虽然不多的病人依旧感觉很拥挤，病人痛苦的表情和医生戴着口罩的淡定都是那么的熟悉，病不是第一次半夜来到医院，也许上次并没有什么危机意识，所以没有对周围人身边有太多的感同身受。当自己也身处在相当的痛苦之中，就会更加体会大家焦躁的心情，但就算焦躁也没有用，只有耐心等待，等待轮到自己的时候，有一种生命在排队被救助的感觉，就算你再痛苦，你也得等轮到你的时候。等待输液的时候，医院送来了个急诊病人，家属可能由于过度急躁无法分辨医生的询问，医生那种轻佻的语气与其说让人愤怒，不如说早在预料之中，无论什么事情看得过多都会变得平淡，就算是生死，每天都在接触也不会有太多的感慨。对于医院，也许会有很多傲慢，但医院也承载着人们对他们过高的期望，我们对于人的生命也许要更加注重卫生，而不是医疗。卫生应该捍卫生命，我们都想活着久些，但不能全部依靠医疗来保障我们一直活下去，毕竟求人不如求己，医疗是救助我们的手段，但它不是全部，生命都并不在作出诊断的那一刻结束，笑着面对出现奇迹的例子又是何其多，好好活着吧，我们有很多方式对自己好，对自己身体好。</p><p>感恩妈妈在半夜一直陪着我吊瓶，两点多一起吃粉干虽然没胃口，但是感觉还是很好的。您一直是个好妈妈，但是个毒舌好妈妈= =;  妈妈节到啦，祝你快乐，不要那么容易动怒，也很伤身的。出行注意安全，一路平安。</p><p>精力回复30%，玩游戏15分钟就累，脑子里过了遍程序的事，还可以还可以。剩下好好调养，缓慢恢复中，留下一声怒吼，劳资要吃鱼啦！</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪民主的思潮</title>
      <link href="/2010/04/29/----57/"/>
      <url>/2010/04/29/----57/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-4-29 15:23</p></blockquote><p>还是会有事情让我这样的懒人坐不住，会想写东西，会想骂娘。</p><p>简单叙述下大概，一位学生在校园内可能犯了错误，老师让学生们投票决定是让学生离开叫家长或者留下听课。此学生受不了这种刺激跳楼了。好吧闭嘴现在不想谈论这个现在学生是否过于脆弱的问题。只讲这种被操纵的伪民意是否能够适可而止。在我还在混初中的时候就有足够幼稚的民主选班委，做着这种不知所谓的行为难道是为了培养我们的民主意识，还是老师在貌似民主的环境下可以感受超越这份狗屁民主施展自己淫威反而更有乐趣？这种被老师扭曲和主导的狗屁民主过了十几年依然在我们的校园里横行无阻。面对着社会认识都不健全的孩子们，用着一些似是而非的名词来扼杀孩子们对公平公正向往的启蒙？这是打根上就烂掉了，在孩子的心中播下了民主就是骗局的种子，这样教育下的孩子长大之后就会明白民主不够是一群少数人利用言论和方式可以诱导成满足自己私欲的一种力量。</p><p>每天都有人不断的叫嚣着我们的社会不够民主，我们的民众的声音在不断的压制。我试着反问一句，你们真的有独立判断的能力吗？就像那些被老师诱导的孩子们，你们真的认清楚了很多事情的真相吗？多少人犹如盲人一般的在网络上给人当枪使却不用用自己的脑子。万恶的人肉搜索，网络上一个男人发表了一个女人和她交往，他一路资助她上了大学，而这个女人上了大学之后翻脸不认人就不要和这个男人在一起。就这么简单的一个帖子就能掀起无数人对所谓负心女人的仇恨，伴随着铺天盖地的谩骂，之后的人肉搜索把这个女人查的一清二楚。这个男人在拿到网络上的资料找到了这个女人，几刀捅死了她。这就是你们所谓的民主，一个女人离开了一个疯子，但这个疯子只要随便说点符合人民内心阴暗的话语，就能够挑逗起群众的力量为其所利用。其实这个世界太多人都没有自主判断的能力了，也缺乏了独立思考的能力。只是一群行尸在这个世界上听着那摇篮曲的指挥作出了一个个错误的决定。人们在手中没有权利的时候喊着我们需要权利，我们需要呐喊，当我们有了权利去做一些事情的时候，我们又开始滥用了自己的权利，有权利但不要越权这么根本的道理都不明白，这样破损的人格有什么资格喊着民主。</p><a id="more"></a><p>其实我们已经很民主了，我们的代表就是选的，选的就是个笑话，记得我高中的时候我们班级没人都发了一张选票，选的是什么代表，ZF属性的，具体年代久远我早就忘记了。上面有几个人，没有任何介绍只有几个人名和打勾的空格，你选哪几个人就在下面勾就行了。我拿到这个就比较蠢的问了句这要选谁啊，丫都不认识。我同学就和我扯淡，说xxx一定要选，我说凭嘛。他说他是我们的校长，你不想混了。你看多有意思，我们的代表就是被我们一群互相不认识的人选出来代表我们的，去年的年度词汇应该是“被”了吧。你看我在多久以前就不知道被什么家伙代表过了。而我的同学却在懵懵懂懂之际就已经发现了对我们有权利影响的校长大人是我们必须拥护和爱戴的对象，就算你不是发自内心的，你总是想要混下去的吧。作为我常识启蒙的几个老师之一，对我这种从小就反感这种民主的人进行了“敦敦教诲”，不要轻易的放弃自己手中的权益。那时候我已经高中了，你丫初中忽悠我还可以，高中你还忽悠我，我就是不能够放弃手中放弃的权益。起码我能够在最小的范围之内表明自己一个很简单的态度：假。有多少失败的国家摆在我们的面前为了所谓的民主而导致民族被撕裂，意识形态被分化。无数的人民拥护着自己的领导人其实不过是因为这些领导人许给了拥护者看似美好的未来。这个未来不够是刚好符合了这些拥护者的利益，迫害了那些反对者的利益。仅此而已。试看菲律宾，棉兰老岛自治区，安帕图安将自己的反对者的妻儿全部杀死在竞选的道路上。再看泰国，不断的政变整改，红杉军，彩杉军，粉杉军你方唱罢我登场，为了所谓的民主不断的破坏社会的安宁，国家经济已然开始倒退。阿富汗搞民主，选票比人口总数多出130万，荒谬不？我们的台湾，如果说我们国家没有大面积改革进入所谓民主选举的道路看看台湾就该明白，台湾可以看作我们国家的一块民主试验田。但实际情况又是如何，整个地区已经被撕裂成了两派意识形态的对立。到了台湾，你坐上的士，就有分别，司机就会过来问你，你是挺蓝的还是挺绿的啊。像一般的人不懂，因为这种问题你很难回答，一旦回答和这位司机投的是不同的政党，那你这趟车坐起来就很麻烦，如果你说我是外地人不懂这些事情，那他们还会骂你：什么，外地人就可以不关心了吗？相当的幼稚。现在的台湾，无论什么事情都可以上升到你赞同统还是赞成独，有些不过是民生的根本问题，也会被无限的放大到意识形态上面。政客们不断的作秀，民众们不断的喧闹。每年为这样的政治运动浪费掉了多少纳税钱财全然不顾。而地方势力所做的钱权交易又无法杜绝，地方势力依然可以靠贿选的手段做到这个村子的每一种选票都为己所操控。这些身在岛内的人难道不清楚？还是选择性失明的在民主的迷雾中自欺欺人。</p><p>说到这里我还想要解释的是我这里不是因噎废食。因为在我眼中要做到民主是需要有土壤的，我并不反对大家发出自己的声音，但我不能容忍我们绝大多数人还像孩子一样被老师操纵。起码在我眼中，民主要有两个条件，一曰钱：我们不能指望现在还有民生问题都没有解决的时候就开始谈论民主，都快饿死的人了给块馒头叫你选他你选不选？难道不给他们投票权？那就是穷人没有选举和被选举的权益？这算不算一种一刀切的阶级意识？难道我们还要做出奴隶和公民的区别？二为教育：在现在应试教育体制下有多少人真正的拥有独立思考的能力？和听从自己选择的意志？人云亦云的社会思潮又如何发出最公正的声音？我们绝大多数人都是做不到站在公正的角度去思考问题。那么这种私心和私欲就很容易被心怀恶意的人所利用，就如我上面举的人肉搜索的例子，这根本就是个法律常识的缺失，用我的话，你们都是那位凶手的帮凶。</p><p>我明白我自己的话多少有些偏颇，那最后用一个法学的例子来做个结尾。</p><p>　　《洞穴奇案》</p><p>　　五名洞穴探险人受困山洞，水尽粮绝 无法在短期内获救。为了维生以待救援，大家约定抽签吃掉其中一人，牺牲他以救活其余四人。威特摩尔是这一方案的最初提议人，但在抽签前又收回了意见。其他四人仍执意抽签，并恰好选中了威特摩尔做牺牲者。获救后，这四人以杀人罪被起诉并被初审法庭判处绞刑。</p><p>引用在此并不是想讨论在法律上这四个人是否有罪，而是希望人们可以代入威特摩尔这个角色，想想当民主选举出这种结果后，你该怎么办。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于杜拉拉</title>
      <link href="/2010/04/27/----56/"/>
      <url>/2010/04/27/----56/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-4-27 11:21</p></blockquote><p>其实就算我想扯淡，说点电影的事，我也实在不知道从何说起。首先我不迷才女，因为老早就曾笑谈冰山美人的重点是美人而不是冰山，老徐本就够不上我心中美人的标准，所以我自然就忽视了她是否有才。其次对于黄立行漏点，就算我有那个癖好，按照我妹妹的原话：“拜托，他经常漏点”。频繁的东西势必廉价，也就没必要让我进电影院下这个成本。</p><p>凑凑热闹写写书，《杜拉拉》这书我是看过两次的，当然从严格意义上这个说法有问题。第一次的时候我窝在书店里面蹭书看的时候，它还赫然的摆在畅销书的行列，翻了几页之后我就合上丢弃在一边，因为这种类型的书，如果写的是女性，例如《女秘书》，《女市长》之流，我都会很狗血的认为他们会把职场小说写成官场小说，再把官场小说写成官能小说。《杜拉拉》的开头还真没让我失望，很直白的开头拉拉就被潜规则，当然此时我还没有看到她拒绝潜规则那一页，我就合上了。主要是中国的作者太含蓄，其实写官能小说也不是个，一到关键时候就爱掉链子。也就不浪费自个难得的休息。</p><a id="more"></a><p>第二次我倒是确实的看完了这本书，边看边幻想某人的生活是否也是如此，按照她的说法，她们公司内部的斗争相当具有观赏性和可操作性。其反过来看《杜拉拉》则让我明显感觉相当的乏味，一个女人不断加薪升职争取自己利益的过程，其中穿插着一个光明的剧情和结局。好吧稍微解释一下什么叫做光明的结局，比如说《集结号》，最后烈士的遗体一定要找到，一定要升旗吹号，甭管你编剧乐意不乐意，这事ZF乐意。所谓光明的剧情，就是在杜拉拉一路高歌凯进职位步步高升，薪水日益丰厚的同时，她必须要谈恋爱，甭管你作者乐意不乐意，这事读者乐意。情场事业双丰收这是必须的，这不是部现实主义小说，现实主义就是干的好不如长的好，长的好不如生的好。本书开头想潜规则拉拉的那位仁兄就已经很清楚的说了：“拉拉，你真的不漂亮”。而全本更没有提到拉拉有什么家世背景，所以你看，这不是部现实主义的小说。介于它红白不沾的定位，所以我只能把它定位成言情小说，再让我客观一点那就是这是本女主角长的不漂亮的言情小说(其实这点也不客观，王伟形容拉拉的话我实在记不住是好是坏了)。言情小说最重要的一点就是找到代入感，作者很白烂的描绘了在职场之中我们会遇到的人，或者能够找到代入的形。比如吝啬怕事的老上司，外宽内妒的女老板，这样的角色或多或少都会在我们的职场生活中找到原型，而拉拉这种拼翻一切的姿态也从虚拟的小说满足了我们在现实生活中无法达成的窘况。而那貌似艰辛却有条不紊的升职之路。近乎是我们所有新人在公司里想看到出头之日奢望的体现。只要努力，丑小鸭也能变天鹅，其实我们从小看到的寓言故事就很不真实。丑小鸭顶多是只变成漂亮的鸭子，所以这个事，和寓言故事差不多，在一个貌似现实主义的框架之下用极其不现实的过程来虚构出一幅美好的假象。让大家乖乖掏钱买书，哦，现在还多加了一条，让大家乖乖掏钱买票。</p><p>这样的小说，如此的受推崇，在我看来本质上现在的年轻人心有多麽浮躁，单纯的觉得自己的付出没有得到应有的回报，单纯的觉得自己的才华没有得到应有的肯定。公允的说这本小说还是用到了一些词汇来体现时间的过度，来表达拉拉还是受过时间的历练，但是这些都很容易被人忽略。其实卑之无甚高论，以这个年纪的学识和见识，本就该处在这样的位置向上仰望，而不是异想天开的觉得自己已然超越了先辈们无数的智慧。如果这个年纪你真的达到了你所估算的位置，那么你也只是个异类，异类到这个社会和世界都融不下你的地步。如若你不信，请看张爱玲，所谓出名要趁早，究其晚年，实在不想多言。不过小说还是小说，电影还是电影。人生可以在里面找到很多喘息的空间，但却依旧要回到现实去面对你觉得贫乏的人生。一本小说，或者一部电影，其影响很快就会被淡忘。只是不希望看到那份世事的浮华，已然对着我们掀开了贪婪的口子。吞噬掉我们所有的灵魂，还有尊严。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎片</title>
      <link href="/2010/03/09/----55/"/>
      <url>/2010/03/09/----55/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-3-9 00:21</p></blockquote><p>之所以有这文字，就是因为我挤出了坐地板的时间碎片，开始想图图写写。</p><p>利用时间的碎片不是第一次了，因为我经常把整段的时间给浪费的，剩下了很小很小的碎片，然后如获至宝一般的把它们捡起来开始拼凑出一幅紧张的感触。其实有必要和没必要都说不清楚，说的更白一点就是我根本不懂的怎么利用时间。注意力的涣散和思想的冗余不得不做手动的碎片整理。能凑吧出来一点是一点。</p><a id="more"></a><p>有些事情一直想写，我到底什么时候才不能这么懒呀。为什么你们就是不懂，我真的会心痛，我站在即得利益者的角度都为你们消散的青春年华所不值得，你们还在前仆后继的走向灭亡的道路。我佛慈悲啊，救救苍生。我突然很想说这句话。</p><p>本命年的感触好好坏坏，有一点是可以肯定的，就是灾星和救星并行的时刻，已经让我感受到了温暖。我的头悬三尺的神明终于不再打瞌睡了。</p><p>这是个神奇的国度，这给予那些所有想看热闹的人一切的素材，静极思动啊，好，真好。历史证明，中国人自己不折腾自己，那简直是不可战胜，但吊诡的就是，我们就是个爱自己折腾自己得民族。看你能闹腾到几时。</p><p>突然发现今天时间好早，大家都好早睡，继续玩去了…</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>诗经·邶风·击鼓</title>
      <link href="/2010/02/14/----54/"/>
      <url>/2010/02/14/----54/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-2-14 06:24</p></blockquote><p>总是在特殊的日子就开始给予特殊的感伤，有时候我都理解这种情绪近乎于无聊，因为这个时候可是时间啊，不管你怎么想都是会来的。而赋予的特殊意义就像是自己给予自己加诸奇妙的味道，真切的感受它在喉管里流动着。</p><p>我经常在某个瞬间呆掉，这个瞬间我会陷入很深的迷茫和恐慌，仿佛觉得一切都很奇妙，感觉这个人怎么会是存在在我的身边，我怎么会有如此的陌生感，在这个时刻，在做着这件事情，这种感触夹杂着很多的幸福，虚幻，以及很多莫名其妙。我试着抽离自己去想想这样是否是幸福的感觉，又或者是不知不觉自己陷入的迷思。现在幸福的一切的一切都是自己主观的一厢情愿，而在下一个瞬间很多事情都会打破这份在一起的感受，我们互相埋怨，互相的不满乃至于翻出很多的旧账指责着对方的忘恩负义。很本能且主观的不想受到伤害，不想受到伤害的唯一方式就是去攻击对方，不管自己是斗败的还是斗胜的，其实都遍体鳞伤，都不肯放下。</p><a id="more"></a><p>是否是太年轻了，年轻的容不下自己的世界有一个另外一个世界的侵犯，这个侵入不是可以用生活上的相依相伴就能够掩饰掉的，我们都捍卫着自己的疆土，而我们又都太年轻了，抱着内心的疆土比谁都重要在执着，一刻也不放松。即使我已经渐渐的开始感受到所有的一切一切都是你学习来的，并没有什么是你与生俱来的东西，但“我执”这个词却很难放下。哲学都被我们滥用了，我们开始莫名其妙的告诉自己什么是自己的底线，什么是我不能接受的，你最好不要侵犯到我最后的尊严，为了这样或者那样的一切，发现对方总是有意无意的去践踏自己认为真正珍贵的东西。开始不可抑制的发作，你怎么这样，你怎么不懂，你怎么连这点都不放过。一遍遍的去原谅对方，其实心里告诉自己我的领地又被伤到了。最好下不为例，为下次却依然再犯，换来更大的愤怒和伤害。于是有一天突然开始学习用爱的名义为对方掩饰，开始试着了解本不属于自己的领地，即使是装了解也好，也许这样的伤害会小一点。我知道你的什么什么，但是……其实哪有“我知道”，只有“但是”。说话的方式就是前面半句其实没有意义，我们却相信这样的说话方式能够让对方更好的接受，其实对方连“但是”后面都没有听到。我们总是选择性的失聪掉自己不想听话的话，因为我们不过是个凡人，对自己不利的时候就开始原谅自己的平凡，而不再告诉自己是那么的独一无二。想想如果真的是如此平凡，你的执念又有谁在意呢。</p><p>回来的时候外婆病了，我回来时候就看望了她老人家，病痛折磨的她略显的有点苍老。看的我很心疼，但是我依然是个不懂的表达情绪的家伙，只有玩世不恭的说着不着四六的话来转移情绪。送外婆出病房去做B超时候我看到我的外公（虽然不是真正的，但从我有意识开始，这个老人就扮演着我外公的角色）从电梯里出来，他并没有对我回来有我想象的兴奋，而是立刻俯身下来询问我外婆的情况，问得话都很平淡，而伴随着福州话以及老人家特有略大的嗓门，其实很难说那是种温柔，但他直起身的时候我看到他眼神里的焦虑我觉得我一瞬间我读懂了，读懂了自己的愚蠢，也读懂了他们的幸福。他们的爱情早就超脱了我这种孩子能够理解范围，他们已经不在是需要文采去修饰的爱情，而把所有对对方最真实的情感都包含在了最平淡的语言上了。他们根本就不会去提一些我们这些孩子还在考虑的幼稚问题，这份看似平淡的心定是需要多少沧桑换来的。我不需要告诉你我能赚多少钱回来，我也不用告诉你我有多么漂亮，而这份相依只是因为彼此的存在，直到生命的最后一刻。在这个生命的进程里面，我们都看到了彼此，很难想象失去彼此的生活有多么的寂寞，而要在一起我不要你为了做什么，我只要你好好的活着，只要生命能够延续下去，我们的爱情就能延续下去，我们彼此分享的生命就不会在这一刻结束，请活下去吧。</p><p>在我已经开始怀疑那句我挚爱的话：“从今以后我们只有死别,没有生离”的时候，我又开始相信这个世界上确实有着无数相守的两个人，我们用掉了一半的牙齿去吃麦当劳，你扶着我因为中风而不再便利的身躯花别人几倍的时间走完这条小路。我们相视而笑，当年我们相爱的一切理由都随着生命的流逝从身上丢掉了，但我们依然相爱。当我开始理解这个时候，我发现这不过是一种心定，我不会拿你身上的缺点去和别人比较，我不会因为你有这般那般不好就去说你怎么不学学某某某，脾气不好又如何，懒惰又如何，如果这些不是和别人比较，又怎么会得出这种结果呢。而在我眼中就根本没有别人，你又怎么会不好呢。因为是你，都是微笑才有意义，因为是你，都是艰辛我也愿意承受。因为这一切的一切都会消逝，而我对你的感情从不参杂着这份因素，这一切从一开始就不是我爱你的理由，所以请不要在意你已经不再青春的年华，不再窈窕的身材，不要聪明的智慧，那些对别人有意义，但对我没有。此刻看着你的我，就是我对你的爱情。</p><p>我一直是个很倔强的人，经常有人喜欢对着我的生活指指点点，我总是自视很高的认为别人的观点非常浅薄，而且如果这些道理真的如你们所说的那么管用，为什么你们的人生过的如此不堪。不过在爱情上，我应该收拾起自己的傲慢了。外婆只是简单的说了：要幸福啊。也许很多人都告诉过我了。但只有这一刻的他们让我如此感动。是啊，要幸福。在这个美丽的节日里，如果你爱他(她)，收起那该死的一切，丢掉所有“我执”，因为在这个时刻，他(她)就是你的一切，所以请平静的走到你的爱人面前，真诚的对他(她)说一句：我爱你。在这个略显冷漠的城市里，在迷失和彷徨间，让他(她)知道，冥冥之中，自有一双属于你的双手，它们紧紧地握住你，陪你走过所有的阴天和所有的艳阳天，直到一生一世。</p><blockquote><p>执子之手,与子共著.<br>执子之手,与子同眠.<br>执子之手,与子偕老.<br>执子之手,夫复何求?</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我回来了</title>
      <link href="/2010/02/11/----53/"/>
      <url>/2010/02/11/----53/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-2-11 21:37</p></blockquote><p>摇头尾巴晃，我跟随着长途车晃回福州。</p><p>外婆住院了，希望一切都安好，年前要顺利出院才行，身体才是最重要的，帅帅也病倒了，当然它基本是自作自受，没事去翻沙发垫子里面，导致眼角结膜炎，看它被抓去打针的样子我都不忍心看。打完针继续本着窝里横的角色在家里跑来跑去，越发富态了，还是那么的精神呀。</p><p>回到家发现要的书籍都已经到了，学习呀学习呀学习，每天的时间是这么的不够用，睡觉又是不可以少的，那偶尔偷懒就没有关系了，新年美好的愿望和欲望全部都扎起来，量贩也好，拿下也好，反正一个都不要给我放跑了。每天都希望自己能早点起来，但是为了这个要我早睡觉那更不乐意，所以这种矛盾就留着以后再说，现在先奋不顾身的玩吧。</p><a id="more"></a><p>如果还有伤心难过的事情，那就先丢在脑后吧，只要跟着音乐放声歌唱就没有烦恼，为了这个我把我的吉他拿出来好好的擦拭了一番。虽然我现在还是什么都不会弹，不过想想自己抱着吉他的样子是不是很有音乐气质，不会弹不要紧，形象很重要。拍个照留个念吧，把你封存了这么久。</p><p>显示器被搬走了，本子变成我工作游戏两用机了，虽然在广州的日子这一切早已习以为常，但是在家不能躺在床上学滚滚这是在是件很悲剧的事情，本子就是没法让我学滚滚的。这个问题看来还是要解决的。</p><p>呼吸呀呼吸，大口的贪婪的疯狂呼吸，不要客气，本命年，老虎老虎，我来了。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Please don&#39;t say &quot;you are lazy&quot;</title>
      <link href="/2010/02/04/----52/"/>
      <url>/2010/02/04/----52/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-2-4 11:27</p></blockquote><p>有时候，你也要很努力的去懒。</p><p>我经常这么告诫自己，你就拼命睡吧，拼命玩吧，你总有一天会腻的，会烦的，等你烦了，腻了，那你就开始收拾心情，整理一下着装，推开窗户，让阳光洒进房间。叼上一口猪肉脯，坐在电脑面前屏息凝神，开工。</p><p>在你们的眼里我时常眼神涣散，对着一幕幕无聊电视节目呵呵呵的傻乐，并且用各种不同的姿势在床上翻来覆去，唯一相同的就是脸所对着方向，那就是电脑。小时候总觉得天才就是那种在人前什么事情都不做，在人后还是什么都不做，只要想做就会无所不能的人。长大一点了就开始唾弃这样的骗局，人前风光人后心酸呀，原来都他妈的是在装蒜。不要在我面前伪装的和我一样懒，我是真的懒，你只是在装蒜。虽然有人提醒过我不该跟你们为伍，但是我比你聪明，这点我还像过去一样的自信。即使你现在把我拉下了，我也能追的起你，而且义无反顾。到我骑着战车，后面跟着三个舞木头棒子的小人向你冲刺的时候，千万不要那么惊讶。</p><a id="more"></a><p>有见过孔雀吗？撅着屁股走来走去，说不开屏，就是不开屏。</p><p>人都要忠于自己的本能，只要那不是被盲目的迷惑就可以。禅说里被我认为人生最高的精髓，饿了就吃，困了就睡，高兴就笑，伤心就哭。别觉得容易，其实都做不到。</p><p>宽容的对待自己，宽容的对待别人。或者严苛的对待自己，宽容的对待别人。如果你想反过来做，那就是找死。</p><p>你说的我不是听不进去，只是你觉得那些见解在我眼中有点肤浅，万千变化之中你要相信这个世界的价值观是多元的，多变的，乃至于所谓的很多事情都无法做出公正的判断，与其盲目的相信你，不如让我自己去碰碰钉子，不是说犯贱一定要自己疼一次，而是我凭什么抄近路越过这些所有人都要经历的坎坷，释迦摩尼证得无上菩提可不是靠别人教出来的。</p><p>非不能也，乃不为也。</p><p>被人轻视，即使是我，也会有不甘心的时候。咬牙切齿，你别太得意。</p><p>本能(ほんのう)に従顺    忠実(じゅうじゅんちゅうじつ)    翻弄(ほんろう)も重々承知(じゅうじゅうしょうち)</p><p>前途洋々(ぜんとようよう)だし    だからたまに休憩(きゅうけい)しちゃうんです</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>倔强</title>
      <link href="/2010/01/29/----51/"/>
      <url>/2010/01/29/----51/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-1-29 10:55</p></blockquote><p>慢慢来，才是最快的方式。</p><p>对于摆在眼前的事情显得有点焦躁和不安。我经常给自己放纵的门槛。因为你很懒，你必须比别人聪明，因为你很懒，你必须比别人效率。我就是这样压缩着时间，浪费着时间，然后被时间追着一路狂奔。那个半夜的率真，笑对明早就要交付的项目。还有无数的文档和用例图要笔笔划划，搞的自己狼狈不堪，真的很滑稽。</p><p>一份慵懒的背后，看来我需要走几个地方去换个心境。倦怠倦怠无限的倦怠，老毛病又犯了，这个很简单，这个太容易，这个没必要，这个无意义。对着眼前的一切指指点点，然后它们也反过来对着我指指点点，乃至我们怒目相向直到破口大骂。该做的还得做，丢在地上的纸张，你不捡，它就永远在那里。</p><a id="more"></a><p>最近变得很想福州，似乎生活总是这样，快要接近的时候反而有点迫不及待。回去很迫不及待的想做一件事情，翻翻我家里的一本家园杂志，你们的安逸和幸福因为这里是福州吗？因为是福州所以笑了，因为是福州所以安全，因为是福州所以幸福。但是我记忆里的小破城市(这是褒义词)还是挡不住该死的城市化进程吗。你们可以与世无争，你们可以隐居乡里，你们可以缝缝补补，你们可以丰衣足食。这时候最大的尊严就是笑着对他们说：我只是在陛下的恩德之下，酿酒，买面包的读书人而已。也许哪一天我不再自闭了，我会搬上板凳坐在你们的身边，去认真的聆听你们的故事，我相信你们对这里都有你们的故事，请把这样的幸福分享一些给我。我福州话很好，不用怕没法交流。</p><p>戴公逸文，陈婆晓岚，那个网络小说近乎媚俗的年代，唯一让我记住区别的是喜剧的结尾和无数的:)脸。不管是真是假，也许笑是有很多种方式和形式的，但都请不要哭丧着脸，混杂着过去几年的汗水和泪水，那一定是你将来笑下去的资本。我也会一直看着你，试着让自己变成你真正可以依靠的人。:)</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有些没有变，有些变了</title>
      <link href="/2010/01/05/----50/"/>
      <url>/2010/01/05/----50/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2010-1-5 17:07</p></blockquote><p>一年前我笑称我对你的优越感就存在于我还在我的轨道上，你已经离的很远了。</p><p>一年后我看看自己似乎也不再轨道上了，但我还在拼命找借口说自己也许还在轨道上。曲线救国啊，我们谁都不愿意承认自己的改变，但是我们都变的不成“人样”。</p><p>虽然我还坚信自己截然一身走在街上看着世人的安逸是我的追求，但现在说起来就仿佛那个笑话，都说红颜是祸水，谁都想要，都说死后去天堂，谁都不去。</p><p>没有足够的阅历是无法写出渗透心扉的歌词，你们的哭和闹总是那么的假，但是有经历的人总能让人感受的真切。</p><a id="more"></a><p>だけど何とか进んでって ，だから何とかここに立って，仆达は今日を送ってる</p><p>我会写一个书评的，等我看透了那本书后，但是我不想看完后给我的生活找太多借口。</p><p>其实有用的人都让人很难记住，而没用的人都让人记住了。人们还是喜欢悲剧的色彩，那些人在国家安逸的时候没有作为，在国家危难的时候一死殉国。美名呀，为什么能够流传下来。读书人，明理还在其次，气节才是最重要的。这话出自一个很普通的电视剧，但看的我怎么这么感动。实用主义不能放一放吗？</p><p>何だかとても嬉しくて，何だかとても切なくて，大きな声で泣きながら</p><p>赢的高明，有时候并不是那么的重要，过来，和我漂漂亮亮的输一场。</p><p>步姐，十年过去了，你的歌……</p><p>但愿今天到永久 祈祷这歌声能够 能传到你们左右 在你们身边停留</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喝水比喝饮料重要</title>
      <link href="/2009/12/16/----49/"/>
      <url>/2009/12/16/----49/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2009-12-16 14:04</p></blockquote><p>莫名其妙的又病了，似乎从回家后就没有好过，一直反反复复的生病。好冷的天气呀，广州降温来的出人意料。我以为能依靠上天的暖冬和单薄的衣服过冬呢，看来还是要裹紧自己在寒风中瑟瑟发抖啊。</p><p>面纸姬大爱，一手的好bass，整的我都想买一把玩玩。伪娘以及非伪娘的战争真是无限扩张，即使面纸姬已经有宝宝了，还是没完没了的扯淡。说到这里，今天突入百度伪娘吧，无比的雷啊。互相吹捧以及真假难辨的性别，你们都淫了，我回去当我的古人了。这个世界不适合我了，顺便劝导那些想装年轻的“老人”们，你们都过时了。承认吧，你们的一个时代到来了，你们的另一个时代死亡了。</p><p>虽然已经没有时间看书和学习了，但是我没有认为我的思维到此开始停滞了，虽然这点无端的增添了我很多的厌倦和烦闷，我还是无法做到吉恩那样，静静的看待一切的发生，然后把一切记录下来。国家就像机器一样运转起来，但就是不会保障每个人的幸福，太容易用口号告诉你为了保障绝大多数人的幸福，你们就牺牲一下吧。死亡的可怕，凸显了生命的可贵，就是这样，才有了矛盾的我。如果我是虔诚的信徒，那么死亡又有何惧，如果我不是，我将来要走向哪里。</p><a id="more"></a><p>Bless 高中英语第三册基本词汇，做到的，做不到的，去做或者不去做。也许都是安排好的。努力也是安排的，放弃也是安排的。那我的意志又摆在何处，连意志都是被安排好的。那就不要让我有难过的时候，到我要面对困境的时候就安排给我能够接受一切的心态好了。</p><p>对玩游戏的欲望越来越淡了，对于每天偷闲的生活兴趣也越来越淡。突然发现我对一切厌倦都是源于腻了。什么都会腻的，包括玩游戏。慢慢的也许我不用换一个又一个游戏来保持自己对游戏的兴趣。而可以找到更多更花时间的事情让我没这么快腻味，去选择更大更强更难达到的目标去完成。有点畏惧自己会半途而废，或者被小有所成冲昏头脑，其实我该谦虚一点的。</p><p>　　</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仅以我的名义</title>
      <link href="/2009/12/10/----48/"/>
      <url>/2009/12/10/----48/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2009-12-10 09:54</p></blockquote><p>震破耳膜的歌声又开始回响起来了，换回原来的手机使用，发现很多我丢失的歌曲都存在其中。有人说的对啊，为什么听歌非要歌词，你们白目吗？音乐如此直接的表达的方式你们会听不懂，非要说出来才知道情感的声嘶力竭。</p><p>可曾记得爱，那划破长空的悲壮混杂着我们童年没有看懂的悲凉，在那样的年代，只有成熟的“大人”才明白，分别就是永别。即使只有我一个也不会感到寂寞 因为我有你们…</p><p>视频里面的话怎么那么熟悉，我已经年老体衰记忆力下降了吗？你也许觉得很生气，也许觉得很委屈，但在这一刻，正因为你所能感受到的，才使自己的生命更加精彩，不是吗？</p><p>现在没做到的，我将来会补给你，这不是欠你们的，是因为爱你们。</p><a id="more"></a><p>离开科技园的时候我放声歌唱，人与人之间二十米以上的距离让我感受到了安逸，我不认识你们，你们也不认识我。我们都是圈子里的生物，也许就好比作羊，但你也不是我的头羊。离我远远的，动物和人一样，在我的领地，我能动你我一定动你。</p><p>几天的阴雨终于有了阳光，晒的人暖暖的直打呵欠。开始接触自己想涉猎的领域，一直接触下去你总能碰到你所期望得到的东西，虽然现在有点无从入手，但一切都不算太难。</p><p>我想回家的时候做饭给你们吃，也许你们也会说我的手艺可以一尝了。呵呵</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找到自己</title>
      <link href="/2009/11/30/----47/"/>
      <url>/2009/11/30/----47/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2009-11-30 15:49</p></blockquote><p>挑剔的是我们的秉性，而不是我们的品位。</p><p>在成长的过程，真切的感觉到人和人之间有多少的挑剔和不满。要用平和的心情去写下这样的文字总是很困难的。但是我却突然想诉说这些事情。不用怀疑，我最近什么事都没有发生，因为这样的事情每天都在发生。</p><p>长期以来我都期望有人能够宽容的对待我（其实有时候我想的更是一种纵容），那样似乎会开始符合我想要的比较写意的人生。但往往很多时候我对别人都没有做到这些。我们都有很明显的心理预期，一瞬间的表情和一瞬间的语调都会被激起很多的波折。这样的例子在我从小到大不知道发生过无数次了。但我总会在察言观色下开始得意忘形，总能讨来一顿没趣。其实我觉得有些事情我没有错，但我总逼迫自己用最和缓的语气去诉说我的心情。而不能有任何的不耐烦。不知道你们去逼迫回教人吃猪肉他们会不会很和气的告诉你他们的宗教信仰还是换来一阵白眼乃至一场械斗。君子和而不同，小人同而不和。我们的至圣先师还真不是盖的。几千年下来，经验全部作废了，原则却依旧闪光。</p><a id="more"></a><p>其实认真想想这种宽容也只是我自己的想当然，其本质也不靠谱。与其说我要的是宽容，不如说是一种鼓励和赞美。要的就是你们同意我的观点，我的思维，我的想法。但有这样想法的对立面，其本质就是我对你们的不宽容。所以啊，才会总有人告诉我：“你总是挑剔别人而放纵自己”。我自诩还不是个控制欲望很强的人，为什么依旧逃脱不了需要别人肯定的怪圈。而且是没有任何犹豫的肯定。想想都觉得我对你们很过分。</p><p>也许在我外表下隐藏的另外一个自我，我并不是我自以为的，一个想藏在泥巴里独善其身的隐士，我只是害怕告诉你们我的心里话，我只是害怕自己没有办法达到自己的期许。就如我那被压抑已久的性情一样。我想做到的谦让和恭敬总是不自觉的表现出傲慢和自负，混杂的残渣的自卑，让我和你们的交往连自己都觉得扭曲。也许我的理念总是教导我这样欲望是不对的，总是在不断的压抑自己，让自己可以在自己精神层面上可以安慰自己。当这份精神上的安慰已经不能满足自己的时候，我总会调节一下，用一件事两件事证明自己没有什么事情是做不到的。是的，我害怕你们的嘲笑，我害怕你们的不削，还有那份喝倒彩的神情。恐惧，逃避，不可接受。</p><p>突然发现我多么渴望着聚光灯，舞台，还有那些能让自己闪耀的一切。我也不是可以随随便便过掉的人生，我知道我要好好活着，因为要死很久，这话我听过就忘记了。现在我记起来了是不是，既然记起来了，那一切都是不同的了。现在都他妈的给我记住，该死的人生，我不是父母的续传，不是子女的前传，更不是朋友们的外传。我知道我今天写下的东西也许我下一分钟就会忘记掉。但是这些都是我确实渴望的东西，我现在真切的知道这一切，你不给我灯光，我就自己给自己打灯，你不给我舞台我就自己给自己搭建舞台。我一定要让自己站上那个舞台闪耀，即使这一切，看似遥不可及，但是，此刻记起来一切的我，朝着自己的信念，真的很甜蜜。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标准的胡言乱语</title>
      <link href="/2009/10/08/----46/"/>
      <url>/2009/10/08/----46/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2009-10-8 02:22 与30岁修改过</p></blockquote><p>你好 ，23岁的自己 ，我已经30岁了 我并不能说我现在有多好，但我还是比你好一点 。看着你这个样子，我表示很心疼，而我并不想35岁的自己来心疼现在的我。<br>你好，23岁的自己，还有那个30岁的自己。 </p><hr><p>我是不是犯了所有人的戒，我活着就让你们所有人都不满意，我知道你们都不满意，我活着就留下了长长不满意的名单，这个不能做，那个不能做，这个没做好，那个没有做好，你准备好了吗？你做的来吗？你可以吗？我不需要那么多话你可以吗？</p><p>所有的事情该我承担的就是要去承担的，不该我承担的东西还没出生呢，想什么呢小子，生活才打开那么渺小的一页。你就越来越受不了了吗？我很自然的坦言可以死。但是你会死吗？这个世界还是很棒的不是吗？很多事情我做不出来。我让自己烤火却没人领情，总有聪明人告诉我犯不着这么傻。其实我有时想想，确实犯不着这么傻，但做选择的时候我还是很傻。也许我也有人人称羡的时候吧，但那也只是自作多情而已，没人关心你他妈是不是还是你他妈，但是你他爹却永远是你他爹。这话我骂谁来着？很好，再让我回想起来一些吧。那些我骂别人的，我却自己深深的陷到了这里面，我的话只能帮别人，不，也许谁都帮不了。我知道了，我的话就是用来自己嘲笑自己的。这个世界有些人就是该死的，比如像我这样的人。有个电影来说把人类灭绝掉就好了，反正活着就是制造垃圾。有时候想想也是，每天丢出去的垃圾怎么那么多。他们到底是怎么被搬进家里来的呢？我们总是拿垃圾包食物，吃掉食物再丢掉垃圾。我在说什么呢。呵呵</p><a id="more"></a><p>我常幻想啊，有没有人啊，不管我做什么，我吃什么，我想什么都不管我，但是他们就是对我好的呀。琅琊吗利儿郎，这样的好事去哪里找的，你的语言人家反对，你的思想别人嘲笑，你的出身有人鄙视，哪怕你只是站在那里什么都不要动了，还是错误的。就是错的，因为事情都不如你的意思，因为这个世界不在乎你的思想，言行，举止。这个世界怎么转的我不知道，但所有人都知道不是我推着转的，所以我何必多此一举。我站着，坐着，躺着。有时候自己挺开心的，就算只是傻乐。我看书，上网，和朋友在一起。即使我格格不入，我也想步步紧跟。不过看来你们是嫌我走的太慢了。连紧跟的权利都没有了吧。生活的人亿亿万，何苦呢。我跟上了一个，跟不上下一个。他们的幸福因为我没有按照他们的要求做。我的幸福就是他们告诉我的那个世界就是幸福。我依赖你了。多好的一句话啊，那所有的一切的一切，全部在我越发憔悴的脸上消散开去。你们也许只是关心我能做什么，不关心我要什么吧。其实马儿不吃草也能跑的快，不知道方法了吧？就是往死里抽啊。抽死了换一匹就是了。然后踹踹这匹死马，怎么这么不经跑。今晚加个餐吧，马肉也是食物不是。</p><p>活着犹如丧家之犬，死了却名流千古。我想孔子他老人家应该很高兴。但要是我就不高兴，为什么不高兴，因为我死了，属于我的世界就没了。所有爱的，恨得，一切都消散的。我现在咬牙切齿的想要撕碎这个世界，但如果我敢从身边开始，我只要滑坡一张纸片都是在犯罪对这个世界犯罪，心情的发泄没人关心的。哪天也许我会疯掉，疯掉之后我就不要考虑这么多事情，我只需要考虑什么时候能够醒着。疯子就是那种别人看起来很不幸但自己却很开心的人吧。他们真的很幸福啊，因为人活着到底有几天可以属于自己呢。活着大家活着都为了自己，但我却傻到觉得大家高兴了我也高兴了，就这么傻呼呼的其实所有人都不高兴。让我高兴几天，也许我疯掉几天，会对什么都好，起码我不用想着死不是吗？死的一点都不爷们，疯掉也许是个退而求其次的方法，不过话说回来我是不可以疯的，因为我哥哥有过，所以我不能步他的后尘，如果我疯了，他们会说陈家怎么尽出疯子。多丢家里人的面子。所以我还是不能疯，你看我还是很为家里人着想的，可是谁领情呢。</p><p>我很关心鬼鬼的世界啊，有多想站在他们的角度看着这个世界这么傻。也许我身边就有很多家伙看着我犯傻。他们在笑是吧。等我寿终正寝的时候我也会和你们一样了。到时候我也许就自由咯，不过我不能意外，因为听说意外的人呐死后很不好看，寿终正寝的人死后就可以自由选择自己的样子了，那我肯定会选择五岁时候的样子。那时候很帅吧，我知道我现在很丑，不招你们的喜欢。那我回到五岁的时候你们满意不？其实我要长什么样子又不是我能决定的，还有那一切的一切，我都决定不了，我出生了，有人就比我壮，比我聪明，我有什么办法，他们就是比我厉害。我到底是什么样子难道真的是我能决定的吗？我很疑惑的这一切的一切，如果都不是我造成的，那我到底又做错了什么呢。也许上辈子没做好事吧。呵呵，上辈子的事情啊，上辈子我到底是什么样子的人呢，中国有人连砍六十多人，下辈子应该会被发配到印度贫民窟吧。真是可怜的人啊，不过好像没什么好同情的，谁让他这辈子没做好事呢。那我这辈子也先做点好事，让我下辈子聪明点吧。IQ正常而EQ发达好不好。这样我就知足了，我还是挺好满足的嘛，不要对我这么残酷。</p><p>我已经很久听不到您的声音了，也许我是被什么东西蒙蔽掉了您的声音，也许那个时候我认为那是自言自语而惹恼到您，但是请您的声音再度回响在我的脑子里吧。如果我所有的愿望都无法实现那对于一个平民就太过于残酷了，虽然我现在的生活大家看起来都还不错。我爸爸妈妈都还是很爱我的。我的heroes也一样。但我不能说，咬牙切齿对这个世界说，我不能说，我不是怕他们帮不了我，只是怕说了只是让他们不满意而已。那他们到底爱我什么？有时候我也不知道，但是他们爱我的感情我却知道的很明显，如果我再乖一点就好了。我这辈子是省心呢还是不省心呢，是个让他们骄傲还是耻辱。如果你低头就会被按到土里。如果你抬头，也许只是被把头压低。怎么样更好过点，也许躺在地上也不错吧。可是尊严呐，那就是舒服的事情不要去干就对了。</p><p>我很想念早安美之晨，你还开着吗？如果一杯栋奶茶加上肌肉三明治只要五块钱的话，我想现在的我还是负担的起的，但是为什么你离我如此的遥远呢，即便你和我只隔了几条街，我很难过，为什么不让我吃早安美之晨，其实它不贵对不对，写意的生活该从什么地方开始抒写，对着开水大放厥词，你已经过期了，拿起蚊拍对着蚊子翩翩起舞却一只都没有打到的日子。纪念我的23岁啊，我的23岁生日已经过去了，伴随着这个秋天的凉意，没有舒服的感觉却很寒冷。龙族里面的魔法之秋来到了吗？肯定没有，因为我可不想在初雪下下来之后连剑都拿不起来。有时候我多想我只是个祭祀，而我没有出家的理由只是他们不会手上发光。现在是长假的最后一天，我在福州，你们在哪里，你们在哪里，你们在哪里。流沙穿越了我指缝，什么都没有留给我。我明知道他们都在流逝，却显的那么的无能为力。</p><p>莉香为什么最后还在微笑，因为除了微笑，她什么都不能留给自己。所以笑吧。即便他们觉得你是疯子，开始笑吧。不笑白不笑。即便什么都留不下的疯子，也不要去做傻子，所以把微笑留给自己，把背影留给这个世界，他们是不在乎，但是我在乎那最后背影的帅气。再潇洒一点，你是最完美的。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念</title>
      <link href="/2009/07/25/----45/"/>
      <url>/2009/07/25/----45/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2009-7-25 18:45</p></blockquote><p>猪通过勤劳致富有50元钱存在老鼠开的钱庄里。猪打算拿这50元钱建一个小窝，大概要花20元买地，花30元搭窝。<br>王八是搞工程的，他想在猪身上挣更多的钱，于是找来当投资顾问的狐狸想办法，狐狸说：这好办。于是找来管地盘的狼，开钱庄的老鼠一起来商议，结果王八从老鼠那里借来200元，用100元买了狼的地，花了3元把猪窝盖好，花了50元给了狐狸咨询服务费，猪没有地，只好求王八把窝卖给它，王八要价500元，老猪说只有50元买不起，这时候狐狸说服猪去向老鼠借钱，老鼠答应借500给猪，前提是要他连本带利还600元，可以分10年还清，并且产权证拿来抵押。结果成交。</p><p>猪到最后花了600元买来了猪窝，比他原来的计划高了11倍，猪努力了十年去挣钱还贷。在这场交易里面，狼，老鼠，狐狸还有王八都挣了钱。以后他们就如法炮制。更多的猪去贷款买房子了，这时候，当商人的驴看到有机可乘，到老鼠那里贷了好多好多的款，把王八盖的房子都买下来，然后以更高的价格卖给了猪。猪的还贷期就越来越长，吃的越来越差，小猪崽子也不敢生了。由于猪的数目越来越少，狼觉得这样下去自己没有猪肉吃了，非饿死不可，于是开始调控，不让老鼠再借钱了。但是王八还没有停止盖房，把自己挣的钱和贷的钱全投入生产了。驴手上的猪窝囤积的很多，卖不动了被套牢了。结果，老鼠，王八，还有驴都挣了好多的猪窝。钱到最后集中到狼手上。如今，谁都等著狼把钱拿出来救命。于是4万亿就这么出来了</p><a id="more"></a><p>最近传闻我家某亲戚自己买了房，还贷三十年，长辈们觉得还挺出息，父母付的首期自己去还贷。我其实挺不知道他将来去拿什么追求自己幸福人生的。坐着板车朝天望的潇洒，还是关着三十年后才属于自己房子望不到天空？</p><p>其实人就是没有这么聪明，一个骗局三百万人都难有一个人看出端倪。比如每天股票动一动，和赌博差不多。人家忽悠你运气也是技术的时候还真他妈拿自己那点资本当起手艺活了。</p><p>我们每天都在被迫做很多事情，因为我们也在强迫别人做很多事情，其实我很无辜，因为我几乎不强迫别人。但这并不能避免别人用各种名义来强迫我做这做那，这里面有的是好听的词汇。中国人要面子的呀，面子真是个有意思的东西。记得我姐夫说当时灾区那些事sb知道要做，他当时就想往里面冲来着，只是被拦住了，否则他要冲进去回来表个彰，也许还能转个固定工做做。传闻某喂奶的大妈连连跳了。想必也就是这么回事。</p><p>血缘关系真是很复杂的关系。不知道是不是很多人都这么看待，但是我对血缘的关系好简单的，你们喜欢怎么做就怎么做，最后倒下来了，我接着你。但现在情况就是，有人天天告诉我如果我倒霉了，也别回来求我。乡下老说快死了留三百坐车去郑州。我相信这话，所以看来我还是有地方可以去的，这话就宛如当年我大学毕业那种茫然，他也这么告诉我。貌似这家伙一直这么支持我。突然想到这里有点很感激。不过谢谢我又说不出口。想想还是算了，等下半辈子还了。</p><p>My heroes,等我走出这段阴霾，咱们欢聚一下。。:)</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其实最近一直想动笔的</title>
      <link href="/2009/06/13/----44/"/>
      <url>/2009/06/13/----44/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2009-6-13 17:03</p></blockquote><p>我现在仍然认为，自己的人生要自己掌握，可是无论是谁，只要承认了人是不可能那么坚强的，就会变得比那个时候更加温柔。</p><p>生活开始感受到自己必须长大了，过去被呵护的很好，即使我认为是一个人在过日子，其实也有很足够的安全感，即便是现在自己工作的时候，我也很清楚有个地方可以回去，即便会被责骂，会被念叨，但是他们不会不接纳我。妈妈早上告诉我梦到我抽烟了。从我口袋中掏出烟盒应该很不像样子吧，不过前段时间我倒是真切的开始考虑自己是不是应该开始吸烟了。也许他们都和我一样，什么都不想去说，但是都一直把儿子挂念在心里。</p><a id="more"></a><p>广州的雨下个没完，沉闷的空气让这个即将步入夏天时候来的不够爽快。从小体弱不过仰仗父母在医院里还混个脸熟，即使有很多人说医院的黑暗我的感触依旧很低。虽然在饭局上他们谈笑生命的习以为常让我为之厌恶，但从没向此刻如此憎恨这个地方。无论怎么想象的感同身受，果然只有真实的触碰一次才觉得有多么冰凉。今天在电梯里和同事讨论那个七百多的医单，得出了很熟悉的感慨，这年头病不起，还死不起。同事搭话：活不下去也就算了，死都死不起。呵呵，凄凉吗？不会，事实就要以事实来接受，然后改变掉。</p><p>拒绝离开家和拒绝长大近乎有着一个意思，当人被迫走出来的那一刻，成长近乎于不可避免，很多幼稚的话我不会再提了，接下来只有好好努力了。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓緊</title>
      <link href="/2009/06/09/----43/"/>
      <url>/2009/06/09/----43/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2009-6-9 16:05</p></blockquote><p>　　誰都不幫，勉強說的話，正義的一方。</p><p>　　啊，原來如此，一切都不是什么巧合不是嗎？</p><p>　　因為害怕嗎？我害怕失去。</p><p>　　你有這么需要同志嗎？別拿我和你相提并論。</p><p>　　食物中毒？我忘了告訴你冰箱里的面包已經壞掉了。-_!!!</p><p>　　緬懷青春？</p><p>　　用力的分開雙腳，拚命的低讓自己站好，覺得自己變成了一座雕像。</p><p>　　現在最重要的就是，明天一整天，做什么好呢？</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不要当我的假想敌</title>
      <link href="/2009/05/23/----42/"/>
      <url>/2009/05/23/----42/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2009-5-23 15:41</p></blockquote><p>广州的雨也算是下的没完了，我果然不能白来一趟广州，如果和某人一起看到这么大雨的时候我很想踹他屁股说去淋雨啊，发什么呆，那些不都是你想要的吗？现在那里多的是。</p><p>想要和我讨论一些道德问题吗？很好，我们就来探讨一下道德问题，比如说我认为大义灭亲的都是畜生。不认可吗？可惜我一直没有觉得道德是凌驾在亲情之上的东西，对家人的宽容近乎于必然。对家人刻薄而选择自己道德上的满足感近乎于变态。很多人在启用道德的规范的时候其实就是为了获取自己内心的满足。这种人相当的多，而这样的人又往往又做不到孟子的舍身取义。难免在道德的拉扯中把自己拖垮，最后留下了一个伪君子的别号。应该没有人对这个词有爱，但是伪君子都未必是装的。只是要求的对象不同罢了。</p><a id="more"></a><p>我已经烦了，厌倦了。我突然有一天拒绝再和你讨论道德问题，就像上一次一样，因为这个问题已经没有可解释的地方。我其实没有分清楚救灾和支持希望小学这样的事情究竟什么比较高尚。但我认为有一种心情是高尚的，就是为他人着想的心。不可否认行为和内心对于受惠者没有多少关系。西方资本家中的慈善者都是活埋了无数人后在电视面前像一个乞丐捐助了一笔巨款。那个乞丐往往都是灾区，贫困生。作秀啊，多么作恶的作秀，但是那又如何呢，停止这种慈善难道就能减少那活埋在下面的尸骨，还是你觉得他们的捐赠只是为了我们心情的愉悦。不管这份作秀是多么的做作，但是那个乞丐却是确实的得到了活下去的希望。对于那个乞丐那份秀也许虚伪，也许羞辱，但是那也是希望。为什么要拒绝呢，虽然很没有骨气。在接受那份秀的时候，乞丐不会考虑的那些电视机前面看着他们的眼睛。活下去才是最重要的不是吗？太多的事情喜欢上升到道德的高度了。一句道德就解释点很多很复杂的关系和情况。一句道德就使中国社会领先西方两千年。多么划算的买卖，不用血腥变革，不用宗教崇拜。一切都那么理所当然，从小就这么教你的不是吗？打勾就代表对的。</p><p>好吧，你知道我喜欢说废话，但是我只是把有意义的话用废话的方式来说而已。接下来不要用你喜欢的方式来限制我的生活，你知道我对于别人的指手画脚没有多少能听的进去。管好你的嘴，我知道那些都没有恶意。但是很多没有恶意的事情都会有很多不好的结果。对你我都一样。</p><p>所有爱我的人，不管我将来选择的是什么样的人生道路，你们不是都觉得只要我幸福就够了，即使你没办法做到，打从心底去祝福，却依然会希望看到我，又坚强又潇洒，就像漫画的完美主角一样。:)</p><p>或者你考虑看看，是不是真的对我有爱。。呵呵</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便写写</title>
      <link href="/2009/05/08/----41/"/>
      <url>/2009/05/08/----41/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2009-5-8 14:59</p></blockquote><p>我又一次把自己抖脚认为是地震了，从这点看来有时候犯同样的错误的我确实挺sb。</p><p>夜奔的感慨近乎没有，很多时候文人靠的是心境而不是行为，我还是很难有李海洋那么多的废话。广州夜生活很丰富也很精彩，但那些都基本和我无关。夜奔更多的是伴随着同事例如抢劫，持械斗殴之类的“恐吓”开始出发。警惕的望着四周，任何人的靠近都心存戒备，陌生的城市缺乏的就是那种与生俱来的安全感。公车并没有让我等待的太久，也没有发生什么幽灵车之类的故事，相反是司机和一个老头用着老道的粤语相互哈啦。很显然他们对于这样的夜班车习以为常，从本质上没有觉得这样的夜色对于安全性有任何疑惑，就如我在福州一样，熟悉。</p><a id="more"></a><p>生活的小结的不顺利总是让人变得易怒，遗传我妈的，好吧亲爱的妈妈，我把这个罪名推到你身上也不算太冤枉，你要想打我就等我回福州吧。情绪都可能从细节的展现在你的肢体，动作，表情，眼神。美元上的华盛顿满头白发一脸的恬静，无法想象他当年一头红发易怒的火爆个性。说明一切只有你去期望，还有可以被掌控的。越发的了解自己，就越发的能够控制自己。宽容的对待一切，不要因为无意识的去伤害你爱的人，也许我有机会永远的不成熟，但现在轮到我给别人幸福了。</p><p>期待接下来的日子…</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于最近的生活</title>
      <link href="/2009/04/15/----40/"/>
      <url>/2009/04/15/----40/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2009-4-15 21:20</p></blockquote><p>其实没啥好说的- -，下面继续。</p><p>刚看了一些东西，感慨很多。不仅关于生活，而是关于技术。例如框架到底是为什么而用的？本来想说点什么的，但是还是不要用自己的嘴巴好了。下面是来自javaeye上ZT，作者yuan ，其余一切和我无关。</p><p>/<em>====================================================================================================</em>/<br>　　我是山寨框架的受害者。</p><p>　　山寨框架罪状第一条：提高新手学习成本。人家学好了流行的框架进公司本来可以弄清业务逻辑后直接上手，你非得弄个自制框架，让新人多花时间出来学习框架，浪费公司资源不说，一不小心你的框架理念还能误导新人，害人又害己。人家离开这家公司后，在这积累的经验在别处也许还用不上。</p><p>　　山寨框架罪状第二条：降低产品质量。公司里做开发，应该以实现业务为主，技术为辅，如果自制框架，你不得不花额外的时间在框架的维护上（bug往往很多，性能好坏说不定）。使用开源框架，你大部分时间只需要关注业务逻辑(相对自制框架来说)；如果自制框架，你不得不花大量精力在业务逻辑以外的技术实现上。人的精力是有限的，同时关注2种事情往往会2种事情都做不好，所谓一心不能二用。开源框架有庞大的开源社区替你承担了这些风险，替你保证了质量，为什么不用？</p><p>　　山寨框架罪状第三条：过于依赖老员工。这个说起来简单，开发这框架的人一旦离职，这个框架以及因它而造成的烂推子便很难收拾。除非你花重金找gigix来重构一把。</p><p>　　我想问问那些正在发明框架的同学，你弄明白为什么要MVC，为什么要ORM，为什么要IoC了吗？</p><p>/<em>====================================================================================================</em>/</p><a id="more"></a><p>好了，下面说别的。今晚吃饭偶然瞄见CCAV新闻台在讨论一个话题。就是要不要给老人让座。传说网络上出现了例如坚决不给人让座组。先不管这帮子人有多么的无聊，CCAV的话题总是很雷人。不过这年头不要太愤的话，都知道秦桧也是可以翻案了，岳飞差不多就是个傻冒，只要你从不同的角度进行切入,你总是能看到很多很欢乐的例子。比如一老头给年轻人让座，就这事，上了报。严某人借来的一本书，据称为经典。《赫逊河畔谈中国历史》。基本上称不上系统的谈论中国的历史，更像是一家之言的散篇笔记。不过既然有人会为这种书买两本一本翻阅一本收藏的地步，那必然有独到的地方。这个过程中还真有所得，我第一次开始以人口的组成和国家的体制开始看待历史，过去我对历史更多的感受认为看战争史和经济史就已经足够的接近真实的历史，而从没有考虑过人口的组成也是激化社会矛盾的因素之一。非我族类其心必诛，这话我深以为然。以古代的视角来看待少数民族本就不属于中国的范畴。而我现在所处的地方也算是蛮夷之地。以当时通讯之不发达，要对国家有绝对的控制力近乎于荒谬。但是中国却过早的被统一起来。那么这种不稳定导致的混乱就犹如罗马帝国宫廷一般，永远的杀戮不断。</p><p>我曾经长期的思考过一个问题，一个人究竟可以管到几个人。确实的掌握，确实的让他们执行自己的命令。思考的得出的结论就是一个人可以掌管的人实在是少只有少。而我认为军队的编制有着惊人的合理性，除了特种编制之外，一个军3个师,一个师3各团,一个团3个营,一个营3个连,一个连3个排,一个排3个班,一个班约7–9人。这样的分析有个很明显的梯队。而归属到最下级的班，7-9个。而这种层级的堆积，却能使集团军进行整合的作战。这绝对不是个人能力的问题，而是体制的胜利。一个优秀而良好的体制可以让无论多少人成为一个优秀的整体，将力量归结成一处，这才是体制的重点。集结力量。我曾经说过清朝的军力。北洋海军还是输的一塌糊涂。这早就不是装备的问题，用句黎叔的话：人心散了，队伍不好带了。体制拥有时代性没错，但是纵观历史，无论是哪一种改革，其本质都在做的就是一个事情，集权。这点就算商旅也都明白的透彻，垄断才是发财的最好道路。从另外一个角度来说，垄断就是将某一特定行业的所有资源集合到一家上进行统一的调度。这不过是集权的变相，而不是什么商人的手段。所以商人和政客都有着惊人的相似。例如我们形容商人的，基本都可以拿去形容政客，一点都不冤枉。好坏同理。</p><p>回到历史上来说为什么有些朝代短的如此可怜。我以为两点：一是体制的失败，而是统治着对体制控制的失败。不可否认的一点人还是有能力的差异，统治者也不例外，但这点近乎于微小到忽略不计。我倒真不相信秦二世或者隋炀帝的恶习真的能够糟糕过明万历。但为什么秦隋两朝在他们手上完了而明朝依旧保持了下去。这可不是什么巧合，这世界没有巧合。史学家偏向于说明实亡于万历。但体制保证了明帝国没有崩塌。或者说体制有其生命力，这个生命力随着王朝的推进而不断的流逝，只不过是有些体制的生命顽强，而有些较为脆弱而已。</p><p>我绝不是吃饱了撑着没事干说这些，只是有些话说出来反而没了意思，我说过悲观主义者才喜欢历史，因为它们无可改变。这反衬很多的无可奈何。冷眼旁观这接下去的道路。究竟，还能撑多久。。。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>温馨的文字和喷斗士的精神</title>
      <link href="/2008/11/30/----38/"/>
      <url>/2008/11/30/----38/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-11-30 02:29</p></blockquote><p>需要一种心态，那就是平缓的去描述一些身边的人和事，没有更多的主观意愿去强加在他人意志之上的情感，只是平和的去描述一个状态。</p><p>人写字都有强烈的个人风格在里面，要形成这些，写作的是很重的。文学一定是受着时代的限制而有着自己独特的味道，任何的文字潮流都穿插在浓厚的社会背景之下。在众多与我类似的，“平”时从不动笔，动笔即“战”的风格，最多的是要诞生在论坛之中。在论坛中当个写手，除了必要的基础知识，逻辑的缜密推理更是凌驾在语言描述之上的东西。由一就必须推论出十是基本配备，而表诉强硬态度的词句以及那对他们的漠视则是标准的文法，这个态度枷锁性的套牢了在论坛一个“有为”写手的心里，而那些看客几乎就等着冲突性的爆发。冲突爆发的地方简直是最符合人类心理“扎堆”欲望宣泄的场所，但凡你上街看到无数路人围观，那必是有人冲突的开始。观众爱看，写手爱写。一个愿打一个愿挨着当然有着很欢乐的存在。</p><a id="more"></a><p>诚然，我这里不是要表诉一个喷斗士在论坛中的生存法则。而是想解释在这种环境下跳脱出来的我该如何改变这个状态。文字不该只能表述一个言语暴力的一面。更多的可以去记录更简单的状况。本土杂志《家园》里有着很好的范式，杂志中那期描述我的小屋的文字让我感受的温馨无比，那种连带着明显写手痕迹的文字，却平凡真实的流露出一个老者对于自己居住了四十年房子的留念。那段文字让我想起了很多过去住在大院里的生活，而我的文字近乎很难让人想起快乐的过去。老者坐在大院里乐呵呵的对着镜头，配上老者的自述，平和的没有一丝的波澜，简练的文字和情感的描述让我深刻的反省着我过去对于文字的认识。我没有表达见识高人一等的必要，没有去凌驾他人意志的意愿。我只要呈现着自己对世界更加真实的感受，去感受生活中的点滴加以记录。生命就会用最自然的方式行走下去。</p><p>我真心的希望自己可以开始改变自己的文字，也改变掉自己的思想。即便从模仿开始也好，到若干年后，我回首看这段还幼稚的日子，他们让我感受的只是温暖和亲切。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博弈</title>
      <link href="/2008/11/30/----39/"/>
      <url>/2008/11/30/----39/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-11-30 02:29</p></blockquote><p>年三十，虾菇皇，吃的很欢乐。</p><p>许久没有写字了，不是我没有言语了，而是我进入了社会。</p><p>生命最大的悲哀是无奈。我不是刘邦，即使我想问为之奈何，身边也没有张良告诉我。</p><p>充满激情的开始游戏已经很久没有了。与人斗其乐无穷。</p><p>可乐还是要比果汁好喝，咖啡不要泡的最好。</p><a id="more"></a><p>Thanks my hero.每年我都要说这句话，别告诉我你们不知道我在说你们。</p><p>程序员的思维就是把所有坏的思维思考一次，被害妄想症。</p><p>据说博物馆奇妙夜有2，五月份上映，期待。</p><p>有的人在外国认为自己是中国人，有的人在国内不把自己当人。</p><p>社会是要和谐的，新闻联播有人下过精辟的论断，前十分钟领导都很忙，中间十分钟祖国人民很幸福，后十分钟，国外的人民都水深火热。</p><p>终于开始用自己的双脚站立在这个大地上，突然有一种安全感，很好。</p><p>世界上最伟大的推销员要迈入进程。90%的人都达成了，而我也想尝试一下，怎么自己忽悠自己。</p><p>太阳真好，给我的不比给他们的少。</p><p>某人回来了，嗯嗯，月入七八千的该请客了吧。</p><p>桌面的零食让我一时有点无法消化。牛肉干还是太少了。</p><p>英文可以在看英文文档中学习那该有多欢乐。不过程序员写的书语言实在不敢让人恭维，不管是翻译的还是编译的。</p><p>都要健康哦。:)</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑣碎</title>
      <link href="/2008/10/27/----37/"/>
      <url>/2008/10/27/----37/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-10-27 03:34 </p></blockquote><p>國服繼續很沒有懸念的忘了開，基本上照論壇分析三個月內沒有前途。我只有奔赴臺服去體驗新生活了。草藥由于新專業銘文的緣故價格高的一塌糊涂，一組銀葉也是個10g的在甩。現在就圖一機會財。白手起家只能靠這個了。</p><p>入手9600GT核心的显卡，基本上用来搭配我的cpu会有很凄凉的表现，不过这并不妨碍我将所有特效全开的情况下耍游戏。虽然内存不足导致硬盘狂闪着几乎难以避免。不过总是想着一步到位将机子全部更新难度很大。但几个部件慢慢更替却是可以做到的。现在的配件也真够白菜价的，不过电脑的瓶颈我认为已经出现了。性能疯狂的提升却在人工智能的进步上非常缓慢。都不知道是开发软件的不行，还是开发硬件的在扯淡。</p><a id="more"></a><p>即便是最正确的声音，也要用最合适的方式去传播。否则不被人认可，说的再漂亮也没有用。</p><p>微软在国人的智慧面前显得如此窝囊。还有很多人跳出来说微软的行为违法。我突然想到一个贼被抓到然后被人揍一顿，那个贼反告抓他的人施暴。我相信告的赢，可惜这个世界会变得很悲凉。说这些其实也就是扯淡，我对番茄花园版本的xp好感度远高于正版的xp。微软的身形过度巨大反而让他没有跟上这个时代转型的步伐。Windows如果可以做到这种黑人的小把戏,明显可以把赢利机制转向更多的方向，使用这么可笑的方式也是低估了国人对于版权的漠视。想来这么蠢的方式捞钱？ok，look</p><p>在维护版权其本质只是在维护利益，当利益不受损的时候你完全可以让盗版为自己推销。看看现在的唱片业，唱片不红歌红就可以，照样可以创造巨大的商业利润。聪明的人总不该为此做无用功而放弃实在的利益。难道说你在维护道德？那请反个垄断先…</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秋天很干燥</title>
      <link href="/2008/10/20/----36/"/>
      <url>/2008/10/20/----36/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-10-20 03:03</p></blockquote><p>嗜睡的我在这种天气里几乎没有办法长时间的休眠，身体自然的被空气抽干水分。每每起床的时候第一件事就是补充大量的水分，这对于不爱喝水的我并不平常。夏眠和冬眠之间，我该找什么借口？</p><p>身上终于开始长膘了- 。 -，可怜这个现在小小积累起来的资本估计会随着我步入的工作很快的消耗光，在没有步入正轨的生活，怀着任何想法都是可能的。生活本身并不梦幻。只是这个状态让人好奇，也许工作了一段时间就会开始想逃离那种工作的生活，但现在又为什么会这么期待着进入这种状态。初中的日子，stronger总是让我们抄写什么名人名句，我也买了本书每天抄抄写写。无聊作业写不下去的时候，又没有漫画看，就拿起那本名句书对上面名人名言一阵乱批，为的就是发泄心中的那股怨气。里面有一句话非常的简单：社会就是个泥沼（差不多吧，忘了），我们应该站在高处。那年头多愤呐，看到这话我接在空白处就是一阵乱骂，基本骂了好几行还没开始说自己的话，大意写的就是社会是黑的，你就漂白它。怎能明哲保身。想来那时候离自己读书的日子还近，酸腐的气息一览无遗。到了很大的时候，我反而没有了小时候的那份心气。长大了我一直在逃避着这个世界，基本错失了很多应该有的经历。小时候向往的东西在长大全部被我丢弃。这种随着了解的抗拒，体现在我生活的每个细节。</p><a id="more"></a><p>在这个心理的作用下，我对于很多事情都是悲观的。虽然最近心气又有所提高。我不相信什么怀才不遇。这个世界有才的人都在这个世界留下了他的名字，当然没才的也留下了不少。对于机会这个东西我非常的被动，面对机会我是最下等的，不会抓住机会更不要说创造机会。这里面虽然说多少有“文人”的迂腐，也掺杂着自信的缺失。我甚至不是错过到机会，而是怕抓到机会而没有实现机会的能力。学车的日子我一脸轻松，但是我心里还是很悲观的认为自己科目二一定会挂，两场考试我老婆都是先于我进入考场，我都有很强的预感她会过，而我会挂。场考第一次由于看不到线的时候，我错过了定点停车的位置，我还有一个机会的时候，抓住机会或者就是下次再来排十个小时的队伍。抗压能力是磨出来的。心理因素的问题也从来就不是一句不想就能解决的问题。</p><p>总听说生活会磨平你所有的棱角，既然这个世界这么喜欢这些，那就用最不煽情的姿态去迎接接下来的生活，宠辱不惊。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现在的事，了了一截是一截</title>
      <link href="/2008/10/11/----35/"/>
      <url>/2008/10/11/----35/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-10-11 05:46</p></blockquote><p>我终于有精力可以过来总结一下最近的生活，这段生活几乎没有任何的特色，连wow我都少上了很多，行程几乎就像个上班族，早上七点就要到练车场所，练完后就睡死到晚上，如果可能身体自然会醒，不行就持续到第二天继续练车。体力真是烂透了。</p><p>黄山考场就是个乡下地方，到处是烟灰迷漫以及喧杂的人群，周边配备和我老家有的一比，错了，和我老家十几年前有的一比。我老家起码还有超市，那里却只有我小学时候一些老太太推着冰柜车兜售冷饮的身影和两个没有任何装修及卫生许可证的饮食小摊。午饭和晚饭都没得吃。如果说着已经够糟的话，那更糟的就是那个考试流程，十一点我就已经来到了考场，到了那里就必须开始忍受无尽的等待，错误的时间告知简直是恶意的，中午新增的午休居然没有通知驾校，这样的管理几乎在羞辱他们自己的智商。所有的人都按照原先的时间站在门口等待着那该死的午休。接着就如莎士比亚说的：悲剧现在就开始了，四点半的桩考，九点半的场考。将近十个小时的消耗，折磨的我。我也只能隐忍着怒气在等待不知道哪时候才能轮到的考试。在折磨够之后等待的是一部烂车以及晚上视线极差的考场。所有的灯光全是骗人的假象，场考的时候那个灯光照射在定点停车的路上我颜色几乎被照的于路面一样。就这样疲劳驾驶之后我们还得顶着这份心理压力，如果没过就他喵的还得再来排队排个十小时。战战兢兢的完成考试，出来时瞬间的释放了所有的感觉，饥饿和疲劳围绕着我们，走在黄山出来的那条没有路灯的路上，沙尘在来往车灯照射之下一点都没有少。搭上的士来到宝龙，喝到了热腾腾的粥，在长时间的饥饿过后只有这样清淡的食物才让身体得到满足而没有恶心的感觉。</p><a id="more"></a><p>给所有准备考科目2的人说点事吧：即使你的教练已经无数次提醒你考场的车辆有多么烂了，那依然不是你的心里该有的底线。你最好把它扩大十倍再去迎接那架你考试的车子。你要在一分钟内熟悉车的脾气，你不能了解他的习性那你就死定了。桩考13号场地会溜车，如果你和我抽到一样的数字，那保佑你不要周五去考试。如果可能在练习的时候尝试的用油门去做一切动作，这对你会有好处。</p><p>最后说说刚看完的电影《通缉令》，看电影几乎已经是我常备了，福州的市区真是个缺乏新意的地方。安吉丽娜饰演那样很酷的角色还是很有味道。虽然老婆说剧情她看得有点莫名，不过对于常玩游戏的玩家这种剧情应该算是老段子了。不苛责剧情的编排，只要当作是动作大片那么这还是值得一看的。别以为我什么都没说，剧透是绝对可耻的。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一天</title>
      <link href="/2008/09/24/----34/"/>
      <url>/2008/09/24/----34/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-9-24 19:46</p></blockquote><p>鞋子入手，解决了迫在眉睫的问题。希望不要买回来又出问题。</p><p>倒库，平移。其实我不是很懂为什么学车不是从前进开始而是从后退开始的，不过据说大家都是这么学的，这是嘛道理。</p><p>保持通话这片子不错，里面充满了香港动作的招牌段子。剧情也在基本线以上，可以一看。<br>　　<br>说点实事，奶粉的。立顿果然如我所料也检查出问题了。家里的立顿也喝了一些。这本来不存在问题，问题就在于我的立顿当时刚好半价出售，时间只早于奶粉事件一点，谁说的清楚这里面的猫腻。</p><p>血环的战场气氛不好，有人挂机，有人发傻。发现血环战区分组是和新服分在一起的，难道现在还有人不会打战场吗。居然还有鲜血之环的m我说不要打拿旗的，我们只是来杀人的。what a fucking joke!</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蠢蛋时代</title>
      <link href="/2008/09/24/----33/"/>
      <url>/2008/09/24/----33/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-9-24 19:46</p></blockquote><p>It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way–in short, the period was so. far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only.</p><p>狄更斯在《双城记》里的描述堪称经典，在这个存在了150年的经典里，我们的世界正在不断的描述着故事，只有那更高明的技巧宛如风的掠过，不留痕迹。</p><a id="more"></a><p>一个游泳池里，被人抽掉了50%的水，所有人都喊着水太少了，我们游不动了。有“救世者”般的人跳出来说：你们从家里拿出新的水来吧。那些在游泳池的人有的赞成，有的反对。可悲的是，支持的人只在想要水来游泳，没有人关心那50%的水被谁抽走了，而反对的人没有想过其实他们认为自己的水早就上交给“救世者”，拖延的越久，蒸发的越惨。当然不是所有人都是笨蛋，可惜绝大部分的都是笨蛋，一个聪明人和一群笨蛋实在不足以和一群聪明人斗争。智慧的种子从来就没有种在每一个人的心里过。</p><p>话说回来，智慧和良知从来就没有联系。老子曰：不善贤，使民不争。矛盾的激化从来都是被聪明人引爆的，很多时候人们都会在某一个层面表现出非凡的才华。可总是对常识性的东西熟视无睹。我们总是听说希特勒是个种族灭绝者，却少有人关心这个家伙是个民选的领袖。别让我们活不下去，否则你们就得付出聪明的代价。</p><p>所有人都会死，但不是由着你们为我们选择的死法，拿出你的聪明来把事情处理的圆滑，否则一切都会引来再次洗牌的时候。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>This is Goodbye</title>
      <link href="/2008/09/16/----32/"/>
      <url>/2008/09/16/----32/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-9-16 09:04</p></blockquote><p>标题这歌不错，特别罩着耳机对着自己吼的时候，很棒。好了，接下来标题和文章无关了。</p><p>当习惯的给予一个问题模棱两可的答案时，就是对自己不自信的表现。这个毛病，我已经说过无数次要改了。在这个方面不但需要实力的积累，也需要心态的转变。如果我能在陪我老婆买衣服的时候也做出准确的判断，即便不被接受我也有保有自己意见正确性的信心，我想我就改掉了，当然起点是这不是出于某种“老人”的固执。我总说书读多了不好，文人的臭毛病就是犹豫和想太多。决而无断，就好比勇而无谋。同样不可成就事。给予肯定的答案，否则就坦率的表达出自己的弱势。要相信总有一天会强弱会转变的。</p><a id="more"></a><p>WLK好似又要跳票，这其实一点都不意外，因为当有消息传出blz要对9c大幅度调高分成的时候就应该想到这个时候的谈判又更加敏感了。更何况我们本身就少玩了tbc一段时间。这个时间刚好补足也没什么不好的。好吧，其实我说的也是昧心话。我希望全球同步，我也希望我的骑士能满级的时候开放。许愿了许愿了，wlk，别真的成了忘了开呀，我还期待着用圣光忽悠你们的时候。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>半夜三点，想哪写哪</title>
      <link href="/2008/09/04/----31/"/>
      <url>/2008/09/04/----31/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-9-4 03:35</p></blockquote><p>虽然想想，其实还是soso，不过感觉很好，忙碌的状态，学习的过程，没有失败感觉很欣慰。很多东西记不住，但是给我能实现就好了，剩下的就是一些界面和图片的关系了，不行也就算了。我相信美工做的比我好多了，全才的有，单不是我。</p><p>事情如果结束，还有很多新的事情要做，如果能保持这个状态，生活是写意的，态度决定一切，大家习惯了都只是说说而已。</p><a id="more"></a><p>最近在看福尔摩斯的小说集，引述名言赞的比剧情还要精彩。虽然现在我只看了前两个故事，不过可以感受作者希望把福尔摩斯描述的更加真实的人，而没有任何的神话色彩。对于这点是我从本质上推崇，对于欧美的奇幻小说的喜爱是由于其从根本上摒弃了主角无敌的论调，当然这个是相对中国的武侠小说而言的。虽然对于我这种武侠小说一本都没看过的人说似乎是没有说服力的。我一直把文字分为两种：取悦自己和获取知识。无可否认，那种一出手就将对手轰杀到渣的故事非常能取悦自己，扩展自己的想象自己是主角的那种虚荣浅意识很棒不是吗？如果有人很喜欢这样，我规劝你去看名人传，生活有时比小说更精彩。何止轰杀到渣。《坦克战》这本书估计市面上已经难寻踪迹了。那种在我看到它时那种厚度的书只有四毛钱的书里面书涵盖了二战经典的坦克战斗。配图。战争的艺术，曾经有人和我提到这个词过，他们说这和日本对于中国残忍的屠杀有本质的区别。我承认纸上谈兵是个很愉悦的事情，毕竟我这种臭棋也很喜欢和别人杀两把象棋。可惜把残酷的战争上升搞艺术的高度实在是以一人的愉悦忘却了上万的骸骨。柳生新阴流里追求的无刀取，在战争是不存在的。</p><p>本来是想写点主题的，不过写着就偏了。连题目都得改了。准备睡觉。明天找图也不是什么舒服的事。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>悲剧的EXT，鸡肋和蛇段的区别，还有那个新人很忙的日子呀</title>
      <link href="/2008/09/02/----30/"/>
      <url>/2008/09/02/----30/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-9-2 02:56</p></blockquote><p>才能没有，脾气不小。一直嚷着要放弃的EXT又被我折腾了一天，学习方法是悲剧的开始，英文也不是这么个练法。摇头尾巴晃，如果怠工了谁要负这个责任。一天只睡三个小时换来的满足。顺带一提，刚开机的时候随手把自己写过半的代码删掉了，丢资料成兴趣了。</p><a id="more"></a><p>手忙脚乱的日子我还是很会偷闲的，老姐华丽的把自己嫁出去了。他男人把她叫大脸猫，娃哈哈。为什么我这么久都没有发现这么好的称谓。否则起码可以叫十年，亏大了。婚宴状况那个乱，飙着方言的主持，冷到爆的求婚，打瞌睡的吉他社，还有那满眼都不认识的人，走来走去走来走去。。。总共没和老姐说几句话，牛仔可是很忙的，忙的换衣服，一晚上换三件，新娘总是爱晃悠在牛A和牛C之间（谁都别拦我用这词，苍天哥说了!）。婚礼老姐还是挺能折腾的，门口多大的字啊，幸福可以相似，婚礼不可重复。嗯嗯，把婚礼整成开学典礼了。恋校的孩子，去当全职学生吧。考吧，这词好像挺流行！</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>风在流动</title>
      <link href="/2008/08/29/----29/"/>
      <url>/2008/08/29/----29/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-8-29 23:51</p></blockquote><p>有时候我只是不善于言辞。</p><p>说这话也许无数人会不屑于此，认为我纯粹在扯淡，但是事实上就是如此。我自闭的部分只有我清楚，我自闭的时候连我妹妹都远离我。我现在看起来很好，但你们都不明白如果可以选择，我还是不希望开口说话。</p><a id="more"></a><p>我曾经很多次想过自己必须选择一个地方是残疾的，我会选择什么。我迷恋色彩，我不舍得看不到世界。我讨厌麻烦，我不可以没有手脚。我热爱音乐，我靠音律感触世界。而说话，没什么好的，如果我没有声音，我就不用与任何交流。我用肢体发泄倾情绪，用眼神表达愉悦。但这一切都是建立在我是健全人的基础上的胡思乱想。我不可能真的希望自己是哑巴，我甚至不敢去想象那样的痛苦。我不是海伦·凯勒，永远也不能真的感受她在《假如给我三天光明》里面所写的。我远不如她坚强。说这些不过是给自己找很多借口，我担心这个世界不如我所愿。世界不是我的，我是世界的。这是事实，就算我没有发声的权利，我也要和世界交流。我不会把自己藏在泥巴里。但我又没有能力让别人听我把话说完，消极的我选择闭嘴。一个聋哑盲人让世界都听到了她的声音，一个健全的人却为了这点挫折闭上了嘴巴。人和人的差距真是不敢去比较。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>睡眠混乱的日子</title>
      <link href="/2008/08/17/----28/"/>
      <url>/2008/08/17/----28/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-8-17 05:56</p></blockquote><p>经常要调整睡眠的时间早就不新鲜了，只是不知道这样的状态对自己伤害到底有多少。通宵的老人总是说三十岁你就后悔了，我才马上要22，想想还有段时间才会开始后悔。</p><p>分散的睡眠点把时间切割的厉害，而睡眠总是伴随着很沉重的慵懒。全身的酸痛总是会让我有尝试运动的欲望，多动动让我全身减压不少。不过想法总是好的，和实践总是有很大的差距，偶尔做做俯卧撑和仰卧起坐就已经是我的极限。虽然看起来还是消瘦，可是常坐着还是为健康担忧。肥胖不以身材为标准的。我第一次感觉自己有可能会肥胖。所以尽量在有力气的时候还是多动动。曾经体检的时候有个老医生就劝我要多动一动，因为心率呼吸之间差距很大。老了想动就没法动了。无奈，几年过去了，他说的我还是做不到。</p><a id="more"></a><p>最近越发感受到能力和运用能力的心智落差很大，有能力处理的却在内心进行抵触。心情太容易被影响，想来我也应该是个笑点很低的人，如果有笑点这个词的话，那有没有哭点？估计也很低。心理抗压的能力太弱。不是调试的问题，是成长的阴影。分析不等于解决。人都是不同的，习惯要21天才可以养成，才五天就可能放弃。所以越是感受容易的东西却越难以克服。自我的欺骗简直像是天性一般存在。就好比我说要养成码字的习惯。貌似现在断断续续也好几次了。</p><p>没有什么是容易的，永远别忘了。</p><p>记载一个笑话：一架飞机上，麻雀对着空姐说：给爷上杯茶。猪看到了也对空姐说：也给爷上杯茶。空姐听到后大怒，把麻雀和猪都丢出了飞机。下落时麻雀对猪说：sb了吧，爷会飞！！</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鬼话连篇和魑魅魍魉</title>
      <link href="/2008/08/11/----27/"/>
      <url>/2008/08/11/----27/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-8-11 00:04</p></blockquote><p>先声明：我只是随便写写，都别来找我，我家有符，有法阵，还有狗，很凶的。</p><p>先来则故事，红衣小女孩的故事。事件是发生在1998年三月左右的台中郊区大坑风动石那边。 某日中午左右一个家族好几个成员都到大坑风动石那边玩耍, 就在过程之中有人拿出V8将家中成员一一的拍摄下来, 回来之后也就不甚在意所以没将所拍摄的带子拿出来看。 一直到不久之后当天一同去玩的某先生突然过世了, 就在办丧事时候有人想起在大坑所拍的带子有拍到往生的那位先生,於是就拿出这卷带子看。 一看之下才发现那天到大坑去玩的家族成员之后, 竟然跟著一名脸色铁青,走路轻飘飘的,穿著红色衣服的小女孩, 而且那小女孩的双眼始终被一片阴影给遮蔽。 但是那天一同去玩的人, 没有一个人想起那天曾经看过这样的一个红衣小女孩。 更巧的是影片之中那位往生了的先生在笑的时候, 口中竟然出现类似獠牙的东西, 但是整个影片之中让人感觉最不好的还是 那名穿著红色衣服的小女孩。</p><a id="more"></a><p>这个故事流传的很广了，视频我是看过的，那个造型确实不舒服，有兴趣的人可以去看。事情的真伪不是我要辩驳的，我之所以想写这些只是听到了一些灵异故事觉得很有意思。于是兴冲冲的跑到我妈的身边开始发表这些鬼故事，并且添油加醋起我每次熬夜都看到楼梯口的灯光久久不暗，并且还有男女的对话和怪叫声。我妈就开始大和我说那是楼上那些小年轻半夜回家走过楼梯口开的灯，外面的声音是我们楼下有人喝多了。可惜这种解释我并不以为意，因为在看到这些场景的时候并不是我妈说的那些情况。例如我听到声音的时候我是想骂下去大半夜的嚎嘛啊？但是楼下没有一个人。而楼梯口的灯光是延时开关坏掉的感觉，并不存在什么人走过的感觉。不过在经历这些状况的时候，气氛之中并没有任何的诡异，我当时的想法只是人走到我看不到的角度或者楼道的开关坏掉了。但是被我添油加醋之后，我妈虽然对我解释，但我很明显看着她起了一身的鸡皮疙瘩。让我大笑不已。我觉得我们这里有点阴气是非常正常的，这里是医院的公寓，生老病死发生时常有的事情，而有那么些东西跟着人们回到这个公寓也见怪不怪。互不干扰就好了。我半夜耍游戏这么多年，异界的朋友虽然有发声出来，但起码没有对我做啥子，感激感激。</p><p>说实在的，我妈对着种东西的恐惧是可以理解的，我老家就是个比较阴的地方，不过我在那住过一段时间，但是没有任何的异常。我妈说小时候只要带着我回去我就会重感冒发烧。她以前带着我在老家睡觉的时候，有两次感觉到有鬼到她的怀里要把我抢走，一个老头和一个老太婆，一人一次，我妈死抱着我不放手，然后被吓醒过来。不过这些事情我都没什么印象了，因为老家的蚊子比鬼可怕多了，都把我的腿咬的没一块整皮了。对此我到现在都愤恨不已。我们家因为和医院走的比较接近。而我爸当年的电工班就是太平间改进的。而电工班当年里面都是要有人值夜班的。据那些值夜班的叔叔们说，那时候半夜一个人在里面听见怪叫声是常有的事情，而那里下面有个公共的洗澡间。那个洗澡间据说是最阴的地方，某叔叔在半夜想洗澡的时候，下去打开水龙头，里面流出来的不是水，是血。然后他就关掉水龙头，回去睡觉了。多么坦然啊，但是就我妈的说法，她从来不敢再我爸不在的时候带着我在那里面洗澡。不过不管是现在的太平间还是过去的太平间，在外面啥都感觉不出来。医院里的人对生死都很麻木，所以我很怕进医院，我都不觉得医生会对生命负责，因为见的太多了。好吧，我想说，其实医院本身的存在也比鬼可怕些。</p><p>说了这么多其实都没有什么具体见到什么，说说最近的一件事情，这个事情还真的是我当时很在意的事情。某天我要和老婆吃饭，在吃饭之前老婆要回家拿东西，而我懒得爬七楼的高度就在楼下等待，老婆家的楼下总是有一只黑猫走来走去，老婆总是对这只猫感觉相当的恐怖，她说黑猫不吉利。我说你这是歧视，难道黑人也不吉利了？说完我老婆就上楼去了，我单脚支着地板看着那只黑猫。那只黑猫并没有在意我的目光，懒懒的躺在地上。过了一伙，它爬了起来往我身后的方向走掉了，我看了看它，没有在意，拿起手机开始上网，在看着屏幕的时候眼角的余光看到前方有个白色的影子，那种很典型鬼的造型，当我抬头的时候啥都没有了。当然我当时只是觉得那个天有点阴，然后风开始刮，刮的有点乱，没有方向。想了一下就丢到脑后我继续等我老婆。但是之后那天晚上，我身体的异常很诡异，全身的酸，从身体里酸出来，不管怎么捣鼓都有种说不出的不得劲。在那样的情景之下我就开始回想起半夜的时候碰到的那个影子，我唯一的想法被鬼压了吧，别这么邪门，我老婆的家是没狗的耶。那一个晚上我就甩着身体到了四点多，实在不行，睡着了。当然第二天我就把这事给忘了，直到最近几天有开始重新看灵异节目的时候，这件事我才又在意起来。</p><p>这里面，有些部分我都觉得有鬼扯的成分。我老婆是非常怕鬼的，甚至怕到晚上和她说鬼这个字都会把她吓到。我就告诉她死后能变鬼很不错，总比死了直接消失掉的要好的多。如果撞到了，你就明白你死亡后的世界究竟是怎么样的。再退一万步说，如果被鬼克死了，你变鬼也别放过他好了。- - 大家相敬如宾嘛。</p><p>说点别的吧，有人说人类的历史就是一副罪恶的篇章，翻开历史我们所有发生的事情都比鬼怪所造成的伤害恐怖太多了。你不能想象很多折磨人的方式是一个人类对于另外一个人类所实施的。很显而易见，在这个世界，人类是位于食物链顶层的生物（咱避开神明不谈）。无论从哪个角度来看，人类都比鬼怪要凶残的多。世界又开始打仗了，不知道又有多少冤魂。在我们指责鬼怪的残忍的时候，先看看人类犯下的罪行。有人说：鬼是怕人的。在某些时候我是相信这条道理的。人类不是鬼怪，但可以比鬼都残忍，人类不是野兽，但也比野兽更凶残。漫画Bad story里面描述了几篇故事，讲述了一些人类对动物做的事情，但是他们把动物都画成了人类。但这些动物拟人化的时候，有些事情才真正让人类触目惊心。</p><p>不要再为没意义的事情恐惧，不妨照照镜子，看看自己是不是比鬼还可怕。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天朝女子蹴鞠队首胜</title>
      <link href="/2008/08/07/----26/"/>
      <url>/2008/08/07/----26/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-8-7 01:05</p></blockquote><p>本来是想避俗的，不想提到任何有关于奥运的事情，不过发现自己就是俗人，自然也跟随着有点感慨。</p><p>天朝，很有气势的词汇吧，呵呵。今天被“天朝女子蹴鞠”这几个字雷到了。中国已经多久没有认为自己是“天朝”了，这个词汇最早似乎是从《宰相刘罗锅》里看到，乾隆帝对着英国人骄傲的说：“天朝”地大物博，应有尽有。虽然他到死也没有明白过来就是他手中的政府没有抓住工业革命的最后尾巴。</p><p>a story:某美国记者问周总理为什么中国人为什么都是低着头的，而美国人总是昂着头。周总理笑笑的说：因为中国人在走上坡路，而美国人在走下坡。这个故事几乎耳熟人详，里面的对话虽然体现了周总理的机智。而也体现出了国人的自卑。在一百年的压迫下面，中国人的脊梁似乎已经被压弯了。虽然鲁迅先生在《中国人失掉自信力了吗》一文已经驳斥了这样的论调。但这都不能否认当时国人的普遍心情。</p><a id="more"></a><p>在现代史里，国人好似从清朝末期开始被列强抢夺，压迫，签订不平等条约开始失去自信。而造成这一切的结果就是中国人穷。穷字，多简单的一个字眼，仿佛一个字可以解释所有的问题。但就我手头上的资料显示：康雍乾盛世不提，道光年间（1821─1851年），中国的国民生产总值仍居世界之首，高于整个欧洲的 总和，1700─1820年间的经济增长高于日本。清史稿 志一百 食货六 ：光绪十七年，户部奏更定岁出岁入，以光绪七年一年岁出入详细册底为据。言：“统为岁入八千九百六十八万四千八百两有奇。”据安格斯·麦迪森的统计，1820年中国GNP（国民生产总值）是欧洲的1.22倍,1890年中国GNP是日本的5.28倍；中国的GNP增长率从1700至1820年间一直领先于欧洲和日本。如果有人和我扯什么装备的落后，好吧，我们继续：晚清陆时期，无论是从规模上还是从装备上看，大清陆军都是世界数一数二。 大清国在与西方军队以及洋枪队(常胜军)共同剿灭太平军的过程中，开始认识到用洋枪洋炮来改进部队装备的重要性，首先在部队中组建洋枪队，次年又组建了洋炮队，逐渐淘汰了旧式武器。此后，随着洋务运动的发展，不仅淮军、湘军、练军以及部分绿营兵和八旗兵，均装备了从欧洲进口或中国军事企业仿制的近代枪炮。 70年代以后，西方更为先进的后膛枪炮开始输入我国，导致淮军装备的又一次更新。英国的马梯尼、士乃德、法国的哈乞开司、德国的老毛瑟、美国的林明敦和黎意等枪种，均进入淮军部队。 90年代部分部队还装备了更为先进的后膛连发枪，主要枪种有奥地利的曼利夏、德国的新毛瑟和中国江南制造局仿造的快利枪等。如赵怀业部即皆系一色快枪。还装备了新式毛瑟枪和克虏伯炮。即使一些内地省份如江西、贵州、云南的练军，也都在70-80年代，装备了近代枪炮。清军还是亚洲第一个装备了七连发枪和十三连发枪的国家。在炮兵装备上，有英国的阿姆斯特郎式、格鲁森式和德国的克虏伯式后膛炮。仅1871年至1873年，大清就购置了德国克虏伯后膛四磅钢炮141门，到1884年淮军配备的后膛钢炮已达370多门。自1886年起。广东又陆续拨解北洋钢炮100多门，其中光绪十二年(1886年)粤解八生脱钢炮四十八尊，十七年粤解七生脱钢炮一百二尊，十八年粤解八生脱七钢炮三十尊。这期间北洋自购者尚不在内。另外，至1904年，江南制造局共造出后膛大炮145门，大部分用来装备了淮军。淮军火炮中，有一部分阿姆斯特郎和格鲁森式钢炮还是西方80年代末才发明的快炮(速射炮)。由此可见，淮军的装备无论是质与量，都是堪称世界一流的。对比邻国日军装备，至1904年其陆军使用的主要是国产的青铜炮和村田式单发枪，性能上远不如中国进口的西方新式连发枪和后膛钢炮，其全军拥有的野炮不过300门，数量更比我军少得多。 1895年冬季汉阳兵工厂开始仿造德国出品的1888式毛瑟步枪（仿的是Mauser M88 Commission Rifle。 德国最好的兵工厂[如： Loewe,Schilling和Steyr]指定生产的1888式毛瑟步枪被称为Mauser M88 Commission Rifle），因为是仿德M1888式，所以定为88式， 其全称为7.92厘米88式毛瑟步枪。 使用圆弹头。 同时生产子弹， 每月能生产十三万粒。海军：1875年，清朝政府开始重视海防建设，任命直隶总督李鸿章出任北洋大臣，创设北洋水师。1875年，李鸿章通过总税务司赫德在英国订造4舰炮船，开始清朝海军向国外购军舰的历史。其后，先后订购定远、镇远等多艘舰艇。1888年12月17日，北洋水师正式宣告成立并于同日颁布施行《北洋水师章程》。从此，近代中国正式拥有了一支在当时堪称世界第六、亚洲第一的海军舰队。</p><p>如果你有耐心看完那，我很谢谢您，您该明白中国根本没有败的理由。但我们还是败的，败的很惨。我不只一次对我老婆发了脾气，理由只是她和外国人讲话的时候用了英文。她告诉我这是友善和尊重。我对此有着无尽的不屑。为什么我们认为这是礼貌和理所当然？为什么在他们的国土上我们还说着该死的Hello，在我们的领土我们还要这么说。为什么如此的理所当然，是我们的脊梁还没有被矫正，还是趴下了就不懂再站起来。我们所有人都可以为自己的国家和民族骄傲。你可以告诉我国家还不成熟制度还有待完善。然而说着风凉话的人，人类就是这么传承下去的，所有罪恶的地方都会被改善。每个人都有为了国家的强大尽力的义务和责任，而不是站在一边对国家不吝啬你们的肮脏的口会。中国重新回到世界首强还有很长的路程要走，也许现在再用“天朝”这个字眼实在有点好大喜功的味道。但是我依然很喜欢这个词，喜欢这个国家。世界媒体已经开始酸葡萄说：中国要开始重新建立世界的秩序。我们不为这种报道冲昏头脑，但这次奥运会的入场顺序不再使用英文入场顺序，而用汉字笔画顺序。这个小消息也许很多人忽略了，但却让我兴奋不已。已经开始了，路还很长，但会走的完。</p><p>前几天看《最搞笑的一百条墓志铭》的文章时，有些确实不乏幽默感。我倒希望在我的墓志铭可以写上：我看到了你最强的时候</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>没有头尾的中间</title>
      <link href="/2008/04/24/----25/"/>
      <url>/2008/04/24/----25/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-4-24 03:11</p></blockquote><p>我穿起外衣，和我家的宝贝狗打了招呼，我走出家门。一心多用的毛病开始发作，思维以我不可控制的方式开始运转。</p><p>作为虔诚的信徒，对于神的存在深信不疑。当然，要与普通的迷信有所区别的是，我比他们有脑子。我很彻底的分析过我为什么会如此坚信这个世界是有神的。一个与乡野村夫无他的理由促使着我对这个的信仰。我曾经很悲观的认为人类的渺小几乎没有意义。凉宫sama说她坐在棒球场的观众席上数着高声呼喊的人群，这个球场不过四万人，一个城市有多少个这样的球场，一个国家又有多少个这样的球场，当用想象的能力把这些具体的量化时候，渺小到近乎卑微就灌满了我的全身，于是在不算长的人生里，我总是会寻求一些句子尝试的去阐述人类生活的意义，一个比较常用的句子就来自于今何在先生的小说《若星汉的星空》：“人生不过匆匆划过天际的一支箭，而无数人从开始到结局的过程，就能绘制出波澜壮阔的奇景”。我以为人类优于别的有智生物的本质区别就是继承，我们的知识是累积的，就如牛顿说的，看得远，是因为站在巨人的肩膀上。在现在这个时代，我们可能依然没有人智商能搞过爱因斯坦，但我隔壁只有小学文化的母亲，却使用着爱因斯坦一辈子到人生结束也无法触及的现代文明技术。这份伟大感让我很长时间信奉着人类可能存的价值。</p><a id="more"></a><p>花开两朵，个表一枝。当无数精英的存在造就了人类的伟大进步，但似乎在这个过程中更多的是芸芸众生。而这些人似乎对于人类并无益处。这些人的价值我实在无从谈起，让我们看一组数据吧：</p><p>　　世界上人类有记载的历史以来,一共爆发了大约14000多场战争,死亡人数以及造成的非正常死亡人数根据估计　　大约为36亿人.<br>　　规模最大的战争是第二次世界大战,或者也可以说是苏德战争;<br>　　苏德战场是二战的主战场<br>　　苏军先后参加过战争的军人为3000万,德军为1500万;<br>　　苏军死亡880万,伤亡及其他损失累计1900万<br>　　德军及其仆从国军队死亡500万,伤亡及其他损失1100万<br>　　苏联还有将近一千六百多万平民非正常死亡,军民累计伤亡4500万</p><p>　　如果觉得战争对于这个相对和平的年代是很遥远的事情，那么请看：</p><p>　　中国每年非正常死亡人数超过320万：</p><p>　　单项统计：<br>　　1. 每年因自杀死亡者高达28.7万<br>　　2. 中国每年约有二十万人死于药物不良反应<br>　　3. 每年医疗事故死亡20万人（估算）<br>　　4. 中国每年死于尘肺病约5000人（估算）<br>　　5. 每年约有13万人死于结核病<br>　　6. 2005年全国共报告甲、乙类传染病3508114例，死亡13185人<br>　　7. 中国每年道路交通事故死亡约10万。<br>　　8. 全国每年因装修污染引起的死亡人数已达11.1万人<br>　　9. 中国目前每年工伤事故死亡约13万多人<br>　　10. 每年触电死亡约8000人<br>　　11. 我国火灾年平均损失近200亿元，并有2300多民众伤亡<br>　　12. 全国每年1.6万中小学生、3000大学生非正常死亡<br>　　13. 中国每年死刑执行近万宗<br>　　14. 各类刑事案件死亡年均近7万人<br>　　15. 广州每年产生约1200具无主尸体<br>　　16. 中国每年因使用不当导致农药中毒的死亡人数达上万人<br>　　17. 每年食物中毒死亡数万<br>　　18. 1986年因酒精中毒死亡9830人<br>　　19. 我国每年过劳死人数达60万<br>　　20.承每年因大气污染死亡38.5万!<br>　　以上合计约230.5万！！！</p><p>　　21. 经由不安全注射传播的肝炎和爱滋病，已导致三十九万中国人提早死亡，并造成六百八十九万寿命年的损失（新华社）</p><p>　　22. 中国每年有将近一百万五岁以下的儿童死亡<br>　　——合计：328万以上，扣除可能存在重复部分，同时考虑统计不全部分，每年非正常死亡超过300万应该没有问题！！！其中80%属于责任事故。</p><p>我不否认这些人在活着的时候也为人类的进步创造了绵薄之力，但我无法遗忘的是这些意外对于一个他们每一个个体意味着什么，我们总能听到某些故事，一个人为之奋斗了很久的一个目标，在目标达成准备开始享受胜利的果实的时候，那个人突然因为某种意外突然死亡，似乎是三流悲剧小说用烂的情节，其实在生活的每一天都切实的发生着。在无法理清这一切之后，我寄希望与比自己更高一级的种族，人类的称呼是神。当然，这份信仰就如我说的，与乡野村夫无异，是一种对生命无力感的妥协，也是一种无知，就如中世纪欧洲人对于坏血病的陌生，产生了吸血鬼这类的生物一般。人类也许可以冲破这一切解释完整的生命。我希望在我有生之年有这样的一天。</p><p>我的好奇心有限，但我的求知欲旺盛。</p><p>在思索不透彻这些的时候，我暂时选择先摆乎起生命的中间。我走到一家几乎没有任何装修的店面前面，店里挂着几块贴满数字的看板，我摇着手里的两个钢蹦咔咔作响，看着老板微笑的说道：老板来一个机选的号码。之后抓着手上的纸片，瞟过那些盯着看板的人群。何必难为自己这句口头禅就脱口而出。某V说：中彩是哲学，希望中彩是梦想，知道自己不会中彩还去买彩票，即是对哲学的追求，也是对梦想的肯定，说明我是个活得很从容的中国人，这不是很好吗？理了下思绪，我离开了熙攘的人群。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>litter..</title>
      <link href="/2008/04/01/----24/"/>
      <url>/2008/04/01/----24/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-4-1 05:41</p></blockquote><p>八十后和九十后的娃吵起来了，这个看似笑话的东西现在正优酷的主页上打得火热，一些很好笑的议题又要被拿出来说道说道，书读了多了，就是不太好。文人相轻，恶习难改。</p><p>高中的时候，在那无聊翻书的时候，瞄过几本《女友》，这本不会被我看到的文章就入了我的眼。日子长了具体的内容是记不住了，简单的复述就是一个三十岁的女人，对于一个二十岁的女人，新进公司，全身散发的青春和活力，那种天然年轻的气息的造就了她的一种矛盾心态。她在分析自己心态的时候，疑惑的是四十岁的女人对此并没有一份过多的关注，四十岁的女人笑着说道：二十岁的女人，让三十岁的女人去对付她吧。一脸的超然。这么多年前的事情想起来，只是被最近优酷上的嘴战勾起了一些回忆的片段，这些片段让我感觉这个世界果然还真没啥事是新鲜的，一些陈词滥调又被拿出来耍嘴皮子。八十后的说自己是社会的中流砥柱，不像九十后的各个还嗷嗷待哺用度父母，九十后说自己青春靓丽不走寻常道路，说八十后心胸狭隘见不得他们的新时代的生活好。 其实这番论战，我们和七十后的玩过了吧？只是角度不同了，观点也自然变化了而已。</p><a id="more"></a><p>作为八十后的我，说道点八十后的人，你说你比别人早生几年得瑟个啥？啥时候成中流砥柱了我咋都不知道，按八十后的年龄计算，最早的今年不过二十八，我还不清楚二十八的年轻人啥时候就可以影响起社会的主流命脉了，不是说没有才，而是生活的资历还未够班，谦虚点，七十后的都没说他们把握了国家的命脉你们瞎摆胡什么。再说了，一堆孩子说自己有点叛逆有点颓废自己满意于自己颓废的酷里面你有啥好看不过去的。。那些总不见得是你们的娃吧，你们的娃就算现在生也得是个两千后的吧，这是你们值得计较的事吗？孩子有空去胡闹你们还说要当社会精英了，没事去对着一堆孩子说三道四，也不觉得自己掉份。按法律来计算八十后的百分百成年了吧？九十后的撑死了也就百分十成年，他们可以天真幼稚胡搅蛮缠你们也陪不起。再换到我们在他们这个年纪，我们被说成倒掉的一代的日子还少吗？小学就开始被父母辈吵吵什么中日夏令营中国的孩子是如何的娇生惯养，日本的孩子是如何自立自强，长大点了电子厅黑黑吧，你当三室两厅最早是为谁禁的，再有下去聚众打架勒索也未见的少。年轻，本无可厚非，难道就因为自己过了那个阶段，就有理由开始指责那些还在经历这些年轻的孩子？你还别告诉我你是看不惯这些孩子希望他们往好的方向发展，就说你们那帮子语气，就不是一个劝导的路子，倚老卖老的姿态二十来岁就开始做是不是过了点？这要是继续下去，我们是否会比六十前的人更加固执？省点力气，我们该为社会承担点责任了，而他们还没有，不是吗？</p><p>九十后的就不说你们啥了，我也不是九十后，你们的想法我也琢磨不透。等两千后的成长起来的时候，我只希望你们别站在我们现在八十后的角度对他们说三道四。将心比心，想想你们现在站过的位置。重复我们的路就不是你们所谓的“非主流”崇尚的吧。</p><p>最后PS：老子睡眠又不正常了，闲出P来大半夜在这里码字。啥时候能恢复正常啊。。= =#</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用现代科学去解释灵魂,天堂还有地狱</title>
      <link href="/2008/03/10/----23/"/>
      <url>/2008/03/10/----23/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-3-10 02:27</p></blockquote><p>首先我们要谈谈灵魂的本质(在假设灵魂存在的前提下).</p><p>最早提出灵魂说的根据是这样的:任何物品可以在破坏后,重新修复(破坏程度导致的修复难度不同),而生命体,即使身体完好无损或者曾经损害后再被修复,一旦死过就再也无法复生,于是人们怀疑生命体和非生命体的区别在于同时物质结构,非生命体中少了什么,那就是灵魂.</p><p>经过长期的宗教/科学演变,目前比较值得信服的说法是,灵魂是一种能量体,其本身包含了特定的循环结构,使之除非被严重破坏,或者能量供应不足,才可能导致灵魂的破碎与消失.</p><p>教科书上所提到的生物起源和进化中,都缺乏了一个重要的环节:</p><a id="more"></a><p>1.关于生物起源,科学家们非常有根据的解释了无机无转化为有机物(是一种偶然),有机物也可能组合成为有机组织(例:如何自然产生蛋白质,同样可以是偶然),但是唯一解释不了的,就是如何把有机组织从无生命变成有生命.事实上更简单的推论是,如果这也是一种偶然,那么我们把一块死肉(已经完整的细胞结构但已经失去生命活动)放在任何地方经过几万年,它就可能变的有生命,这显然是不合理的.</p><p>2.关于生物进化,尽管进化论中提到了优胜劣汰的原则,但实际上并没有那么简单.在一个固定的环境中,随着时间的流逝,除非因外界原因基因突变/细菌感染等可能因素,否则任何种族都很难产生过大的差异,一个种族如果变化不大,就会导致灭亡,例如恐龙(科学证明恐龙灭亡之前就有哺乳类,而后者存活下来).那么就比如从猴子变成人,如果是环境因素导致,很可能使所有的猴子都变成人,没变成人的都会灭绝(就如所有的恐龙都在某个时期同时灭绝一样.),而不会出现当前既有猴子也有人的矛盾了.</p><p>综合上边的矛盾,有人是如此解释生物起源和进化的:</p><p>当地球处于原始之海的状态时(海中富含大量有机物),真正产生的生命是我们现代所说的灵魂(原始灵魂),这是由机械波和电磁波复合构造的循环结构.机械波来自海水的运动,电磁波来自太阳的光(参考孤立子波动方程),这种结构很脆弱,寿命很短(也许1秒不到,也许最多几分钟就会消失),但是作为能量体,他们不受沟通的限制,自身变化的结果将直接传递给周围的能量体,使得这种生命进化速度相当快(生死循环也快).你可以把它们想象成独立的个体,但也可以想象成一个完整的个体,彼此没有任何界限,区别是个体会消亡,而整体一直存在.(也类似现在所有种族的生命体,我们作为人的个体会死亡,但人类这个群体一直存在.)</p><p>当进化到某个程度后,他们准备解决自己寿命太短的问题,于是考虑了物质载体,也就是通过特定的结构,可以长期保持能源的供应,同时不受其他能量的干扰,简单打破自身能量循环的结构.由于他们只能生活在海中(因为水的机械波和光的电磁波是构成灵魂的主要来源,空气中虽有类似环境,但缺乏了物质载体,即有机物),最接近他们的存在就是那些有机物了,因此在”有意识”的组合下,最初的细胞便构成了,当灵魂进入第一个单细胞后,它的生命确实被延长了(可能是几分钟,几小时或者几天),因而这种构造被灵魂体认可并且大量制造,产生了最初的单细胞生命群体.</p><p>之后的情况就好解释了,如同各种科学家所积极证明和推论的,当第一批细胞存在后,一切生命的进化便从此开始了,这些就不再赘述.最关键的一点是:上边的说法很明确的解释了灵魂的存在,和生命的起源,这绝对不是出于偶然,才能让一个非生命结构变成有生命结构的.(当前也有科学家在深海中探测到某些机械波,其存在寿命和运动方式与常规机械波完全不同,推测为没有物质载体的能量生命体后裔.)</p><p>不管当前科学是如何否定灵魂的存在,但是显然,同样作为生命体结构,有生命的叫活,无生命的叫死,两者在物质结构上可以没有任何区别,但生和死却永远是单方向转化而不是双向,那就说明除了物质载体完整外,一定存在其他因素来决定载体的生和死,这是否定灵魂论的学者们遇到的最大的难题,也是支持论的人最大的依据.</p><p>下边来说说死亡后,灵魂的去向.</p><p>其实这是一个很有意思的话题,某些本质的探讨甚至可能给我们与以往截然相反的结论.</p><p>灵魂在肉体死亡后(也就是失去能量供应或者能量循环被打破后)会脱离肉体,这并不奇怪,但和传说还是有区别的.正如前边对灵魂的描述,作为能量体灵魂是非常脆弱的存在,脱离物质载体后的寿命可能不超过1秒,可能几分钟,但既没有能量供应也没有对周围能量的防御力(哪怕是一阵风),使灵魂根本没有完整存在下去的机会,事实上就在肉体死后,灵魂最科学的解释有三种:</p><p>1.不久便消散,和任何能量的最终方向相同,无法维持循环,不断扩散直到变成普通的能量.</p><p>2.在消散前找到物质载体,这里要纠正的是:找非物质载体是不可能的,比如一个花瓶,灵魂就算依附在上边,也无法重新获取能量,无法杜绝自身能量的扩散,结果和第一种相同只有消亡.如果要找物质载体,那就大部分情况下只有生命体才可以,不限定种族,只要可以容纳灵魂的总量便行(但例如一个人的灵魂,肯定不能压缩到一个单细胞那么小的载体中了).当然,依附到其他生命体上,也就意味着和那个灵魂分享物质载体,有可能出现相互争夺,和平共存,或者其他任何社会形态,甚至生命体本身也不一定知道有其他灵魂在自己身上.而所谓守护灵通常是自己的祖先一说便来源这里,通常子孙都会看着长辈们辞世,但如果在辞世前陪伴左右,最有可能被长辈的灵魂依附(作为血亲,灵魂的相融性是最匹配,最适合依附的).这类现象中最大的变化是依附的灵魂掌握了肉体的主动权,使这个肉体依照自己的意志活动,这种例子存在但相当少,根本理由是被依附的对象,他的灵魂和精神状态都非常稳定,就好象一定程度的自主防御性一样,很难受到外界灵魂的干扰(可以想象成争夺汽车驾驶座的两个人,已经坐上去的当然不容易被推开),除非外界灵魂比他强,或者本体的灵魂因为各种理由很脆弱,才可能出现这种情况.</p><p>但凡事总有例外,当非生命环境满足某个条件后,也是可以容纳和维持灵魂的存在,这要求环境本身不存在波动大而”无规则”的能量变动,同时存在有序的能量流动(无论是光,热还是声音或者其他任何可能的有序形式),便有理由维持此环境中灵魂的存在.也就是通常所谓的”地缚灵”之一(注意是之一),这类灵魂并不是因为什么理由而存在于这里,仅仅是环境允许他存在,所以才能长期保持.</p><p>3.极端特殊的例子,就是能量体在消亡之前,找到了可以自主维持循环和稳定的方法,也就是我们最通俗说的”幽灵”了,这可以是某种怨恨,可以是某种羁绊,也可以是某种思念,重要的是由于稳定而单一的思维模式,使灵魂的结构非常牢固(因为灵魂本身也可以理解为意识的主体和源头),能量的补充可以由周围的少许热量来满足,这种情况就类似水的流动(灵魂本身就是机械波和电磁波的组合),过于迟缓,没有一定方向的水,很容易被大地吸收,而大地没有什么变化.但方向单一而且流速很快的水,就容易把大地冲成一条河道(也就是形成并稳固的结构),而不容易被吸收掉.如果再有附近无方向的水溶入补充了被大地吸收的部分,那么这条河就能一直保持下去.例如太阳能过于强大了,除非使自己的结构再强化,否则一般灵魂无法承受太阳电磁波的冲击.对此,有所印证的就是传说中一般幽灵只能在晚上存在(月亮反射的电磁波也许刚好够灵魂吸收和利用的,而只有修炼几百年的幽灵才可能白天出现一样.同时科学的观测,也只能在深海等阳光不是很充足的地方才发现”类似灵魂结构的能量生命体”,而很难在浅海观测到这类现象.</p><p>综合上边的问题,大部分灵魂只会在肉体死亡后不久便消失,这种消失既不是上天堂也不是下地狱,单纯的有序能量被周围吸收/扩散为无序能量而已.只有少数情况,才可能使灵魂维持下去,这种几率也许不到百万分之一.</p><p>最后说说天堂和地狱.</p><p>刨去宗教的观点,天堂我们不知道存在不存在,但地狱却很可能是有根据的描述.</p><p>根据最最基本的万有引力定律,一切能量/物质彼此间存在一定的引力,也存在结构上的斥力,例如我们可以站在地面上,是因为地球的引力使我们无法自主飞出地球,但我们不会被引力吸入地球中心,是因为构造我们的物质身体和地面的物质间存在的斥力大于引力,所以才可以站在上边.(详细的说包括强作用力和弱作用力等因素,不过没必要解释的太专业化)</p><p>但是灵魂不同,灵魂作为能量体,其密度比气体还小(属于等离子体范畴),对于物质的原子和分子结构来说,能量穿越而不受干扰是很轻松的问题(就如同我们无法穿过玻璃,而光和声音可以),因此我们假设一个灵魂因为各种理由存在的前提,同样也受到引力作用而趋向于地球中心,只有灵魂的载体存在/活跃程度高(例如相对温度高),才有可能减少这种引力的影响,类似于找到同密度的垫脚石.(最简单的理解是:热空气上升,冷空气下降.但其实是因为冷的物质更容易受到引力的影响,而把热的物质推到自己上边而已)</p><p>换个方向,从地球表面到中心,无疑是从冷到热,许多关于地狱底层的描述都是以高温来形容的,很大程度上是借鉴了火山,某些地下洞窟所连接的熔岩环境而形成的传说,但更确切的说,当灵魂被引力向地球中心吸入时,最可能看到的是一片黑暗(地壳部分,如果他还看的见或者说感觉的到),之后便是炽热的熔岩流,几乎100%的,以通常灵魂的构造来说,到地球中心之前,只要碰到熔岩地区基本就被高热分解了,也就是破坏其能量结构.但也有上边提到的因素,在特定的意念下,保持灵魂结构的同时以地热补充自己的能量(不至于消失),而长期存活于那个环境,如果因为火山爆发等其他因素,使其再次有机会出现在地表并依附于某个生命体的话,这种灵魂的能量很强,而对地狱的描述恐怕就是借其他生命体的机能来叙述的.</p><p>前边说过,灵魂作为能量体,其密度肯定不足以保持与地面的斥力而存在于地表,要么有依附载体,要么就是自身能量循环足够活跃,否则,不够活跃的灵魂要么消散,要么就会被吸向地球中心,只不过在到达之前就被地壳的熔岩热量破坏掉了.(就好象固有形态的一块冰被热水熔解那样)</p><p>而所谓天堂,根据科学家的观测,最有可能是因为地球磁场和引力的作用,在大气层中形成的有序能量流,它产生自长期的太阳辐射,借引力/磁场的约束和大气的阻挡,在大气层的某个高度上密度较大,并且随磁场的方向进行运动,而一些可以保持自己形态的灵魂,则有可能随波逐流的进入这个能量流,无疑在这里边也存在两种可能:一是被能量流分解融合,一是保持能量循环,借能量流中的能量维持下去.和所谓的地狱相同,这种能量流也只能允许强者的存在,而所谓的强烈的灵魂,无论是地狱还是天堂,都有可能脱离并回到人间寻找依附体,如果由这些灵魂来描述,其感觉不正是我们传说中的天堂/地狱吗?(即天堂向上,地狱向下)唯一的区别是,所谓”天堂”是以有序能量流为主体的存在,更适合有序能量结构的灵魂生存,而”地狱”只有高热,热量是无序能量的表现形式,无序的能量很容易打破有序的能量结构,也就消灭灵魂.因此地狱总是比天堂更加”可怕”.</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奋斗到现在的笔记</title>
      <link href="/2008/02/29/----22/"/>
      <url>/2008/02/29/----22/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-2-29 02:34</p></blockquote><p>奋斗了两天的网络编程收效甚微，很大程度上的代码借鉴让我很沮丧。这种时间快点过去吧。</p><p>入手匡威纪念版鞋一双，嗯嗯。第四双白鞋，这个真是怨念啊，老婆老说我不保养鞋子。很明显白鞋随便蹭蹭就要脏的我实在懒得动手。别拿吃饭说事，脚底我眼不见为“净”。</p><p>感冒加重，晚上开始咳嗽。也许是熬夜的缘故，不管了，看来病是不“qiang（福州音）”不好啊，老实点磕了五种药，效果一般，继续咳。还是早点休息，起床就可以开始考虑午饭问题了。又省了。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输不起</title>
      <link href="/2008/02/27/----21/"/>
      <url>/2008/02/27/----21/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-2-27 21:07</p></blockquote><p>浩方第一败。这个当然是说我重新游戏之后的事情。我和我徒弟说过浩方的都是傻子，这下我估计在电脑那头的家伙说我刚又碰到了个傻子。</p><p>战局几乎没有什么可叙述的地方，就是我得意洋洋的，然后被人冰龙一波压没了。虽然对于w3已经很生疏了，但自以为还不至于被这样平凡的战术打到。对方操作不出彩，意识不出彩，好吧在我想象里长相也不出彩= =。我还是输了。希望忘掉刚才那局重新开始新的游戏，盯着启动画面的我有一点胆怯，对方进来之后我退出了。心态上已经输给了对方。不服。</p><a id="more"></a><p>好胜，一旦失败总有阴影感觉似乎就没有可能赢了。想赢是没有错的，而怕输又是错的。一个超然心态看对局的人，不是无敌的高手，就是不懂的菜鸟。中间那一段的人们，都只会挣扎，挣扎的向上，但又没有可能走到最高处，又不甘落到最低谷。胜利让人飘然，失败使人泄气。情绪的波动就在一局的游戏间起伏。可见心灵是有多么的脆弱。几乎承受不了一点打击，摔键盘砸鼠标，推翻程序重写。不愿意修改，宁可重头再来。</p><p>咬咬牙，微笑下，希望自己更加耐打。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永遠也沒有最好的劍</title>
      <link href="/2008/01/21/----20/"/>
      <url>/2008/01/21/----20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2008-1-21 13:12</p></blockquote><p>永遠也沒有最好的劍<br>如果沒有火器出現的話，新的劍仍會不斷被設計出來<br>說明：<br>1英寸=2.54厘米<br>1碼=36英寸<br>1磅=0.4536千克</p><p>對刀劍興趣的重新興起很讓人欣慰，不過也帶來一些沮喪。我開始有機會分享多年來對冷兵器的興趣與愛好，但同時也遇到了越來越多的誤解和誤會，以及一些非常愚蠢的問題。</p><p>這種事甚至經常發生在本應熟諳此道的人們身上。我知道有一位狂熱的民俗小刀收藏家，他對每件藏品都精心呵護，它們的鋒刃從不會被亂用。然而他竟不知道刃與刃互相撞擊會使劍身出現缺口，我告訴他時他還不相信，大概是因為電影裡經常出現劍劍互砍的鏡頭吧。我讓他用收藏的刀子試一下，他就真的去試了… 有一次我讓一個人拿起一把我的藏劍，一把雙刃鬥劍（schiavona） 。（朱註：這是沿襲十六世紀鬥劍的一柄改良式雙刃長劍，擁有極長的刀刃和十分周全的護手保護，可同時進行刺擊或砍擊的攻擊。十七世紀時的重騎兵相當愛用。</p><a id="more"></a><p>武士刀多半是單刃，這個傻蛋的行為就很容易瞭解了）我警告他這把劍非常鋒利，但他向我保證他對劍很熟悉，是用劍高手，然後就像拿武士刀一樣擺起了專門的架勢。還沒等我開口，那把劍的背刃就被他拖過了肩膀，劃了一道六英寸長的口子。</p><p>還有一次我看著一個年輕人揀起一把蘇格蘭高地人用的雙手雙刃大砍刀（CLAYMORE），他馬上就想做出一個因為阿諾德?施瓦辛格扮演的科南而變得很流行的動作──其實也是由武士刀的姿勢演化來的──盡力用一隻手「很有氣概」地讓劍尖在空中轉了個方向，又重新握住，吆喝一聲：「好劍！」，然後將武器還給主人，他確信觀眾們會對此留下深刻的印象。唉，結果大多數觀眾都開始哈哈大笑。很明顯，他掌握不了那把劍，用那種方法使用那把劍對他來說實在是力不從心。</p><p>因為東方軍事藝術和日本劍的流行，我發現大多數的同道中人都把單手闊劍拿得像日本刀一樣。但也有專業的擊劍手拿起闊劍，接著告訴我這把劍根本無法使用，連防守都做不到。（朱註：這是因為闊劍重揮砍、而一般擊劍比賽中重的是刺擊（軍刀比賽稍有例外），就跟強調一擊分勝負的劍道比賽選手使用西洋劍一樣的不順手）世上並非只有一種劍，用劍的方法也並非只有一種。特別的技巧只適用於特別的劍，每種劍也都有各自的使用方法。西洋劍（Rapier）不能像武士刀那樣劈砍，武士刀也不能像西洋劍那樣穿刺，而它們對鎧甲都起不了多大作用。</p><p>可能有人會說我嘮叨，但我還是要指出，劍的不同設計是為了某種獨特的戰鬥方式；當您要評斷這種武器時，必須把這點放在心上。我聽過人們為哪種劍更好而爭論，例如西洋劍和維京劍哪種更優秀。這是很不明智的，他們所爭論的是戰鬥方式，而不是劍。劍只有在聯繫到它的用途時才有討論的必要。</p><p>這裡沒有雞與蛋的問題。對劍的設計總是第一步出現的，而設計的要求則來自於實踐。最初的鑄劍構思依賴於鑄劍者的技能和鑄劍用的原料──銅，之後是青銅。歐洲的劍和劍技一直在呈螺旋式發展，期間還有一些飛躍，直到耐用輕火器的出現。劍和劍技在世界上很多地方發展得非常緩慢﹔有些地方根本就沒有出現﹔而有些地方則發展成很奇怪的形式。</p><p>木劍嵌上鯊魚牙，通過拽、拖、抽打而傷敵，這些還是可以理解的。有一種劍和戰鬥技法卻讓我覺得很……呃，不知如何形容。還是由你來判斷吧：阿比西尼亞shotel是一種彎曲的雙刃劍。乍看上去，很像近東的彎刀，但仔細觀察後你就會發現劍身是一個完整的半圓，而且它還是──容我重複一遍──雙刃的。劍刃扁平，橫斷面是菱形的，非常堅硬。</p><p>用這種劍的戰士都躲在巨大的圓形皮盾後面。他們戰鬥時不去努力砍開盾牌，或把盾牌引開，而是從後面用劍尖去鉤對手。你一定能想像出那種戰鬥有多奇怪吧。許多年前，當影院裡還演出小節目時，我看過一次關於阿比尼西亞「劍術」的旅行表演。兩個人各執劍盾，尋找著對方的弱點，來回閃避，左右跳躍，笨拙的揮舞著長長的曲形劍，真是怪異。</p><p>當你握著一柄shotel時，你就會發現它非常不利於切割或是劈砍，也不能用於突刺，只有「鉤」這個動作可以使得非常順手，這樣，你就可以判斷出它的用法了。</p><p>為了對功能、設計、用法和效力間的關係有一個更好的認識，讓我們來看一下幾種劍的演變。</p><p>「rapier」（西洋劍）一詞直至15世紀末才出現，被用來稱謂一種細長的劍，它一般是市民服飾的一部份。實際上它可以追溯得更遠，有觀點認為它始於14世紀的刺劍。</p><p>刺劍（ESTOC） 是一種長劍，劍身堅硬，成三角形或長方形，沒有刃。它被設計用來刺穿防具，無論是鎧甲還是鎖子甲。如果它從垂直方向擊中鎧甲，它就有可能將其刺穿，否則它就會向一邊滑動，最終楔入鎧甲的接縫中。也就是在那時，人們學會了在劍柄與刃的結合處加上鐵條或鐵鐶用來護手。反對者則指出最早的西洋劍基本上是雙刃的，只有當它變得更輕一些的時候才被市民佩帶，這種劍並非來自戰場，它的主要目的是防身和決鬥。</p><p>當時，西洋劍普遍為雙刃結構，只是比一般劍細一些，可同時用來割與刺，護手的樣式還很簡單。劍法強調進攻﹔不到萬不得已，劍手不會有封擋或閃避的動作。很快，這種劍也被廣泛地用於防禦，劍刃因此常受到極大傷害，於是人們又學會了使用劍身的平面，但不管怎樣，劍尖總是最致命的部份。</p><p>隨著格鬥模式的變化，劍也有所改變。護手變成更為精緻的環狀以加強防護力，劍刃逐漸加長收窄。到了16世紀中葉，有延長護手的西洋劍基本成型。劍身頎長，是否開刃已不再重要。實際上劍身基本是方形的，直到最後幾英寸才變扁出刃。這樣劍手可以用抽擊的方式割傷對手的臉和眼睛。有時劍身竟然長達60英寸，這樣反而會給劍手帶來不便。</p><p>帶著60英寸的長劍走路不但非常笨拙，還會碰到東西、絆倒行人，很是討厭，以至於英國女皇伊麗莎白不得不下令凡配劍長過一碼者全部毀掉。</p><p>護手的工藝愈加成熟，到十六世紀末、十七世紀初的時候。刺擊的技法有所發展，這一點導致了劍身的無限制加長，不過劍身很快又收縮至36~39 英寸的範圍。與此同時，護手也出現了殼狀結構，到了17世紀，出現了樣式成熟的騎士佩劍護手，它和更早一些的碟狀護手非常相似，人們經常會把它們和杯狀護手搞混，這種事情一不留心就會發生，很令人困擾。此外，人們並不認為它看起來很考究，我的看法則正好相反，但我也發現它對我來說實在太浪漫了。</p><p>劍的變化並未停止，護手又開始變小，原來能為劍手提供很好保護的交叉護手逐漸退化為裝飾品。劍身繼續收縮，形成了小型劍的樣子──三角形，異常輕捷，長度在30~33 英寸之間。</p><p>小型劍看起來像美麗、致命的小玩具。它們輕盈纖細，非常迷人。很多人都把它們看作終極寶劍和最具殺傷力的決鬥武器。我個人強烈反對這種看法。它們只有在現在所公認的規則約束下才是有殺傷力的，那就是不能奪取對方的劍。儘管在現代擊劍運動中奪劍被視為違例，但它始終都是一種榮譽的、有價值的策略。對戰時你可以輕易地用左手把對方的劍撥到一旁﹔如果他一擊未中，收劍的時候只要慢上一瞬，你就可以抓住劍身。如果劍是開刃的，這種方法很不可行，但對於三角形的劍身，這種方法是非常實用的。</p><p>雖然還沒有真正地進入對西洋劍發展的研究，但還是讓我們總結一下從它開始出現，到十七世紀七十年代達到頂峰，直至最終的退化型（著者觀點）的一系列設計進程吧。當時這種劍的用處是為普通市民提供保護。隨著科學的發展，劍也因而受益﹔流行時尚和社會條件的改變同樣作用於西洋劍，但一直發展到的最終形態，它都未失其單獨使用的單手防衛性穿刺武器的本色，就是說它根本不適合用來對付防具或出現在集體戰中。</p><p>另一把值得關注的劍是中世紀十字劍，或騎士十字劍。它一直都被誤當成闊劍。這種劍可以一直追溯到鐵器時代的開端，我們可以從維京人開始說起。</p><p>早期的維京劍一般長33<del>34英寸、寬2</del>2.5英寸，帶有一條血槽。劍刃平行，向前非常平緩地收窄，或者根本不收窄。鋼在那時非常珍貴，而且大量獲取極其困難。所以在制劍時，人們採取了「分範合鑄」的方法。</p><p>在鑄劍時，高碳鋼被焊接在鐵質的主體上，然後劍身被重新加以鍛造，成為大馬士革刃的樣子之後，接著結合上高碳鋼的刃。之後劍身再經過琢磨、回火、拋光。一把明亮堅固的劍就製成了，它能經受住任何猛烈的斬擊。優質維京劍可以做到柔韌的劍身和堅硬的劍刃兼而有之。</p><p>這種劍一般配合木盾使用，它遇到的敵人一般也都是手擎木盾，頭戴鐵盔，身穿皮甲，要是敵人足夠有錢的話，他也可能身穿鎖子甲。</p><p>劍身必須具有一定的柔韌性，它經常會砍中盾牌、軀幹或腿骨，這時劍身會受到很大的反作用力，如果彈性不夠，很快就會彎曲變形。把劍脊鑄得更厚也可以對付這一問題，但這樣的話劍就會因為過於沉重而影響使用。那時一流的劍重量都在2~3 磅之間。戰鬥時只要先砍中對方，即可以獲勝。到了14世紀，隨著防具防護性能的完善，腿部成為主要的攻擊目標。在500 年後的一次對1361年堆積在瑞典維斯比的幾百具屍體的勘察中，人們發現70%的屍體腿部受傷，大多數深可見骨。</p><p>由於同樣的原因，劍刃必須足夠堅硬。骨頭是很堅韌的，包著鋼邊的盾牌也差不了多少。劍刃還常會和鎖子甲發生撞擊、摩擦，當時的戰士為了避免這一點，都儘量以脖子、手臂、尤其是腿為目標。</p><p>有時你門戶洞開，不得不承受一擊，這時你就需要鎖子甲的保護。製做鎖子甲的鐵絲並不經過回火，目的是為了保持其柔軟，回火後製成的鎖子甲在受到打擊時會發生崩裂，無法防止劍刃的傷害。柔軟的鎖子甲會通過變形從而吸收打擊力量並阻止進一步的切割。所有的鎖子甲都會損傷劍刃，但如果斬擊時角度足夠精准，力度足夠強勁，劍刃便會將鎖甲切開。</p><p>這就是維京時代初期劍在歐洲的普遍用法。（相對於羅馬帝國重盾保護，短劍突刺，相互協防，攻守兼備的密集步兵陣，這簡直就是小兒科一級的打群架，不愧是蠻荒的黑暗時代呀。──譯者注）</p><p>公元 900年左右，一種新的劍式出現了。劍身略有縮短，平均為32英寸，但寬度未變，劍刃逐漸收窄，形成了一個非常實用的劍尖。形狀的變化，使它用起來更加迅捷方便。因為重心更靠近手，機動性也就相應提高了。</p><p>其實，最大的變化在於劍已經通體由鋼鑄成。分範合鑄的方法成本既高，生產週期又長，大量鋼材出現以後，鑄劍速度加快，劍更為便宜，品質也未受到影響。但人們對劍的要求更高了，因為戰士的防護也日益完備。隨著時間的推移，鎖子甲積累得越來越多，大有取代皮甲之勢。</p><p>接著的兩百年發生了更多的變化，鎖子甲已經全身化，步兵的辛勞危險被丟給了農民。全裝騎士以精美的硬木盾和長槍為主要武器。劍成為第二位的備用武器，一般都用來對付輕武裝的步兵。</p><p>這些引起了劍形的改變，劍身重新變長，兩條平行的刃更加靠近。速度的重要性讓位於對重擊力度的追求，這是加長劍身的一個目的，另一個目的是為了給馬上的騎士提供更大的打擊範圍。</p><p>讓我們來到公元1300年，看一看這時候劍有什麼更大的發展。</p><p>在這個時代，盔甲在永恆的矛盾鬥爭中佔了上風。鎖子甲稍有加厚，更為堅固，上面開始附以鋼板和鋼片。這些變化也促進了劍的變化，新型的劍問世了。</p><p>新劍中最為卓越的應數巨劍（Great Sword），也被稱為戰劍（War Sword）。這是一種長劍，劍刃一般都有40英寸。劍的重量並不很大，只有4~5 磅，完全可以配合盾牌用一隻手揮舞。劍柄長到足夠容納兩隻手，所以它也可以當作雙手劍使用。超長的劍身代表著更快的劈砍速度和更大的爆發力。與長刃巨劍同時代的還有一種短一些的武器，它的刃和後期的維京劍類似，只是形式要更誇張一些。這就是大型劍（big sword） ，它的劍刃非常之寬，在前段又急劇收窄。寬刃增強了劈砍的力度，堅固的劍尖成為劍上最重要的一個部份，犧牲柔韌度換來的剛性成為突刺的強有力基礎。</p><p>還有一種劍在此時獲得了新生。彎刃刀一直是一種邊緣武器，隨著防具防護力的提高，彎刃刀的能力便逐漸凸顯出來。它極寬的單邊短刃可以造成恐怖的打擊，其形狀很像時髦的Shriner彎刀。不僅是騎士，弓箭手和普通武裝者也非常喜歡用它。</p><p>從這時一直到十七世紀五十年代，武器與防具的變化更快了。</p><p>鎖子甲──防禦的先驅和光榮，被鎧甲踩在腳下。防具的製造技術達到了前無古人，後無來者的水平。鎧甲是一種比鎖子甲更輕，更堅固的防具，隨著防禦能力的提高，戰士反而有了更大的活動自由。它唯一的弊病就是像個保溫爐，幾乎談不上什麼空氣流通，這很容易導致穿戴者的疲勞。騎在馬背上，只是揮動胳膊的時候，這一點還可以忍受，甚至有人還可以堅持很長時間。步戰的時候，更大的熱量散發和更多的氧氣需要使鎧甲變的異常累贅。</p><p>鑄劍師們為了戰勝新的防具而背水一戰。</p><p>質輕形扁的劍刃被拋棄了，身闊頭尖的特點保留了下來。劍身進一步加厚，橫斷面變為細長的菱形，非常之堅硬。重量範圍明顯加大，有些劍還停留在2~3 磅的水平，有些已經達到了 5磅。重劍均純以鋼鑄。無論輕劍重劍，它們存在的意義都是為了刺穿鎧甲，呈直角的突刺和強有力的衝擊是它們完成任務的保證。即便從甲面上滑開，它們也可能從鋼鐵的縫隙間嘗到鮮血。重劍們更可利用自身的重量擊碎鎧甲的防禦。</p><p>這是劍最後一次試圖勝過防具，以後這種嘗試就被放棄了。劍實在無法勝任對抗鋼甲的工作，斧頭、釘頭錘和戰斧成為武裝格鬥中的主要武器。</p><p>劍並沒有因此而謝幕，它只是不再被用於騎士間的戰爭。沒有人曾忽視它在社交和傳統上的重要性。市民佩劍成為正式服裝的重要組成。在戰爭中，扁平的輕劍再度被用於普通的武裝者以及其他輕部隊之間的戰鬥。</p><p>我們的討論只能停留在走馬觀花的層次上，更無法提及弓箭和長矛把盔甲變成了一堆垃圾，火藥的爆炸轟碎了戰爭的優雅。但我們還是了解了鑄劍的規律──特定的障礙產生特定的要求﹔特定的要求引發特定的設計。每種新型的劍都對應著防具或戰鬥方式的發展。　　讓我們來看一個劍和時尚間出現矛盾的現代例子。</p><p>日本的武器與防具在13世紀時得到長足的發展，之後的幾百年裡又停滯不前。武士刀是一種傑出的劍，其功能與設計者的初衷完全吻合，相應的劍技也很是優秀。不管你提出哪種出類拔萃的流派──無論是劍盾技、細劍刺還是土耳其－伊朗劍術，日本劍法和武士刀都能毫不遜色地與之相提並論。</p><p>武士刀戰法多採用拖砍，刀頭以下六英寸範圍是傷敵的首選，它硬、厚、微彎的特點充份地適應了這些要求。</p><p>最近我看了一部電影，裡面的英雄使的是一把筆直的寬刃重劍，做的動作和擺的姿勢卻是與之風馬牛不相及的武士刀法。用劍頭六英寸進行的斬擊根本起不了什麼作用，而且還能把你滿口的牙齒震得生疼。如果把劍大大加厚，或許可以避免這種震動的出現，但這樣做無疑會增加劍的重量，還會進一步降低斬擊的作用。簡而言之，這部電影真是大錯特錯了。只有在那把劍被當成花劍做輕刺的時候，才有可能會更搞笑一些。電影中的英雄當然是用劍不論輕重的超人，但攝像機前的演員頂多只是在揮舞一根鋁棍。（朱註：由於道具必須符合質輕的要求，有時為了避免大場面時兵荒馬亂傷人，甚至必須使用橡膠劍）千萬不要用6磅重的鋼劍去嘗試那些動作，至於有些人做出來的9磅貨，還是讓它們安靜地躺在那裡好了。</p><p>我曾見過有人把現代的劍掛在牆上，說是要用它來防賊。這個主意的可行性我們以後再談，現在先讓我們來說說現代的劍。</p><p>大多數的現代劍都是用優質材料精工鑄成，我認為它們裡面有一些的劍刃很可能過於堅硬了，無法承受反擊的力量。它們的通病是太重，一把六磅重的劍是個笑話，即便是四磅，也會讓人咯咯輕笑。劍不是小刀的加長版，它必須有和自身的尺寸相比更輕的結構。</p><p>適合於現代人使用的重量應該是2~3 磅，過多的重量會嚴重降低速度、機動性、躲閃能力和恢復姿勢的能力。它應該是短、直、鋒利的集合，適於強力前刺（太暴力了，18歲以下的小朋友們請不要看這一段──譯者注），有如長型的腰刀 （朱註：WAKIZASHI，漢字為「月劦」差，是武士隨身攜帶在腰間的武器），通常被當作忍者劍來販賣、勒頸者（the hanger）、歐洲的獵劍或是19世紀步兵軍官佩劍的縮短型。至於12磅的騎士劍﹖你有12個隨扈替你牽馬扛槍抬劍執盾穿盔甲嗎﹖</p><p>有一種劍提供了一些很有趣的關於設計思維的資料，那就是馬刀(Cavalier sword)。它向我們展示了戰鬥模式，對戰鬥模式的設想和劍的設計之間的關係。</p><p>大多數人都會告訴你彎曲的騎兵馬刀在多年以前就已經被發覺不適用了，更有效的騎兵劍應該是直刃馬刀，他們還會以本世紀英、美騎兵均採用直刃刺擊型馬刀為例，它們是騎兵在被機械化部隊取代之前的最後一型軍用馬刀。其實是否直刃馬刀更好一些的問題從來就沒被說清楚過。</p><p>這一爭論持續了一個多世紀，直劍以微弱優勢勝出。下面就是這兩種類型各自的辯護詞：</p><p>彎刀被世界各地的馬上武士使用過很長時間。弧形刃的斬擊可以造成嚴重的破壞，受害者即使不死，也會喪失作戰能力。和步兵對戰時，彎曲的劍形可以保證騎兵在施以重擊的同時劍柄不會從手中脫出。當敵人也是騎兵時，它同樣能發揮良好的攻擊和防守性能。對跨坐在馬上的戰士來說，劈砍動作要比不自然的刺殺動作來的容易得多。</p><p>反對者指出，騎兵經常會被彎刀多次砍中腦袋依舊可以繼續戰鬥。當刀刃深入敵人身體之後，也會在戰馬躍動的時候脫出主人的掌握。在說明了彎刀的諸多事故和不完備之後，他們又指出了直劍的優點。</p><p>直劍可以刺中臥倒在地的步兵，馬匹是不願意踐踏人體的，需要執彎刀的騎兵冒著極大風險探身劈砍的情況，直劍只需輕鬆一刺就能搞定。穿刺會給敵人帶來更加嚴重的傷害，一擊就可以使敵人的戰鬥力喪失。騎兵通過訓練能夠熟練地掌握針對騎兵地刺殺動作。準確的手腕動作可以拔出深入人體的劍刃，也可以讓戰馬完成這一工作。而且突刺是很難被躲開的。</p><p>兩種劍各有優勢，也都存在問題。彎刀最嚴重的缺陷也是它的缺陷中最容易被改進的。要知道，大多數馬刀是沒開過刃的，不斷地劈開血肉使它們表面遍布污穢的裂口，影響了它們的破壞力。要是把它們仔細磨利的話，情況就完全不一樣了。對於直劍來說，用一隻伸長的手臂控制40英寸的劍刃落點，還要把 800磅戰馬的衝力以身為梁傳遞出去，可能發生的情況實在是一言難盡。</p><p>一言以蔽之，這個故事說的是不同的劍的不同的問題。絕大多數製作優良的劍能令人滿意地完成它們的任務，但永遠也不會出現一把萬能劍。對它們優劣的判斷一定要聯繫到它們的用途，永遠也沒有最好的劍。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上一章的最后一篇和这一章的第一篇</title>
      <link href="/2007/12/31/----19/"/>
      <url>/2007/12/31/----19/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2007-12-31 20:09</p></blockquote><p>似乎有句话叫做为了忘却的纪念，那么好吧，我就记下这些东西。然后开口和他们说bye，永远别回来。</p><p>　　&gt;&gt;&gt;&gt;&gt;连线的木偶&lt;&lt;&lt;&lt;&lt;<br>　　<br>我一贯是很鄙视一个按照别人设计好道路去行走的人，那就像被人操作的木偶一般一扭一扭的缺乏自己的真实感，不过很显然这只是我的幼稚，现实里你很难分辨出谁是按照自己的意愿在行走，又或者谁是被人操纵而止步不前。这两者之间本身就没有明确的界限，别人的操纵也可以被说成是自己的需求，是我把我的绳子交道这个人手里的，我自己无法掌握自己的绳子，这根绳子给他比给我更好，这样的理由十分充分，以至于似乎没有什么不妥。</p><p>　　&gt;&gt;&gt;&gt;&gt;人是不可以随心所欲的&lt;&lt;&lt;&lt;&lt;</p><p>在你需要选择上某条道路的时候，总是无法做到那么的潇洒，总有这样或者那样的顾及，一个活着绝对潇洒的人那也是个绝对孤独的人，很多事情不过就是在寻求一个契合点，如果这个点被找到了，那么事情就将变得十分顺意。但开始选择的时候总会有很多的疑惑，例如这条路是否适合自己，是否拥有很好的前途之类的云云。受教程度越高的人总是要比那些没受过什么文化教育的拥有更多的烦恼和顾虑，而这些顾虑在没文化的人眼里反而就是最好解决的事情。世界人民千千万，每天花在思考自己前途上的人不知道有多少，似乎有句闲话，人类一思考，上帝就发笑。这话现在想来：精准。</p><a id="more"></a><p>　　&gt;&gt;&gt;&gt;&gt;没文化真可怕&lt;&lt;&lt;&lt;&lt;</p><p>这句话时常被挂在嘴边，当然还有一些类似的话，比如：人可以没有见识，但必须要有常识。人的抱怨欲才是真的强的可怕。当然这也源于所谓的人生不如意十之八九。生活总是不如意的，要对生活满意的人估计拉到广场去死也未必有社会的米虫多。针对这个现象，nga也早就有了特有的词汇：“喷”。没错，对于同事你在喷，对于政府你在喷，对于社会你继续喷。喷似乎被认为是个很有才的表现。一个人要是同意别人的观点就要被贯上马屁的嘴脸。齐威王的故事是个好故事，人总是希望在反差之后达到超出预料的效果。凡是同意的就是云云众生，无能之辈。只有特立独行才是显示才华的最好表现。其实有时我真的很想告诉你们，我知道特立独行这个词的时候，那是形容了一只猪。</p><p>　　&gt;&gt;&gt;&gt;&gt;君主论&lt;&lt;&lt;&lt;&lt;</p><p>任何伟大的著作你都会看到曲解的影子，有些时候同样的东西被不同的人读到就能有完全不同的反差，尼可罗·马基亚维利是个可怜的家伙。我以为他应该把自己的想法带到自己的棺材里。因为一份总结的工作是不讨好的。其意义就在于没有任何的阴谋不再漫长的史诗里呈现过。而把其理论化就是你悲哀的影子。这种东西其实非常的多，因为我们无法分清楚什么是因，什么又是果。《幸运星》是个好动画，就算是在萌啊萌里面也夹杂着某种程度的说教。一个小段子，小司吃了一口草莓，然后很萌的说了句草莓有水果蛋糕的味道耶。小镜就说，是因为蛋糕里加了草莓啦。好吧，我粗糙的词汇是很难把一个很萌的画面呈现在你们的面前。写到这里我觉得这个段子入理太浅了，那就来个深刻且明白的物证：钱！</p><p>　　&gt;&gt;&gt;&gt;&gt;白头吟&lt;&lt;&lt;&lt;&lt;</p><p>　　皑如山上雪 浩如云间月<br>　　闻君有两意 故来相决绝<br>　　今日斗酒会 明旦沟水头<br>　　躞蹀御沟上 沟水东西流<br>　　凄凄重凄凄 嫁娶不须啼<br>　　愿求一心人 白首不相离<br>　　竹竿何袅袅 鱼儿何簁簁<br>　　男儿重义气 何用钱刀为<br>　<br>　　&gt;&gt;&gt;&gt;&gt;We can do nothing but to see the times go by in the path which God has chosen. &lt;&lt;&lt;&lt;&lt;</p><p>我一直口述着一个事实，就是我是个虔诚的信徒。我对神的崇拜超出周围身边人的想象。我之所以没有接受现世的任何信仰只不过是我生命里还没有接受的明确的神谕。我希望得到神真是的存在感后在为此顶礼膜拜。我会有这样的想法我分析过一些道理，因为很多时候我认为很没戏的事情都会发生在我身上，就是说只要我想，很多东西都可以得到。而这的问题只是时间上的等待。当然很多事情是很微妙的，这点我也很难解释的清楚，和我亲近的朋友都应该知道我一个很无敌的能力，招雨。针对这个问题我实在不认为是件幸运的事情，因为这种事情最夸张的时候就发生在我回到家里杂货间停车的时候雨停了，而我出来走向离我家走道不到二十米的地方哗啦一阵吧我淋透。为此我的朋友还受了点灾，真是抱歉了。不过这针对于我而言这也是过去的事情了，今年我头上的三尺神明似乎离开了或者去打瞌睡了。我非常期望的事情被驳了回来，而我特意尝试的天阴的时候出门不带伞也不再出现一片瓢泼了。我不清楚这两者是否有必然的联系，但是他们都确实发生了。</p><p>　　&gt;&gt;&gt;&gt;&gt;The greatest Salesman In The World&lt;&lt;&lt;&lt;&lt;</p><p>作为一个杂学派的家伙，对于很多事情都有很高的兴趣，然而对于经济似乎是我极度匮乏的一面。而当我被这本书吸引的时候我承认我只是被最伟大这三个字给吸引。我似乎很喜欢这三个字眼，但本质上我觉得这本书只是个噱头，就如谁动了我的奶酪。他们似乎只是向你强调了一下一些生活必要的常识，而似乎又可能是被你们所遗忘的常识，翻阅这本书的时候，我似乎看到了很熟悉的影子，就如我猜想的一般，十篇羊皮卷里面没有一个字告诉你如何赚钱，就当我有一页没一页的翻阅着这本书的时候，十篇羊皮卷并不出彩。可以说都是些陈词滥调。但书并没有结束，这本书不但有正文篇，后面还有对于这本书的阅读方法。而我看到眼里的就是如果你没有XXXXXXX，那么你这本书就白买了。看完这句话，再翻到卷头：仅以此书，献给所有寻找人生价值的人们。武侠小说里总是有很多武林秘籍，只要你练了，基本不打个天下无敌，起码也是世界前三。对于看着这种俗烂情节成长的小孩，似乎都希望这世界也有本武林秘籍，哦，是赚钱秘籍。里面写满了第一步如何，第二步如何，第三步就能如何如何。好吧我承认我也这么想过。我曾经拿到书的第一个想法就是这本书有用嘛？但现实往往证明不是作者没用，而是自己没用。不要指望模仿能够出彩。再回到rn众很爱说的话上面：学什么先学做人。当然我明白他们的意思在这里不实用。</p><p>　　&gt;&gt;&gt;&gt;&gt;人生五十载，与天地长久相较，如梦似幻；纵一度得生，又岂有不灭乎&lt;&lt;&lt;&lt;&lt;</p><p>在打了个哈欠过后，突然懒得动笔继续写下去了，不过在这个哈欠之前，也不过剪断了些闲话而已。不必在意，下一章,请开始吧。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pleasure Line</title>
      <link href="/2007/12/30/----18/"/>
      <url>/2007/12/30/----18/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2007-12-30 20:36</p></blockquote><p>公元2000年…梵蒂冈法蒂玛的第三预言..预言内容涉及了罗马教皇暗杀未遂事件…我们在神所指示的道路面前…只能无能为力的看着时代的车轮滚滚而过…</p><p>信念，彼为灵魂之灯<br>每当看到最后一集的开始、看到那美丽的草地和蓝天时，心头都不由得一阵抽紧。在那个令人永远难以忘却的时刻，那个破旧的小屋中，怀表的秒针一格一格地前进着，缓慢、不可遏止。咔嚓咔嚓的机械响声，每一次都像是直接击打在心脏上一样；在大时代的波涛中，这些都只是一个微不足道的旋涡，然而就是注视着这一个旋涡，就会感觉到面对生命和宇宙的必然时，人类的渺小和软弱。夕阳逐渐落下，生命之火在风中飘摇，天空中灵子流(Astral Line)的大河却依然流动如常，间或在人间又卷动几个浪花。恶魔和女孩的手紧紧握在一起，在赶来的修女们面前，那永远睡去的二人安详地微笑着，这时便有一种悲哀的浪潮从心里泛了起来。我们深切地感觉到，这个宇宙有它自己的规律，而所谓恶魔和人类，也不过是被灵子流大河冲击、又被神所操纵着的一个木偶。但也正是在动画的这个结尾中，只有从那两个睡着了的纯洁心灵里，我们才能在这样的无助和悲哀之中，发现一点希望。</p><a id="more"></a><p>这是一个很少被日本动漫所涉及的时代。1928年的秋天，正是美国战后那黄金时代的最后一年；在这“两次大战之间的二十年休战期”即将结束的时候，世界也正在逐渐走向动乱。夕阳的影子已经把日不落帝国的旗帜掩盖，红色的苏联正在打下它最初的基础；中国军阀混战的时代刚刚结束，但整个国家还依然笼罩在黑暗和压迫之中；德国的兴登堡总统已垂垂老矣，纳粹的势力不可遏止地兴起——而与之对应地，日本的军国主义者也在磨刀霍霍，为3年后在东北，以至13年后在太平洋上燃起的战火积累薪柴。</p><p>这不是一个最好的时代，而且它即将转变为最坏的时代。但是至少在那一刻，对美国人来说，战争、动乱和恐慌都仿佛是遥远的事情。在这个新大陆上的国度中生活、成长，他们认为自己是幸福的……<br>（一）<br>似乎从EVA以来就有一种惯例，凡是涉及宗教、神话或神秘主义的作品，总是会受到相当程度的关注，就连很多二流动画也能得到这样的幸运。《Chrno Crusade》也是这样：就像RahXephon的成功离不开它从美洲神话里借用的背景一样，宗教气氛浓厚至此的一部动画，近年来实在是不多见。——最初放出预告及设定的时候，这一点自不必言；因为生在那样一个恶俗美少女动画泛滥的2003年，当时甚至还有人嘲讽地说：“终于要向修女下手了吗？”——然而，和一般的看法相反，当第一集出现在人们面前的时候，观众发现自己所看见的，是一部轻松、搞笑的娱乐动画，而且绝无恶俗。</p><p>——原来，又是美少女和死心塌地的帅（当然这次是个正太）恶魔的故事啊。</p><p>对没看过原作漫画的人来说（当时又有几个人看过漫画呢？），《Chrno Crusade》给人的感觉就是这样：毋宁说，在那最初的几周里，它给人的感觉像《Slayers》。我也确实见过有人把这两部动画相提并论的，甚至还有人拿克罗诺跟杰洛士相比……几乎所有商业化的卖点这部动画都齐备了：野蛮美少女、正太加帅男、宗教元素的卖点、华丽的战斗场面，而且，片中的黑暗背景和“恶魔”的存在又使动画蒙上了一层“叛逆”的罩纱。再加上没有像当年多数动画一样疯狂地胡搞，《Chrno Crusade》会在人们的眼中占有一席之地，也就是必然的了。</p><p>接下来，“时代的车轮”滚到了2004年。随着在梵蒂冈响起的枪声，一切都结束了。看完最后一集再回头看看第一集，简直恍若隔世。直到那时才想起来：在看动画前几集的时候，虽然当时所有的评价都说“这是一搞笑动画”，但总觉得这些搞笑都很生硬，甚至是在强颜欢笑；——那当真是在强颜欢笑啊！尤其是，无论情节多么悲惨，每集最后的下集预告依然轻松搞笑，一直持续到第21话。其实，这也就是这部动画的一种精神了吧：不管如何残酷压抑，心灵如何动摇懦弱，但最后信念却总能获胜，解除肉体和灵魂的石化，让生命之花重新绽放。</p><p>可惜这一幕只能存在于想象之中了……<br>我个人的体验是：大凡优秀动画，在看的时候总不是一开始就对它死心塌地的；必须得等到看到某一个高潮时，整个心灵都被重重地震撼，从那以后才会发现，自己已经深深地被它吸引。比如像高达W，我是看到一半多的时候有这种感觉的；而在看《Chrno Crusade》的时候，第一次的震撼，是在艾丝玛利亚的情节结束之后。就是动画里罗塞特第一次解放封印、克罗诺从正太变成帅哥那次；在安慰小艾丝的时候，她说：“我可能活不到30岁吧。”</p><p>我一直看到快结束的时候才想通，到底是怎样的心境、怎样的意志，才能让人微笑着面对这么残酷的命运，能开朗地说出这样的话？——一个美好生命的扼杀是人类共通的悲剧，从那时开始，笼罩在剧情中的暗影一下子钳住咽喉，让人透不过气来，直到动画终结。从那以后，无论是罗塞特童年过去的披露、艾恩的残暴还是姐弟二人终于重逢却永不能再相认的悲哀，全都属于从那一刻播下的种子里长出的情感之藤。所有那些令人哽咽、令人痛切的情节，不用再一一追述了吧；罗塞特被恶魔们称为“玛克达拉的玛利亚”，她手腕、额头、脚上的圣痕就象征着她的责任和牺牲——最后的圣痕刻印在她的胁部，那是基督当时被罗马士兵刺伤的地方；那正是在克罗诺和艾恩决斗的关键时刻显现的圣痕，在最后的痛苦中，凝结了她对克罗诺的爱，和不甘就此永受控制的意志。</p><p>　　 “给你！所有的时间，全都给你！”</p><p>Chrno Crusade》的最高潮，罗塞特没有用什么华丽的辞藻，这只是最直接的一句呼喊，直达灵魂身处，撕心裂肺。没有一点夸张，当时我就是这种感受；在整部动画中再也没有什么能与这里相比了，一直到终章的命运之日。请不要把他们的死说成是幸福的，死亡决不可能是幸福的；当时真想喊出声来：为什么要让他们死呢？他们不应该死啊！说是“蒙主宠召”也好，什么“潇洒”也好，那些都不需要啊！他们明明都是像一个真正的人一样，在那么勇敢地活着。<br>（二）</p><p>他庄严地低声说：<br>“而且还有一个人，我们必须永远顺从。”<br>“谁？”西穆尔登问道。<br>郭文把手举过头顶一指。西穆尔登顺着他手指的方向看去，仿佛透过地牢的拱顶，看到了繁星密布的天空。</p><p>　　　　　　　　　　　　　　　 ——雨果，《九三年》</p><p>《Chrno Crusade》里的人名，象征意味都非常浓重。Rosette的意思是玫瑰花饰——圣母的象征；Joshua是圣经里摩西的后继者、希伯来人的领袖；而他们的姓Christopher是著名的基督教殉道圣徒的名字。Mary Magdalene也是著名的女圣徒（顺便一提，宗教传说中的Mary Magdalene是个被耶稣感召后改正的*女）；Chrno这名字应该是chrono，表示“时间”，只是为了不跟那个著名SFC游戏《时空之旅（Chrono Trigger）》里的男主角（名字就叫Chrono）混淆，所以才少了一个o的，别忘了克罗诺的尖角的力量就是停止时间。至于Azmaria，这个名字直接就是A vu Maria“万福玛利亚”的变音；另外她的姓Hendric、以及Satella Harvenheit、Fiore Florette Harvenheit这些名字肯定也不是随便起的，虽然无法查证它们的意义，但我敢保证它们肯定也有什么隐含的寓意在……</p><p>然后，就是最重要的一个名字，艾恩。</p><p>“艾恩”（アイオーン）这名字来自希腊语，一般拼作Aion，但也能写成Aeon；这个词，是诺斯提派教义中对“神”的称呼。——诺斯提（Gnostic）主义是公元一世纪时产生的一种神秘主义派别，在当时的罗马帝国东部一直相当流行，他们的理论后来与兴起的基督教结合，就是所谓基督教诺斯提派，这个派别的势力在2-3世纪达到极盛，作为当时最主要的基督教异端之一，甚至足以与正统派别抗衡。——在他们的理论中，神就叫Aion，其数目由几十个到365个不等，这些“永在者”（Aion的字面意义就是“永恒”）之间还有等级划分，他们认为这个世界是由较低一级的Aion所创造的，他是个恶神，而诺斯提派所追求的，就是通过灵智超越恶的这个Aion，而达到与至善至高的Aion——父神上帝相同一的境界。诺斯提主义本身就是一个神秘主义派别，诺斯提教里也充斥着神秘主义的思想，甚至到了很不可理喻的地步。《Chrno Crusade》中借用这个名字来加到那个企图逆天的大恶魔头上，虽然很扯淡，但也很好地暗示了艾恩的地位。他想翻天覆地（真的是“翻天覆地”），创造新的世界，这是属于神的力量的范畴；他不也是想摆脱神的束缚、自己成为神吗？虽然他是邪恶的恶魔、或者说是要成为一个恶神……</p><p>像艾恩和他的党羽这样，才算是真正的恶魔啊。现在的动漫里对邪恶的认识实在太肤浅了，甚至就连生活中稍微有一点不顺都能被扯到“社会的邪恶”或“人类的劣根性”上；和那些相较，艾恩虽然只是完成了一个普通的恶魔应该做的事，但他的所作所为在近期那些温吞水一样的“坏蛋”中已经足够醒目。人类对恶魔的看法，从来都是忠实地反映了自己的经验：中世纪的人们随时都受着战乱、饥馑、瘟疫——各种天灾人祸的威胁，过着悲惨的生活，所以他们想象中的地狱和恶魔自然是纯粹邪恶的象征，是像黑炭一样、用*子把人送进汤锅的怪物；而现代人，老实说，生活实在是太过幸福和平静了，以至于现在人们就算想象恶魔也想象不出什么邪恶来，甚至他们还多已经变成了追求自由的浪漫象征。对克罗诺的刻画就很典型地反映了这一点，然而《Chrno Crusade》难能可贵的地方，就是它也能刻画出“真正的”恶魔的形象。综观全篇，我们看不到艾恩有一丝一毫善良的特性，而且和那些老式RPG的大魔王还不同，他不仅邪恶，而且还绝对精明——这两者结合在一起，就必然是一个可怕的存在。脸上一直都挂着可以用“开朗”来形容的微笑，想要达到目的也总是依靠恶魔传统的诱惑手段。</p><p>看《Chrno Crusade》，最让人郁闷的不是那个结局。结局很“悲哀”，但不“郁闷”；动画里最郁闷的地方有两个，一是利塞尔卑怯地控制人类的时候，一是艾恩利用罗塞特煽动民众的时候。其实利塞尔这招，永井豪在《恶魔人》里早就耍过了，可惜罗塞特和雷明顿都没能像不动明那样走出那一步；而至于艾恩的煽动手段，虽然看着也很郁闷，但是不得不承认确实有效。动画中把那些暴民叫Crusader，可谓是抓住了Crusade这个词的本质了；中世纪的十字军，实际上也不正是如此吗？FQ和Crusader其实是一回事：从头至尾，他们自以为是为了自己的信念，可其实是为了他人的目的而狂热地为恶魔的事业献身。艾恩诱惑，他不仅仅是诱惑那些恶魔崇拜者以获得力量；他开始时是诱惑克罗诺，后来又诱惑约书亚和罗塞特，再利用罗塞特诱惑民众。利塞尔控制人类的能力其实也是一种诱惑，但这种手段和艾恩让人自愿给他当枪使的手段比起来未免太低级了。——而玛克达拉修道会和那些「民兵」（：b…… Militia）们奉主之名剿灭恶魔，那些暴民所自以为正在做的其实和他们一样；玛克达拉修道会比暴民们看得更远，仅此而已。但是，玛克达拉修道会也不可能看到万事万物的尽头，总也有比玛克达拉修道会看得还要远的存在吧？就像那个比喻所说的，石头一级一级地往更高的台阶上放，最后直截了当被投向人的肉眼所永不能及的远方。</p><p>全作中第一个Crusader，其实是克罗诺。克罗诺从头到尾都只是个孩子（不是指他正太造型的外表）：从艾恩口中说出来的“革命”和“自由”这样的言语对他的诱惑有多大，谁也不难想象。因为那能使他自愿放弃爵位和声望，从魔界背离；艾恩完美地利用了他的天真和热情，就象他后来煽动民众一样；克罗诺就是一个十字军。我认为这也正是《Chrno Crusade》一名的意义：被艾恩蛊惑的时候，杀戮恶魔的他其实和1929年那些被所谓圣母奇迹蛊惑的十字军没有什么两样，只是还保留着心中的温柔；直到遇到了他最初的指引者、最初的爱人，玛克达蕾娜为止——她想在一生中真正地活一次，哪怕付出生命的代价，而他只是在认识了玛格达蕾娜之后，才开始明白自己为什么而活，尽管玛格达蕾娜给他的也只是一个飘渺的大致方向。再后来为修会工作、杀戮恶魔，他一直都在追寻着，但直到最后才发现自己想要追寻的其实是什么；一生的时间，一直在迷雾中寻找，其实在那一天，墓穴的门就已经被打开了。那个女孩的金发的光芒刺穿黑暗和雾霭，闪耀着明亮的阳光。<br>——“你这连爵位和名字都没有的最卑微的存在……”</p><p>我不得不说，克罗诺这话实在太帅了。——所谓“爵位”，是人类的恶魔学者对恶魔等级的一种划分；而动画里艾恩和跟随他的人就是因为背叛魔界，所以被剥夺了爵位和称号，被称为“罪人”。这种给恶魔划分爵位的说法并不见于基督教传统，而是出自中世纪恶魔学者和神秘主义者的理论；而且《Chrno Crusade》里对恶魔的划分相当简单，只是简单地把公侯伯子男的顺序排一下而已，和神秘学那对恶魔等级的复杂划分完全两码事。那个子爵雷莱耶（レライエ）是动画里除了艾恩之外唯一有出处的恶魔，他是所罗门72柱魔神的一员，在所罗门72柱魔神里的爵位是侯爵，但在动画里却被莫名其妙地降到子爵了……</p><p>迪佛在动画中说：为什么会有恶魔？因为神需要借着恶魔的存在让人们来崇拜自己；他的这个理论其实早就有了，和伊壁鸠鲁提出那个关于神的全能和至善的著名的悖论一样，公元2至3世纪的时候，一个问题困扰着当时西方和近东的所有宗教，和现代人的疑问毫无二致：既然神是善且全能的，为什么它还允许邪恶存在在世界上，而不去消灭它？其中有些宗教，像摩尼教，就开始往善恶二元论的方向解释，而基督教正统教会遵循奥利金的观点，走上了神正论的路子；但远在基督教诞生之前，针对这个问题，犹太教的一些拉比就曾经提出过迪佛的这种观点，后来某些早期基督教异端也借用了这种解释。——而且监督是安排迪佛看着一张塔罗牌说出这番话的，这是足以概括动画精神的一个例子：其实《Chrno Crusade》里的所有思想都没有什么新鲜的，只是一个杂烩而已。我说过，它不是一部宗教剧，这个世界的设定也好、迪佛提到的这种观点也好，包括全片的宗教背景，只不过是它所借用的一个卖点和噱头；它既不是神秘主义，也跟神学扯不上关系，至于谈什么上帝、选择、正义，更是胡扯淡；而且，无论用什么理论来装饰它，我估计信教的人看了之后都会气至脑血管爆裂而死。</p><p>1929年，是黄金时代的最后一年，也是世界开始走向混乱、迎来那场人类史上规模最大、流血最多的战争的一年；在国家利益的名义下，为了为自己的种族争得生存的权利，数千万的生命在战火中消逝。而著名的大萧条(Great Depression)就又紧跟在动画的情节之后，成为大战的前奏；股票是在1929年10月开始跌的，这也就是动画结尾的那个时间（雷明顿特别提到过“股市开始狂泻”）。《Chrno Crusade》发生的一年，正是历史的一个转折点，在这一年里，不管愿意不愿意，人们再度以见证者的身份眼见历史的改变，活下去的人比死人承受得更多，因为他们要把这时代的重担永记心间。</p><p>动画的最后，艾丝玛利亚活了下来。其实，动画的核心只是围绕着罗塞特和克罗诺之间展开，只有他们死就够了；身为“地上代行者”（アポスルス，这不就是apostles，使徒吗……还非得说得这么绕口……）之一员，在她稚嫩的双肩上，压了比凡人更重的命运，在这命运下，她曾经变得软弱，但在认识了罗塞特和克罗诺之后，命运也开始发生改变。看到动画的后面，我都已经怕看到纯粹轻松、搞笑的情节了：在这样的情节之后到来的，一定是更加残酷的黑暗。——但是，讲述1928年圣诞节的那一集却真的是让人的心中充满温暖；日本动画中甚少见到这种对亲情的描绘，玛克达拉的修女们不是她的亲人，可那一集、那一夜洋溢着的，却是浓浓的家庭的幸福。</p><p>为什么这动画里所有的人都觉得自己有罪呢？是被原罪感束缚着吗？艾丝玛利亚，如果像她这么纯真善良的孩子都觉得自己罪孽深重，无法原谅自己的话，恐怕世界上也就没有谁能活得下去了。看着她的痛苦在圣夜的温情中融化消散，我们不由得轻轻微笑着；在这样的环境中，艾丝也逐渐变得开朗、坚强。在克罗诺消沉的时候，拿着合影，最后推他一把的，正是她的力量，这已经不再是神的力量，而是属于她自己的，由坚强而产生的力量。在生命消逝的时候，也只有她才能真正理解那两个人，面对夕阳下最后的微笑，她最终是以微笑来告别的；修女艾丝玛利亚，她的心已经不再软弱，在神和人的支持下变得坚强</p><p>动画中一再提到的“法蒂玛预言”，确实是如它所描述的，1917年在葡萄牙的法蒂玛，“圣母”在三位牧童，路西亚（Lucia）、弗兰切斯科（Francisco）和扬辛塔（Jancinta）面前显现（动画里说艾丝玛利亚也是法蒂玛出身的，并且承受了圣母的预言；然则当年见到圣母的那三个小孩的名字都记载得很明确……），但从1917年5月13日到10月13日一共显现了六次。这件事越传越大，从第三次显现开始，来看的人成千上万，越来越多，最后一次有七万人亲眼见到。欧洲所谓“圣母显灵”的事情，这并不是唯一的，还有如“岩洞圣母”之类的传说也很著名；但在法蒂玛的这件事，因为是如此多的人亲眼目睹的，而且圣母还“亲自赐下”教谕和预言，所以对天主教会来说，这是很重要的一个事件。因为有这么多人目睹，而且年代又这么近，所以这件事并不是虚构的或想象的，除了宗教上的解释之外，还有很多人提出种种猜测，其中自然不乏有把这事推到外星人头上的；但回到动画里，它其实只是借用这个传说而已，而且，其实也只是把这传说作为噱头而已……动画里说所谓第三个预言是“地上代行者”的出现，玛克达拉修会自己就猜错了，而且预言的内容动画里也说错了：“据解释”，第一个预言(！)是预言二战的，第二个是预言苏联解体的（“俄罗斯要回头……”云云），第三个预言2000年才公布，现在还没有实现，1981年那次对教皇的未遂暗杀显然不能算。</p><p>这里给出第三预言的全部内容，自己来看一下吧：<br>法蒂玛第三预言<br>耶稣，玛利亚，若瑟。<br>一九一七年七月十三日在法蒂玛科瓦-伊里亚所启示的秘密的第三部分。<br>        我写下以示听从您，我的天主，您借着莱里亚主教和您的及我的至圣圣母而吩咐我这样做。<br>        在我已经陈述过的两部分之后，我们看见圣母右侧较高的地方有位天使，左手持着一把火剑，这把火剑射出闪耀的火焰，似乎要烧毁世界；可是当火焰一接触到圣母右手向天使发出的光芒便熄灭。天使用右手指着大地，高声喊道：“补赎，补赎，补赎！”</p><p>　　 接着我们看到巨大的光，那是天主：“有个类似在镜子中看到的，在镜前走过的人影”，一位身穿白衣的主教，“我们预感到他是教宗”。其他许多主教、神父、会士、修女都登上一座陡峭的山，山顶上有一支巨大粗糙的干木十字架，好像是软木和树皮做的；</p><p>　　 教宗在抵达山顶之前，颠簸地走过一座半成废墟、尚在抖动的城市，他痛苦哀伤，为在路上所遇到的尸体的灵魂祈祷；在他抵达了山顶，匍匐跪在大十字架脚下时，被一群士兵用枪和箭杀死，其他的主教、神父、会士和修女以及各种在俗的人，不同阶层和地位的男男女女，也都接二连三同样地死去。</p><p>　　 在十字架双臂下有两位天使，每位手中都有一个水晶的浇水桶，水桶盛着致命者的血，他们又用这些血来浇灌接近天主的灵魂。</p><p>　 一九四四年一月三日于图伊</p><p>明白真正的预言和动画里的差别了吧？就算以宗教的角度来解释，这也不止是一次对教皇的暗杀（还未遂）事件而已啊。不过，动画里也有说得正确的地方，就是所谓恶魔崇拜（Satanism）。这样的人几乎从基督教兴起的年代就有了，他们企图召唤恶魔、和恶魔签订契约，还恶意地模仿天主教的仪式，进行所谓黑弥撒，等等；不过，现代的一些“撒旦教徒”跟以前有了很大的改变，虽然一些人还是秘密的犯罪者，企图借助恶魔的力量达到自己的目标，但其他的教徒大都只是一些世界观价值观极度扭曲的家伙，想随心所欲地生活罢了。他们认为撒旦代表人的正当的私欲，崇拜他既可以满足个人的欲望也不会伤害他人；这些信徒直至现在还很活跃，1966年在旧金山（旧金山耶！）建立了“撒旦教会”，1969年还出版了《撒旦圣经》；本来想把撒旦教会（我和朋友喜欢管他们叫“傻蛋教会”）的主页连接在这里贴出来，但就像我说的，这些人的世界观价值观极度扭曲，差不多就是邪教，所以想想还是算了……</p><p>很有趣的是，动画第一集提到恶魔崇拜者时说的是英文“Satanist”，从第一集之后就全用日文直接说“恶魔崇拜者”了；估计是第一集时观众没听懂，所以后来又改的吧？动画里提得很好，这些人里，有的是有钱人活得不耐烦了想找刺激的，有的是为了达到自己的野心的，有的是对现实心灰意冷为了报复的；而这些人最后全都没有什么好下场，全都成了恶魔的食物和棋子。所有的恶魔和人类，在动画里却又操纵在艾恩的手上，有时真是觉得，说他是诺斯提教义中的那个恶的Aion，真是贴切。罗塞特最后几乎是用生命才摆脱了他的束缚，约书亚则付出了多少年的记忆为代价。莎戴拉为菲奥蕾而绝望，犹如罗塞特为约书亚而绝望一样；被操纵着，无法脱身，作为棋子，只有毁灭才能得到解脱——这不是太悲哀了吗？我们被这接踵而来的痛苦浪潮扑击得晕头转向，甚至有些时候竟会觉得她们的死是一种恩赐的幸福。动画做得总算还有最后一点人性，让菲奥蕾喊了一声“莎戴拉”；她们之间残酷命运的结束也许可以被称为幸福，——凯特修女不是也说过，罗塞特看不到即将到来的世界大战是幸福的吗？活着的人，难免会有这种想法吧？——但我宁可让她们痛苦地活着，也比死亡的安宁要好上无数倍。</p><p>一个不可否认的事实是，动画和原著漫画比起来，少了很多东西，也改了很多东西。但是，我对改编作品一贯的观点，是把改编作看成和原作不同的东西，或者至少是对原作的重新演绎。在论及Kanon和君望的动画时，我就是这么做的。我无意比较动画和漫画之间的优劣，因为它们是完全不同的东西。只要能够给人感动，这就是好作品，不需要别的什么说法。</p><p>应该都见过《Chrno Crusade》的一些彩图吧？很多彩图里都出现过一样东西，就是套在手上的布袋人偶。虽然是作为搞笑道具而存在的东西，然而这些人偶也恰恰暗示了主角们的命运：被操纵、控制，至死方休；艾恩操纵着他们，但其实操纵他们的不是那个恶魔的手，就连艾恩自己其实也在无形中被操纵着。动画的最后，谁赢了？艾恩没赢，恶魔们没赢，玛克达拉和人类也没赢。赢的只有一个，那就是艾恩经常挂在嘴边上的：天上的那个存在。无论是信仰和恶魔对信仰的争夺，说到底，都并没有什么选择的可能性，所有的人类和恶魔，只不过是神的一个棋子；他从来没出现过，但却无时无刻不在看着。艾恩时时往天上喊他的名字，他也是知道自己被操纵着吧；虽然只是通过赐圣痕来显示了一下他在关注着这个事情，但实际上他在幕后操纵一切，他才是最后的赢家。动画中把“Crusade”和之后的纳粹都称作艾恩给这个世界留下的遗产，这没有错。Aion的名字，正是“永恒”。正像他所说过的那样：<br>吾乃乱欲之永恒，长河下吾神之影。<br>　　魔界将充满光明，上天将被黑暗笼罩。<br>　　看看这时代吧。即使曾经疯狂，人类却都将在吾等掌握之中。”</p><p>“乱欲之永恒”这话不是随便说说而已的。在动画的最后，艾恩并没有复活。雷明顿在梵蒂冈看到的不是艾恩，那只是他看到杀手的脸之后产生的幻觉；但他看到的又确实是艾恩——不是作为恶魔的艾恩，恶魔艾恩确实已经死了，死在克罗诺手上，化成飞灰；但他所代表着的那股意志，那股渴望混乱和毁灭的意志却没有死，也不会死。这意志超越了艾恩本身的存在，自从文明诞生之初就一直存在于历史之中。这样的意志一直支配着那些没有信念的心灵，给他们一个幻象，让他们为这个虚无的目标付出一切，但最后却是为野心家买了单。雷明顿在杀手的脸上看到的，正是贯穿艾恩的这种意志，其实艾恩本人，也只不过是这大意志的一个纯粹的形象。我本人是无神论者。所谓的“神”，代表的不就是历史和世界的规律吗？永远转动不止的巨轮之名，是“历史必然性”；在这巨轮之下，以个人之力无法阻止它的转动或改变其方向，但至少可以令它的转速稍稍改变一些，或快或慢。但无论个人的努力如何，所谓Astral Line——大灵子流的流向却不会被这几个小小的漩涡影响；它只是一直向前流动，直到人类的终结。……那终结之处，正是世界的现实。而在这个现实里，贯穿《Chrno Crusade》全部的，是“信念”；这信念中最初、也是最终的，则是对生命的热爱和渴望。罗塞特早就知道自己命不久长，但正因为这样，所以她和克罗诺才加倍努力地活下去，在短暂的人生中放射出明亮的华光；虽然生命短暂，可她没有白活，至少她努力地活过，在失去的同时也得到了那么多、又以自己的力量改变了那么多。雷明顿放弃了牧师的身份，凯特修女说她会坚持信仰，这一切都是他们自己的选择，包括艾丝玛利亚的坚强和莎戴拉的温柔，这些都是被罗塞特改变的。最后那半年的时光，她一定是幸福地度过的吧？她痛哭着，说她不想死；这一点点软弱却使那颗坚强的心变得格外真实。当夕阳落下之后，留在这世上的就是最后的微笑，还有那已经熄灭、然而又在所有人心里继续燃烧的灵魂之灯。</p><p>　　 We can do nothing but to see the times go by in the path which God has chosen.<br>　 ——我们在神所指示的道路面前，只能无力地看着时代的车轮滚滚而过……</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摇摇晃晃的孩子</title>
      <link href="/2007/12/16/----17/"/>
      <url>/2007/12/16/----17/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2007-12-16 12:04</p></blockquote><p>小时候走路总是摔倒，没有缘由的。</p><p>妈妈看到的时候总是不去管我，让我自己慢慢的爬起来，当时觉得妈妈很坏。我是全家最小的孩子，只有妈妈不爱我。</p><p>后来长大她和别人谈孩子摔倒的问题，总是说：如果她来扶我问我疼不疼，那我肯定会哭，而且没完没了。摔了自己爬起来不就完了。</p><p>再往后，我摔倒的时候，也越来越少的人愿意过来扶我一把，理由有很多，比如：我长大了。</p><p>现在我已经很少摔倒了，只是摇摇晃晃，我不知道什么时候我会再次跌倒。但我明白，到那时候，我还是得自己爬起来，就像小时候一样。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锦囊妙计</title>
      <link href="/2007/12/10/----16/"/>
      <url>/2007/12/10/----16/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于  2007-12-10 20:17</p></blockquote><p>洞悉万物，避而不语。</p><p>古有孔明锦囊妙计，即可治国平天下，还可帮刘备娶妻讨媳妇。自此子往凡提锦囊，众人皆以内必有乾坤，其意甚远，不可言传。</p><p>某国国王英明睿智，其治下歌舞升平，百姓安居乐业。但如所有的故事一般，没有点岔子，就不成故事。空明流转，国王老去，虽然国王对自己的一生没有遗憾，但人，不为自己忧，必为子女忧。国王的儿子，国家的下一任继承人，如历史众多XX二世一般，无才也无能，并且玩虐不堪。国王为此夜不能眠。国王当死之前，叫他的儿子到自己的床前，给了他三个锦囊。告诉儿子，到危机之时，才能打开。说完就挂了。</p><p>时间眨巴就过，小国王也没出啥意外的把国家整出一堆乱子，没折腾几年就有民乱出现了，小国王只有打开第一个锦囊，里面写道：把罪名推给前任的国王。小国王即可下诏天下，说明这些都是老国王当年的弊政，由于老国王在世所以隐而不发，现国王死后，弊端自然呈现，并保证这些问题国家很快就能处理，请民众对政府有信心和耐心。用了第一个锦囊，国家终于得到了短暂的安稳，人民的暴乱也被安抚了几年。不过虽然话放出去了，但实际的问题并没有得到任何的解决，所以没过几年，暴乱很快就又再次出现。小国王很无奈，只有打开了第二个锦囊，里面写道：更换行政的班子。小国王看后立刻更换了一片大臣，很快行政体系焕然一新，冲劲十足，国家又再次恢复了秩序。又是数年过去，新的班子由于提拔的过快，腐败之风悠然而升，腐败导致国家比前两次更快的衰亡下去。但由于有前两次的经验，小国王立马有打开了第三个锦囊，只见里面写道：给你的儿子也准备同样的三个锦囊吧。</p><a id="more"></a><p>故事是说完了，我曾经学习过一段时间的魔术，魔术其实讲究的不只是技巧，还是某种默契，这份默契就是，观众知道魔术师假的，但依旧被魔术师的语言引导着自己思路的走向。试想如果在魔术师在晃动双手时告诉你他手上没有一物，你一把抓住他的手会有什么结果？回到故事，如果小国王并不愚昧的听从父亲的话，而是拿到锦囊之后将三个锦囊全部拆开，他会得到什么。也许他可能愚昧到连第一次暴动都无法躲过，但在我看来，我觉得小国王起码看到第三个锦囊起码应该明白自己的底线在哪里，做事是要有分寸的，锦囊的妙用在于它扩大了这个分寸的尺度，他扩大的小国王胡闹的范围，却让小国王误会的认为这个扩大是没有止境的。而胡闹到了变撞了墙，知道疼，已经晚了。因为他使得胡闹的范围扩大，而破坏面积也同时增大了许多。小国王的愚昧，在于他不明白锦囊是缓和之道，而不是一个解决之道。花开两朵，各表一枝。老国王是清楚小国王是有疾的，但是他并没有给予药物，而是给予了毒品。这个毒品不但侵蚀了他的孩子，而且腐坏了他的国家。他的错在于他交给孩子方法，却没有交给他道理。让他的孩子还是走上了打开第三次锦囊的道路。他告诉了孩子锦囊之利，却没有叙述锦囊之害。更可悲的是他在第三个锦囊里让自己的孩子再用同样的锦囊交给他的孙子，他不明白锦囊的危害已经把盛世变成的败世，而三个锦囊且不能救一个由盛转衰的过程，还能指望这三个锦囊去挽救一个败势。</p><p>所以写锦囊和用锦囊，本就是一件互相需要的过程，用的人满足了写的人的自作聪明，而写的人满足了用的人的一时之须。但这并不能解决任何实际的问题，只是这两者互动之间一个互相欺骗的过程，在我看来，这是一个比一个蠢，一个比一个笨。</p><hr><p>由于开篇提到孔明先生，所以稍微解释下，锦囊是演义之说，与实际的孔明没有任何联系，所以结尾的愚昧并不涉及孔明先生。这只是一个拿出来说事的由头，与任何人无关。如有冒犯，属我之罪。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请微笑吧</title>
      <link href="/2007/10/29/----15/"/>
      <url>/2007/10/29/----15/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-10-29 13:41<br>只有永恒的微笑才是真正的坚强，某人如是说。好吧，我承认，我选择性的失明了他括弧里的话：那没事傻乐算什么呢？</p></blockquote><p>认清楚自己从哪里来，又要往哪里去，现在所关心的事情是否在十年后变的愚蠢，为什么现在还要为些微不足道的琐事烦恼，如此漫长的岁月是可以留下多少日落的记忆？</p><p>如果你因此不再乐观，那么请笑吧。不要询问我受到别人冒犯时，人生不如意时你又如何笑的出来？有一句至理名言，请反复练习，直到它们深入你的骨髓，出口成言，永远的保持良好的心境。这句话，传自远古的年代，它们讲伴随你度过难关，使你的生活保持平衡。这句至理名言就是：这一切都会过去。</p><a id="more"></a><p>世上的种种到头来都会成为过去，心力衰竭时，请安慰自己，这一切都会过去；当洋洋得意时，请提醒自己，这一切都会过去，当穷困潦倒时，请告诉自己，这一切都会过去；腰缠万贯时，也请告诉自己，这一切都会过去。昔日修筑金字塔的人早已作古，埋在冰冷的石头下面，而金字塔有朝一日，也会埋在沙城之下。世上的种种必然成空，请不必介意今天的得失。</p><p>用笑声来点缀今天，用歌声照亮天空，不用苦苦的去搜寻快乐，认真的生活忘记忧伤。享受今天的快乐，它不像粮食可以储藏，不像美酒越成越香。不必为了将来而活。今天就是丰收的日子。</p><p>所以，请微笑吧。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写什么？</title>
      <link href="/2007/10/21/----14/"/>
      <url>/2007/10/21/----14/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-10-21 01:40</p></blockquote><p>今晚其实应该是有很多东西可以写的，但写了好几次都被我删除了。果然一个半公开的地方是有所顾及的。这倒不是怕被人看到什么丑态。只是私事实在不足为外人道。</p><p>过去听广播的日子。有个深夜节目，情感向的。有个单元，叫十字路口。简单复诉下内容就是主持人念一个故事，这个故事只念一部分，然后就进入十字路口，让听众打电话进去为故事的主角选择前进的道路，并交流选择的理由。一段结束后主持人继续念故事，当然使用的是故事主角的选择。直到故事的结束，基本故事都是大起大落，但似乎主持人手头并不缺乏这类的素材。</p><a id="more"></a><p>故事本身就是很玄乎的东西，然创作都是来源生活的，就如每期《知音》或者《家庭》这种以他人人生为主体的杂志，翻开这类杂志你也许能看到满纸的荒唐，人如何可以走向那样的极端。但那里的编辑会笑着告诉你，这里的故事都是真实的。这些杂志在我识字前家里就有一大箩了，当然现在也更加没有倒闭，生活都在继续。故事是永远不会完结的。杂志的老板乐呵呵的时候不难想象又有多少人走完悲惨的一生。将这些人成片成片拉到广场死去，也许才可能触目惊心。</p><p>清醒下思路。很多人说人生就那么几步，走对了一帆风顺，走错了步步为艰。但是这些话对于现在的我已经是P话了，我已经做出了自己的选择。这个选择超出了对和错的范畴，因为别的选择即使是对的，可惜那也不会是我要的。</p><p>最后<br>　　请您，保佑我……　　</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Death note</title>
      <link href="/2007/10/18/----13/"/>
      <url>/2007/10/18/----13/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-10-18 19:21 </p></blockquote><p>A story:</p><p>　　一个谣言在森林里引起轩然大波，每个森林居民都知道了熊有一张死亡名单。大家都想知道名单上有谁。</p><p>　　鹿第一个鼓起勇气来到熊的家里，问：“熊，说吧，我在名单上面吗？”</p><p>　　“是的，”熊说，“你的名字确实在上面。”</p><p>　　失魂落魄的鹿转身离开。两天后，大家发现鹿的尸体。<br>    <a id="more"></a><br>　　森林居民心里的恐惧日益加重，大家都在问同一问题：名单还有谁？</p><p>　　野猪第一个失去耐心，它找到熊，问它自己的名字是否在名单上。</p><p>　　“是的，”熊回答，“你也在上面。”</p><p>　　野猪也被吓破胆，匆匆告别熊，两天后，它也死了。</p><p>　　这时森林被恐惧笼罩着，只有兔子还敢找熊。</p><p>　　“熊，我在名单上吗？”</p><p>　　“是的，你也在上面。”</p><p>　　“你能把他划掉吗？”</p><p>　　“好的，没问题。”</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>臭皮囊</title>
      <link href="/2007/10/10/----12/"/>
      <url>/2007/10/10/----12/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-10-10 08:28</p></blockquote><p>人真tm的脆弱。</p><p>当以人类每天活动时间为例，正常的人每天需要睡眠七到八个小时。以此来计算那么人一天就是活动十六个小时，这个比例就是说我们每活动两分钟就必须停下来休息一分钟。虽然这样拆掉时间可能有点偷换概念，但依旧不能改变人需要过多休息这个弊病。</p><p>如果我活六十岁，那我真正活动时间才四十年，好好活着。我们要死很久，真的很久，怎么办？即使活着，也才四十年。这还不包括伤风感冒流鼻涕扭了胳膊拐了脚等等等等等”天灾”作祟。</p><a id="more"></a><p>时间不够啊，作为宅的资本，时间在哪里。暴走暴走。</p><p>五点起床赶工网页，惊呼学校做一半的内容消失在移动硬盘的不知哪个该死的坏道里。重做重做。两个半消失的奋斗。悲愤的早晨，正事后摆在面前的两条路，睡觉还是游戏？我该死的又把睡觉提上了今天的日程，我都无奈了我</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No One On Earth Can Beat Me！</title>
      <link href="/2007/10/08/----11/"/>
      <url>/2007/10/08/----11/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-10-8 03:39</p></blockquote><p>对于现在没什么比这更振奋人心。</p><p>三年，beyong the game。这首主旋律再次响起。令我激动的不再是W3，而是在此刻奋斗在西雅图的pj。对于一个已经许久没有关心星际游戏的人，多少年以前奋斗在黑吧的日子也已经早就消逝。</p><p>此刻，战斗在继续，一切都有可能，兴奋，带着几年的期盼。多少年前，拿起游戏杂志上面看到中国玩家只能以邀请赛的形式才可能和韩国星际对上一次，而今天，站在这个wcg赛场上，直面冲击韩国多年霸主地位。冠军，只有一步了。你不想留下遗憾吧，在这个西雅图的赛场。人生就几步，不能耸。</p><p>No One On Earth Can Beat Me！记住这个，加油</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在努力</title>
      <link href="/2007/10/04/----10/"/>
      <url>/2007/10/04/----10/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-10-4 06:44</p></blockquote><p>不是所有事情都能被掌控，所有问题都能被解决，所有烦恼都能烟消云散。</p><p>而我，已经尽力在用自己的能力去接近最真实的一面。</p><p>这时，有人微笑着告诉我：不要放弃信仰……</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一口吃不成胖子</title>
      <link href="/2007/09/21/----8/"/>
      <url>/2007/09/21/----8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-9-21 00:04</p></blockquote><p>从Css到ps，似乎我很喜欢给自己增加难度。虽然今天的思路已经远比昨天清晰。也了解了结合设计网页才是王道。纯粹的css+diV定位网页对于现在程度的我几乎是不可能的任务。</p><p>既然不是天才，就只有找到最可能的办法。今天在书城翻看了一本ps和网页梦幻设计。大概这个名字吧。里面使用了大段的ps效果来填充网页。使用直接导出导入的方式来让网页丰富起来。用少量的css语句即可控制里面的内容。而一只困扰我的所有东西都在图片上超链如何实现这个蠢问题也在刚才几分钟相通了。热点这个东西被我遗忘了。笔记记后让我反而没有了翻书的习惯。反省。</p><a id="more"></a><p>渐渐开始清楚起来，明白网页设计我学习的程度有多么的烂，也了解自己希望达到心里的水准需要积累的时间。对于美术白痴的我。或许不谈任何技术层面的内容。仅是让我将颜色间配比的协调都不容易。老师说在公司不可能一个人干所有的事情。现在的设计积于一身不必过度的在意。这话别人说可以，自己说：总那么像一个借口。不敢相信。</p><p>出来。再磨练几天。相信自己，但也别高估自己。　　</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一天</title>
      <link href="/2007/09/20/----7/"/>
      <url>/2007/09/20/----7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-9-20 02:54</p></blockquote><p>车丢了。看车人走来走去拖延时间的嘴脸和上次没有区别。只是不同的人，却有着相同的脸。人在怯弱的时候似乎也没有更多更好的掩饰方式。即使当时我觉的看车人也很倒霉。赚那么点钱叫她赔偿明显不现实。但我依旧没有放过她。她直面否认的行为已经无法赢得我对于一个人应有的尊重。争执就这么继续着。</p><p>父母对于此事的态度有着天壤之别，老爸觉得当破财免灾，老妈主张据理力争。对于偏像后者的我，自然免不了受独裁的老爸一顿呵斥。家里我就是汉堡。两面找不自在，即使在我受害时，也没能幸免。</p><a id="more"></a><p>之后的事情比较公式了，报警立案了。其中有一点让我感到奇怪的是：收我钱的那人溜了。虽然我不理解她出于何种理由，但是只是失职而已不至于看见警察要开溜的程度，这让我起先的同情变成了质疑。是否是她和贼勾结作案？回家后妈妈说现在有这样的人存在。这是后话，不表。之后上了警车，车内令人不自在的窄，内门永远反锁，受害人的待遇也低的可怜。笔录其实相当的简单，一些程序上的事情。最终还是要我们去街道办事处找他们私了而已。</p><p>虽然用了这么多字叙述了今晚的经历，但其实今天真正让我悲哀的是，我的网页设计无论如何都无法设计出令自己满意的作品。晚上去买书。一口气读了十章，越读越缺乏信心，里面大段的代码加上专业英文让我怀疑自己是否真的有能力学会。而且我也疑惑这些东西是否真的有意义。是否可以用设计页面完成全部内容，是否两者结合才是网页设计最终的道路。带着很多疑问才是今天迷茫的理由。我甚至怀疑自己的审美观念是否能够作出一个好的作品。怀疑自己。怀疑自己的能力。对于我早就不稀奇了。即使知道这只是个阶段问题，但这远不表示这个阶段可以轻易的过去。处女座的悲哀。一辈子笼罩着我。牛角尖我是钻定了。祈祷自己快点出来。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重逢</title>
      <link href="/2007/09/16/----6/"/>
      <url>/2007/09/16/----6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-9-16 00:53</p></blockquote><p>一个朋友从远方回来。带来了熟悉的身影，也夹杂着陌生的气息。</p><p>以前有人义正词严的告诉我呀，人是会变的。好吧。我承认当时以为自己很牛B的顶了回去：人是不同的。我突然有种被自己耍了的感觉。因为我的理论似乎要站住脚跟拥有着相当的难度。即使这些变化并非无法接受。但我还是比较欣赏，欣赏那穿这黑色校服的企鹅走姿。呵呵。物是人非吗？也许吧。有些词汇总是那么现实。让人逃避。</p><a id="more"></a><p>好吧。我很有八卦的潜质了。那么让我们来说说别人的是非流长？远方回来的朋友对于我兄弟的仰慕之情令我乍舌。一些言语刺激性不能言表。我需要更多的资讯。更多的八卦。谁看穿了我的野心？速速上表，通通有奖……</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间的吝啬者</title>
      <link href="/2007/09/14/----5/"/>
      <url>/2007/09/14/----5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-9-14 23:47</p></blockquote><p>三姐的孩子满三月了，办起了满月酒席，迫于家里的几重压力，我勉为其难的去了。</p><p>去的情况并不如我想象中的糟糕，除了那酒席间的饭菜依旧令人失望意外，其余的一切都好。相比较之下，这是我去过的最简单的酒席，三桌不到的人数对比动辄几十上百的场面，让人感觉安逸。人多我往往找不到自己的位置。</p><p>对于亲戚之间的联系，我确实走的太少了。老爸总是叫我多去时间到亲戚家走动走动，但我似乎总有做不完的事情让我无法离开我的电脑桌。细心整理这里并没有什么是迫不及待的事，相反亲戚里面有我非常喜欢的人，和他们交谈我可以看到我身边看不到的品格。即便如此我还是不愿意离开我的地方。</p><a id="more"></a><p>我时常认为以为自己做事情是效率最高的时候。当我希望真的要完成什么的时候，那么我肯定最希望自己一个人完成，除非这件事情无法一个人完成。我缺乏团队的精神，我是时间的吝啬者。与他人在一起的时候我总以为时间被别人占用，我往往忽视掉和别人一起得到的帮助远大于自己的瞎捣鼓。我经常被自己精打细算的时间所戏弄。因为我缺乏一些基本判断时间效率的能力。我无法分辨我对时间的吝啬是否是真正的节俭。就像一个守财奴他不会明白慈善事业能让他拥有更多财富一样。</p><p>我需要一把尺，一把公正的尺，不带有任何偏差。它将告诉我何时应该拿出自己的时间和家人相聚，何时用来努力学习，何时用来尽心的玩耍。我依旧是个时间的吝啬者，也许将比过去更加吝啬。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节俭</title>
      <link href="/2007/09/13/----4/"/>
      <url>/2007/09/13/----4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-9-13 13:56</p></blockquote><p>有时我会陷入到某种情绪里去，比如，生活是否过度腐败了。</p><p>这种情绪偶尔会让我有节约一把的打算。刚进入大学的时候，出于身边舍友节约的生活习惯，我也算是节约了一段时间。而后的一段时间，我消瘦的厉害，很快被老爸批成本末倒置。在他眼里，人和人本来就是不同的，没有可比性，人应该过好自己的生活，不应当去羡慕别人的奢华，也不该出于对身边某些人相对的寒碜就降低自己的生活水准。</p><p>这些话对于享乐主义的他而言，曾经被我看来是他为自己开脱的借口。在我们社会思想根基就是即使拥有再好的物质生活也要提倡节俭的生活习惯，节约是美德，浪费是犯罪，等等口号不一而足。只要是节约的，都被树成正面的典型，凡是浪费的，直接批去当国匪。所以我爸这种享乐的人就是该被抓去批。</p><a id="more"></a><p>但如果我要阐述什么社会现代化建设需要人民群众一致坚定信念勤俭节约奋斗不息之类的废话是没有情趣挑动我浪费笔墨的。而我想说的是：我崇拜我的父母不是一天两天了。对于我的幼稚总能在他身上找到让我觉悟的标记。这样一个时代，万般皆属下品，唯有读书高的年代，这种精神其实潜意识支撑的是什么？小时候家里的长辈围绕着你耳边的是什么？来回不是那么几句，好好读书，读好书就赚大钱回来孝敬我们。等等等等……既然在孩子的年代就如此露骨的告诉我们追求物质根本是种天经地义的事情，为什么在精神道德文明的建设上又给予我们相反的教育。我们这个时代成长起来的小孩总要接受着两种社会价值观的冲击，在两面的压榨之下导致着我们精神的变态，逼着我们表面做着君子，只知道君子的型却没有君子的德。伪装自己脸孔的面具下都变成了势力的脸。</p><p>既然受教的方法已经产生冲突，我又为什么需要相信任何一边，我只要过好自己的生活就可以了，我不必为了节俭的幌子在外面过着可悲的生活，而回到没人的地方再打开欲望的盒子。是啊，做人要低调。我从不今天腐败了什么就全城通报，也不会买了什么就四处显摆。我只是在过我自己的生活，像我平时过的一样。那些都是我生活的一部分，并没有任何的特别之处。也许会有人鄙视我的品行，说我道德低虐，我并不反驳，但别对我的生活指手画脚，那是我的，谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知道如何结束,不知如何开始</title>
      <link href="/2007/06/27/----3/"/>
      <url>/2007/06/27/----3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-6-27 03:20</p></blockquote><p>小妹要回到自己的城市,口上不说,多少有点落寂.那地方有他的亲友,爱人,一切都很完美不需要操心.</p><p>生活落入了直线.两端无限的延长.选择哪一端.都会离另外一端越来越远.下决心往一个方向移动时.心里种感觉另外一个方向才是正确的.对于很小就明白没有正确答案的选择的我.不正常.</p><a id="more"></a><p>教导孩子要笑,要坚强.也在对自己说.我们都对未来没有绝对的把握.依旧要死抓着前进的路不放.都很确信不走注定失败.却为前行的道路而恐慌.未必是恐慌失败的结果,而是惧怕面对没有达成野望的自己.</p><p>作任何选择都有很多的顾及.思考总是束缚了自己的手脚.挣脱开总不那么容易.刹呐的忧郁也可能错过很多.要变得单细胞.默念一百遍.可能会有前进的勇气.勾建在这脆弱的咒语上.我又犹豫它能有效多久…循环循环…一步也还没前进.</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对NE越来越顺手</title>
      <link href="/2007/05/29/----2/"/>
      <url>/2007/05/29/----2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-5-29 02:11</p></blockquote><p>连续VS NE..连续胜利..让我不经意有点漂起来了..我好像一向很难从主流的战术中吸取的制胜的方法..但总有一些REP能让我眼前一亮…三蛋…三蛋是个全才…他那局ORC使用SH应付吹风的战术让我相当欣喜…W3是很重视英雄…英雄的改变可以让你战术的整个思想的颠覆..而SH的出现就充当了这样的作用…使用SH..虽然我也算是老资格了..但使用的主要方法还是存在于秒杀英雄上面..这一向是过去长期打LT的后遗症</p><p>而英雄要求变..思路要求变..作为ORC…虽然是蛮子…但也得这样…使用常规战术的我…TC应付吹风总是让我有很深的痛…关键就在于TC是近战英雄…本质上他很难逃脱DH的抽魔…而应付吹风…兵永远只是盾…需要的是英雄的杀伤能力…对于这点…职业选手做了很多应付…例如TC带双魔瓶..或者TC开局直接顶无敌保证先头两个W的施放..但即使做到了这一点…也还要保证对方身上缺乏群补..这个对片杀最大的克星…然后抢群补并不是完美的方法…虽然职业做的很完美…但我觉的与其把片杀不如转换为点杀..于是SH就出现了…ORC自身恢复能力差的缺点…使得很大程度上SH是必升治疗波的…而这个思维定式使得蛇杖…这个逆天的魔法几乎被人们遗忘…二级拥有三十平均穿刺伤害…本质上就是风德的恶梦…而它以其极少的耗魔量以及SH为远程英雄还有X这个限制技能…使其成群成为可能…而且..蛇杖魔免的特性让风德拿这些东西毫无办法…唯一能应付的不过是三英雄…而三英雄面对ORC的正面部队…从本身也是难以抽身的…蛇杖就仿佛地精的房子..看似脆弱…实际相当强悍…简单叙述下流程…开局一平如水…注意保护大G…不要错估DH强杀大G的能力…死两只则补一只…死一只则无视了..BM出身直冲对方家…看看对方是否犯些低级错误..例如第三口井太慢..打退…打不退则消耗其资源为目的.优先保存BM血量…碰到不放BR也不放BP的…大G拉来带他走..</p><a id="more"></a><p>中期..BM游走酒馆…看对方是否来压制…来压制则退回BM跟住..拖延时间..不来..去对方家砍砍建造中的东西…不支持全部都去对方家…你地洞全部完蛋了…而他缺顶多是BW起不来…三本科技缺无法阻止…这对ORC不利.SH出来对方就退了..看看能赚几个AC吧..对方保存回去就算了…反正那是应该的…家放双BE..这是个关键…现今主流战术均改变成BE+BS的战术…过度依赖于白牛..然而中期并非决战..白牛未必是必须品..当然五十人口后是要补的…这点是我看到FLY的打法进入的思维转变…FLY双BE硬拼熊鹿的打法让我看到了蛮子的再现…五十人口..BE远比BS厉害..持续出狼骑.放BM升攻防..这点很重要….中间必须打掉野外商店买群补和无敌以及一个分矿…之后进入游走期…升掠夺…对方现在就没换家的资本了..虽然他拆地洞快..但我们拆家更快…记住..这不是WS…只是傻子才会拿明知不敌对方的部队硬拼呢..我们需要时间..游走的过程放下BS和分矿…分矿非必须品…但卡五十人口肯定够造个…如果被打..不救…继续拆他家…拆家时请无限放蛇杖..如果对方回来慢了..而他的家被你拆出一片开阔之地…那就可以一战了…不敌则飞…你游走时NE会可能偷矿..请注意侦察..BS放好后卡住人口优先升专家级白牛…升好后进入暴人口期..狼骑停造..出猎头增强战斗力并且狂出白牛..到六十人口+..拉上苦工..放灵魂连接…一举拿下..记住对方不是死人…侦察为第一参考自行判断何时该做什么…实在不敌而对方已经有压制的趋势..请在位置好的地方放两根塔…放NE进家..饶路后面包抄…对方肯定会优先拉部队对付你的正面部队…而塔此时是安全的…能够保你过关…</p><p>游走的误区..不要以为有心火就无法游走…这只会让对方压力更大..不敢离开家..而此时//你的分矿和家..是安全的..而风德战术有两个很薄弱的环节..一是机动性太差…二是人口总在五十…永远记住不拿五十人口和吹风对战…而七十人口…你输了..练习操作吧…OVER..</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sh飞龙流</title>
      <link href="/2007/05/07/----1/"/>
      <url>/2007/05/07/----1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-5-7 10:35</p></blockquote><p>一直很羡慕UD的战斗体系,无论攻击恢复控制反控制都相当的完美，这是ORC很难做到的.ORC总是需要在突出某一方面而限制掉某一方面,对于这样的平衡拿捏总是无法令人满意.但即使是这样的ORC,依旧能够克制的住UD.虽然这种克制渐渐的不明显了.今天打了三个UD,面对不同的战术,我一直是以首发SH配合大G去MF到二级,然后立刻骚扰UD的练级.这招对付ZZ流一直很有效果,但对付狗流实在是有心无力.前期优秀的UD总是要来压制你根本不去练级的..而你TC出来时对方就带狗去练级了.TC自己也要练级.单英雄陪练的效果也远没有FS来的有效…这让我感到主动权又交到了UD手里,众所周知的,UD是转型最方便的种族..无论早期是狗转ZZ还是ZZ转狗都是可行的战术…但ORC对于TC的依赖以及无法二发其余英雄让选择性变的狭小…在对方狂狗ZZ强推的时候显的很不如意…</p><p>虽然是如此.我依旧乐于使用这样的战术,因为这样的战术在恢复,战斗力,控制力都达到完美..而ORC的反控制力在打UD时基本是不需要的…除非对方使用了女妖或者PL之类的战术才需要出些白牛反克制…既然选择了这样的战术,那当遇到狂狗ZZ的战术时自然也得想出相应的解决之道…</p><a id="more"></a><p>SH的加入首先是突出了恢复能力..以体系来看,恢复能力的突出就是防御能力的突出,UD擅长的就是攻击魔法的技能…而使用SH时就可以做到不用担心对方的片杀技能…但SH也就牺牲点了对狗的杀伤技能..所以要突破这点就得从其他方面着手,首先看TC.TC的技能我首先是会选择踩地.如果不升踩地板,对狗阵型毫无限制可言..虽然可以用狼骑的游走破坏阵型..但狼骑在狗面前基本是无战斗能力的..所以不可能出过多的狼骑..这样等于变相的牺牲战斗力和防御力而来获得控制力.这对于TC只牺牲战斗力单方面而言是不划算的..而且二级踩地也远比二级冲击波来的有效果的多…</p><p>无法从英雄身上着手,只要着眼于作战单位.大型作战单位对于小型快速的作战单位总是有攻击点无法集中的问题..对方的狂狗很容易集中攻击你某个单位,但你的大G狼骑却无法对单个狗实行有效的伤害,尤其是在奶车的支援下小G也显示出出人意料的壮.唯一能对小型单位进行威慑的就是空军,ORC是个空军相当匮乏的种族..虽然毒龙显示出他惊人的实力,但升三本对ORC牺牲太多..而且效率也远不及狂狗成型来的速度.而飞龙是没有顶级空军的溅射伤害的..所以只能以量来取胜…飞龙的量应该是有足够的威慑力的.狂狗打被网下的飞龙是很容易的..这牵扯到一个阵型的问题..如果飞龙被网到对方阵型当中,这只飞龙就丧失了作战的能力.</p><p>所以面对这种极其容易被翻盘的单位..对飞龙的控制应当力求完美..一放一拉都要恰到好处..精确的计算ZZ的网的射程是飞龙的必修功课..与TC方向的距离也要拿捏的很好.这就体现出SH的战术不能有失误.那么这样的战术对于FS+TC速升级纯飞龙的战术有什么区别…</p><p>我以为是群补…飞龙是很贵的…飞龙的积攒是需要相当的过程.而且飞龙的战术是没有时间卡人口的…因为面对狂狗速攻…飞龙慢了等于直接被压到死…如果选择FS+TC..虽然双片杀很有效果…但最后被一只毁灭加双英雄磨死全部的单位…群补是无法支持到后期的战斗的…但SH则不然…SH可以支援飞龙到后期灭掉毁灭…而单靠FS来打毁灭根本是不可能的…至于问我自暴哪去了…飞龙打毁灭足够了..不需要自暴..</p><p>一些注意:飞龙是没钱开矿的,飞龙是缺乏压制的.飞龙打胖子是无力的..对方如果出胖子..少则KEDO,多则三本毒龙..不要在意升级的时间…飞龙对于拉阵型好的胖子ZZ是没得打..侦察无论打什么族都很重要..从而又延伸出.SH飞龙流是缺乏侦察手段的..非常规战术总是很难完善..希望有办法再改进工作更多细节的问题..多实验吧。</p><p>所谓SH飞龙流,其最克制的就是慢ZZ的战术.这也曾经是UD对付ORC的主流战术之一…但随着TED和FOV等UD对UVO战术理解的变化.众UD也从新开始考量普通的ZZ流对于ORC的被动局面一定要改变…而在这个主流战术变化的时候.选用一套针对过去主流战术显然是不明智的…飞龙作为ORC最容易翻盘的单位…讲究的是暴发力…这里引进破残的概念吧…简而言之就是要从量变产生质变…我曾经长时间打UD模范ZAD的打法…FS+TC暴飞龙…这个战术对于飞龙的保护很不周道..但是依靠着TC和W和FS的C..曾经横扫UD地面全部力量…而SH的打法却走向另外个极端…他使WC连杀..变成了ET的防御..而这种防御战往往在消磨战中最后无法占据主动…</p><p>例:UD的狂狗一波加一ZZ冲ORC家时.经常能体会一个状态..就是,狂狗死光…地面剩六个左右的KL…天空飞龙不过两只..对方还剩一奶车…两只飞龙毫无意义..被LICH活活点死…而地面的英雄反而不是UD英雄的对手..</p><p>这就造成了英雄对碰时的失衡…对于残局的场面是相当不利的…我们必须考虑到残的结果…综合这些因素.还有上篇讲的侦察苦难等:我不认为SH飞龙流还存在开发的价值..当然我承认我并没有开发全这个战术..由什么时间过度到飞龙或者开矿的毒龙我都没计算过…但我现在认为这个战术的实用性可能要低于三本毒龙流….SH依旧难以担当首发大任..唉.<del>~</del></p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>關于“宅”的意識形態</title>
      <link href="/2007/04/12/---/"/>
      <url>/2007/04/12/---/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写于 2007-4-12 03:29</p></blockquote><p>很明顯,現在的我徹頭徹尾的宅了.</p><p>對于現在宅這個詞,從覺大多數人的眼里已經是個標準的貶義詞了,對于小眾文化大眾一向有不愉快的臆斷，既然如此那一切都從源頭開始吧:<br>Otaku（御宅/宅） 首先這個詞最早并非動漫或者游戲屆的特有名詞，Otaku這個名詞最早在日本科幻聚會中流傳開的，他一般指對于某樣事物到了令人發指的地步。無論迷戀什么都可以被稱為Otaku，這個詞首先有其非常廣義的概念，一般人們所能想像倒的領域都有Otaku的存在。</p><p>當然，Otaku明顯不是那么簡單的事，著重強調一下令人發指這個修飾詞，這個修飾詞意味絕對的極端，任何極端的事物都是只有少數人能夠接受的，無論極端的善或者極端的噩，這也注定了宅文化小眾的命運。很多人以為Otaku就意味和外界米有社交聯系，完全封閉在自己的世界。然而實際上Otaku并非和社會脫節，只是對大眾文化不感興趣，并非對社會流行毫無感覺，只是覺的流行沒有意義。人們總以為Otaku的生活就事消磨時間，他們對于時間的概念模糊不清。然而Otaku的時間觀念要強過一般人，因為他們需要很多時間專著于自己的事情上面，所以他們對時間也幾呼到了吝嗇的地步，是絕對不喜歡浪費時間的事情，意外的是Otaku并不缺乏戀人，而他們也總能處理好于戀人相處的時間，這也得意于他們平時對時間吝嗇的把握。</p><a id="more"></a><p>扯完了別人寫自己，對于宅，我一直把其理解為過去的嘻皮士，這兩者當然事完全不同的事物，但卻事一種社會文化發展下必然產生的一類小眾文化，而這類文化，也恰恰是唯一可以證明我們年輕的時候究竟瘋狂過些什么的證明。對這種小眾的文化，我對它們擁有相當的好感。就如日本Otaku教父說的：Otaku的精神事：努力，進取和自我表現。和家里蹲是兩回事。</p><p>處女座的我沒有亂七八糟的趨向，這份小眾的文化培養的是對一個領域探索頂尖的源動力，蓄這份力，對于將來無論我選擇哪一行，都是份財富。世界上沒有壞事，學會偷起碼也會反扒了。所有的事，看的是去做的人，而不是看他算什么事。。擱筆睡覺。。。</p>]]></content>
      
      
      <categories>
          
          <category> qzone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qzone </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
